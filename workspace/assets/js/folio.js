require=(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/color-convert/conversions.js":[function(require,module,exports){
var cssKeywords=require("color-name"),reverseKeywords={};for(var key in cssKeywords)cssKeywords.hasOwnProperty(key)&&(reverseKeywords[cssKeywords[key]]=key);var convert=module.exports={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};for(var model in convert)if(convert.hasOwnProperty(model)){if(!("channels"in convert[model]))throw new Error("missing channels property: "+model);if(!("labels"in convert[model]))throw new Error("missing channel labels property: "+model);if(convert[model].labels.length!==convert[model].channels)throw new Error("channel and label counts mismatch: "+model);var channels=convert[model].channels,labels=convert[model].labels;delete convert[model].channels,delete convert[model].labels,Object.defineProperty(convert[model],"channels",{value:channels}),Object.defineProperty(convert[model],"labels",{value:labels})}function comparativeDistance(r,n){return Math.pow(r[0]-n[0],2)+Math.pow(r[1]-n[1],2)+Math.pow(r[2]-n[2],2)}convert.rgb.hsl=function(r){var n,e,t=r[0]/255,a=r[1]/255,o=r[2]/255,c=Math.min(t,a,o),h=Math.max(t,a,o),s=h-c;return h===c?n=0:t===h?n=(a-o)/s:a===h?n=2+(o-t)/s:o===h&&(n=4+(t-a)/s),(n=Math.min(60*n,360))<0&&(n+=360),e=(c+h)/2,[n,100*(h===c?0:e<=.5?s/(h+c):s/(2-h-c)),100*e]},convert.rgb.hsv=function(r){var n,e,t=r[0],a=r[1],o=r[2],c=Math.min(t,a,o),h=Math.max(t,a,o),s=h-c;return e=0===h?0:s/h*1e3/10,h===c?n=0:t===h?n=(a-o)/s:a===h?n=2+(o-t)/s:o===h&&(n=4+(t-a)/s),(n=Math.min(60*n,360))<0&&(n+=360),[n,e,h/255*1e3/10]},convert.rgb.hwb=function(r){var n=r[0],e=r[1],t=r[2];return[convert.rgb.hsl(r)[0],100*(1/255*Math.min(n,Math.min(e,t))),100*(t=1-1/255*Math.max(n,Math.max(e,t)))]},convert.rgb.cmyk=function(r){var n,e=r[0]/255,t=r[1]/255,a=r[2]/255;return[100*((1-e-(n=Math.min(1-e,1-t,1-a)))/(1-n)||0),100*((1-t-n)/(1-n)||0),100*((1-a-n)/(1-n)||0),100*n]},convert.rgb.keyword=function(r){var n=reverseKeywords[r];if(n)return n;var e,t=1/0;for(var a in cssKeywords)if(cssKeywords.hasOwnProperty(a)){var o=comparativeDistance(r,cssKeywords[a]);o<t&&(t=o,e=a)}return e},convert.keyword.rgb=function(r){return cssKeywords[r]},convert.rgb.xyz=function(r){var n=r[0]/255,e=r[1]/255,t=r[2]/255;return[100*(.4124*(n=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92)+.3576*(e=e>.04045?Math.pow((e+.055)/1.055,2.4):e/12.92)+.1805*(t=t>.04045?Math.pow((t+.055)/1.055,2.4):t/12.92)),100*(.2126*n+.7152*e+.0722*t),100*(.0193*n+.1192*e+.9505*t)]},convert.rgb.lab=function(r){var n=convert.rgb.xyz(r),e=n[0],t=n[1],a=n[2];return t/=100,a/=108.883,e=(e/=95.047)>.008856?Math.pow(e,1/3):7.787*e+16/116,[116*(t=t>.008856?Math.pow(t,1/3):7.787*t+16/116)-16,500*(e-t),200*(t-(a=a>.008856?Math.pow(a,1/3):7.787*a+16/116))]},convert.hsl.rgb=function(r){var n,e,t,a,o,c=r[0]/360,h=r[1]/100,s=r[2]/100;if(0===h)return[o=255*s,o,o];n=2*s-(e=s<.5?s*(1+h):s+h-s*h),a=[0,0,0];for(var l=0;l<3;l++)(t=c+1/3*-(l-1))<0&&t++,t>1&&t--,o=6*t<1?n+6*(e-n)*t:2*t<1?e:3*t<2?n+(e-n)*(2/3-t)*6:n,a[l]=255*o;return a},convert.hsl.hsv=function(r){var n=r[0],e=r[1]/100,t=r[2]/100,a=e,o=Math.max(t,.01);return e*=(t*=2)<=1?t:2-t,a*=o<=1?o:2-o,[n,100*(0===t?2*a/(o+a):2*e/(t+e)),100*((t+e)/2)]},convert.hsv.rgb=function(r){var n=r[0]/60,e=r[1]/100,t=r[2]/100,a=Math.floor(n)%6,o=n-Math.floor(n),c=255*t*(1-e),h=255*t*(1-e*o),s=255*t*(1-e*(1-o));switch(t*=255,a){case 0:return[t,s,c];case 1:return[h,t,c];case 2:return[c,t,s];case 3:return[c,h,t];case 4:return[s,c,t];case 5:return[t,c,h]}},convert.hsv.hsl=function(r){var n,e,t,a=r[0],o=r[1]/100,c=r[2]/100,h=Math.max(c,.01);return t=(2-o)*c,e=o*h,[a,100*(e=(e/=(n=(2-o)*h)<=1?n:2-n)||0),100*(t/=2)]},convert.hwb.rgb=function(r){var n,e,t,a,o,c,h,s=r[0]/360,l=r[1]/100,v=r[2]/100,u=l+v;switch(u>1&&(l/=u,v/=u),t=6*s-(n=Math.floor(6*s)),0!=(1&n)&&(t=1-t),a=l+t*((e=1-v)-l),n){default:case 6:case 0:o=e,c=a,h=l;break;case 1:o=a,c=e,h=l;break;case 2:o=l,c=e,h=a;break;case 3:o=l,c=a,h=e;break;case 4:o=a,c=l,h=e;break;case 5:o=e,c=l,h=a}return[255*o,255*c,255*h]},convert.cmyk.rgb=function(r){var n=r[0]/100,e=r[1]/100,t=r[2]/100,a=r[3]/100;return[255*(1-Math.min(1,n*(1-a)+a)),255*(1-Math.min(1,e*(1-a)+a)),255*(1-Math.min(1,t*(1-a)+a))]},convert.xyz.rgb=function(r){var n,e,t,a=r[0]/100,o=r[1]/100,c=r[2]/100;return e=-.9689*a+1.8758*o+.0415*c,t=.0557*a+-.204*o+1.057*c,n=(n=3.2406*a+-1.5372*o+-.4986*c)>.0031308?1.055*Math.pow(n,1/2.4)-.055:12.92*n,e=e>.0031308?1.055*Math.pow(e,1/2.4)-.055:12.92*e,t=t>.0031308?1.055*Math.pow(t,1/2.4)-.055:12.92*t,[255*(n=Math.min(Math.max(0,n),1)),255*(e=Math.min(Math.max(0,e),1)),255*(t=Math.min(Math.max(0,t),1))]},convert.xyz.lab=function(r){var n=r[0],e=r[1],t=r[2];return e/=100,t/=108.883,n=(n/=95.047)>.008856?Math.pow(n,1/3):7.787*n+16/116,[116*(e=e>.008856?Math.pow(e,1/3):7.787*e+16/116)-16,500*(n-e),200*(e-(t=t>.008856?Math.pow(t,1/3):7.787*t+16/116))]},convert.lab.xyz=function(r){var n,e,t,a=r[0];n=r[1]/500+(e=(a+16)/116),t=e-r[2]/200;var o=Math.pow(e,3),c=Math.pow(n,3),h=Math.pow(t,3);return e=o>.008856?o:(e-16/116)/7.787,n=c>.008856?c:(n-16/116)/7.787,t=h>.008856?h:(t-16/116)/7.787,[n*=95.047,e*=100,t*=108.883]},convert.lab.lch=function(r){var n,e=r[0],t=r[1],a=r[2];return(n=360*Math.atan2(a,t)/2/Math.PI)<0&&(n+=360),[e,Math.sqrt(t*t+a*a),n]},convert.lch.lab=function(r){var n,e=r[0],t=r[1];return n=r[2]/360*2*Math.PI,[e,t*Math.cos(n),t*Math.sin(n)]},convert.rgb.ansi16=function(r){var n=r[0],e=r[1],t=r[2],a=1 in arguments?arguments[1]:convert.rgb.hsv(r)[2];if(0===(a=Math.round(a/50)))return 30;var o=30+(Math.round(t/255)<<2|Math.round(e/255)<<1|Math.round(n/255));return 2===a&&(o+=60),o},convert.hsv.ansi16=function(r){return convert.rgb.ansi16(convert.hsv.rgb(r),r[2])},convert.rgb.ansi256=function(r){var n=r[0],e=r[1],t=r[2];return n===e&&e===t?n<8?16:n>248?231:Math.round((n-8)/247*24)+232:16+36*Math.round(n/255*5)+6*Math.round(e/255*5)+Math.round(t/255*5)},convert.ansi16.rgb=function(r){var n=r%10;if(0===n||7===n)return r>50&&(n+=3.5),[n=n/10.5*255,n,n];var e=.5*(1+~~(r>50));return[(1&n)*e*255,(n>>1&1)*e*255,(n>>2&1)*e*255]},convert.ansi256.rgb=function(r){if(r>=232){var n=10*(r-232)+8;return[n,n,n]}var e;return r-=16,[Math.floor(r/36)/5*255,Math.floor((e=r%36)/6)/5*255,e%6/5*255]},convert.rgb.hex=function(r){var n=(((255&Math.round(r[0]))<<16)+((255&Math.round(r[1]))<<8)+(255&Math.round(r[2]))).toString(16).toUpperCase();return"000000".substring(n.length)+n},convert.hex.rgb=function(r){var n=r.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!n)return[0,0,0];var e=n[0];3===n[0].length&&(e=e.split("").map(function(r){return r+r}).join(""));var t=parseInt(e,16);return[t>>16&255,t>>8&255,255&t]},convert.rgb.hcg=function(r){var n,e=r[0]/255,t=r[1]/255,a=r[2]/255,o=Math.max(Math.max(e,t),a),c=Math.min(Math.min(e,t),a),h=o-c;return n=h<=0?0:o===e?(t-a)/h%6:o===t?2+(a-e)/h:4+(e-t)/h+4,n/=6,[360*(n%=1),100*h,100*(h<1?c/(1-h):0)]},convert.hsl.hcg=function(r){var n=r[1]/100,e=r[2]/100,t=1,a=0;return(t=e<.5?2*n*e:2*n*(1-e))<1&&(a=(e-.5*t)/(1-t)),[r[0],100*t,100*a]},convert.hsv.hcg=function(r){var n=r[1]/100,e=r[2]/100,t=n*e,a=0;return t<1&&(a=(e-t)/(1-t)),[r[0],100*t,100*a]},convert.hcg.rgb=function(r){var n=r[0]/360,e=r[1]/100,t=r[2]/100;if(0===e)return[255*t,255*t,255*t];var a,o=[0,0,0],c=n%1*6,h=c%1,s=1-h;switch(Math.floor(c)){case 0:o[0]=1,o[1]=h,o[2]=0;break;case 1:o[0]=s,o[1]=1,o[2]=0;break;case 2:o[0]=0,o[1]=1,o[2]=h;break;case 3:o[0]=0,o[1]=s,o[2]=1;break;case 4:o[0]=h,o[1]=0,o[2]=1;break;default:o[0]=1,o[1]=0,o[2]=s}return a=(1-e)*t,[255*(e*o[0]+a),255*(e*o[1]+a),255*(e*o[2]+a)]},convert.hcg.hsv=function(r){var n=r[1]/100,e=n+r[2]/100*(1-n),t=0;return e>0&&(t=n/e),[r[0],100*t,100*e]},convert.hcg.hsl=function(r){var n=r[1]/100,e=r[2]/100*(1-n)+.5*n,t=0;return e>0&&e<.5?t=n/(2*e):e>=.5&&e<1&&(t=n/(2*(1-e))),[r[0],100*t,100*e]},convert.hcg.hwb=function(r){var n=r[1]/100,e=n+r[2]/100*(1-n);return[r[0],100*(e-n),100*(1-e)]},convert.hwb.hcg=function(r){var n=r[1]/100,e=1-r[2]/100,t=e-n,a=0;return t<1&&(a=(e-t)/(1-t)),[r[0],100*t,100*a]},convert.apple.rgb=function(r){return[r[0]/65535*255,r[1]/65535*255,r[2]/65535*255]},convert.rgb.apple=function(r){return[r[0]/255*65535,r[1]/255*65535,r[2]/255*65535]},convert.gray.rgb=function(r){return[r[0]/100*255,r[0]/100*255,r[0]/100*255]},convert.gray.hsl=convert.gray.hsv=function(r){return[0,0,r[0]]},convert.gray.hwb=function(r){return[0,100,r[0]]},convert.gray.cmyk=function(r){return[0,0,0,r[0]]},convert.gray.lab=function(r){return[r[0],0,0]},convert.gray.hex=function(r){var n=255&Math.round(r[0]/100*255),e=((n<<16)+(n<<8)+n).toString(16).toUpperCase();return"000000".substring(e.length)+e},convert.rgb.gray=function(r){return[(r[0]+r[1]+r[2])/3/255*100]};

},{"color-name":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/color-name/index.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/color-convert/index.js":[function(require,module,exports){
var conversions=require("./conversions"),route=require("./route"),convert={},models=Object.keys(conversions);function wrapRaw(e){var n=function(n){return null==n?n:(arguments.length>1&&(n=Array.prototype.slice.call(arguments)),e(n))};return"conversion"in e&&(n.conversion=e.conversion),n}function wrapRounded(e){var n=function(n){if(null==n)return n;arguments.length>1&&(n=Array.prototype.slice.call(arguments));var r=e(n);if("object"==typeof r)for(var o=r.length,t=0;t<o;t++)r[t]=Math.round(r[t]);return r};return"conversion"in e&&(n.conversion=e.conversion),n}models.forEach(function(e){convert[e]={},Object.defineProperty(convert[e],"channels",{value:conversions[e].channels}),Object.defineProperty(convert[e],"labels",{value:conversions[e].labels});var n=route(e);Object.keys(n).forEach(function(r){var o=n[r];convert[e][r]=wrapRounded(o),convert[e][r].raw=wrapRaw(o)})}),module.exports=convert;

},{"./conversions":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/color-convert/conversions.js","./route":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/color-convert/route.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/color-convert/route.js":[function(require,module,exports){
var conversions=require("./conversions");function buildGraph(){for(var n={},r=Object.keys(conversions),e=r.length,t=0;t<e;t++)n[r[t]]={distance:-1,parent:null};return n}function deriveBFS(n){var r=buildGraph(),e=[n];for(r[n].distance=0;e.length;)for(var t=e.pop(),o=Object.keys(conversions[t]),i=o.length,a=0;a<i;a++){var s=o[a],c=r[s];-1===c.distance&&(c.distance=r[t].distance+1,c.parent=t,e.unshift(s))}return r}function link(n,r){return function(e){return r(n(e))}}function wrapConversion(n,r){for(var e=[r[n].parent,n],t=conversions[r[n].parent][n],o=r[n].parent;r[o].parent;)e.unshift(r[o].parent),t=link(conversions[r[o].parent][o],t),o=r[o].parent;return t.conversion=e,t}module.exports=function(n){for(var r=deriveBFS(n),e={},t=Object.keys(r),o=t.length,i=0;i<o;i++){var a=t[i];null!==r[a].parent&&(e[a]=wrapConversion(a,r))}return e};

},{"./conversions":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/color-convert/conversions.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/color-name/index.js":[function(require,module,exports){
"use strict";module.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]};

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/color-string/index.js":[function(require,module,exports){
var colorNames=require("color-name"),swizzle=require("simple-swizzle"),reverseNames={};for(var name in colorNames)colorNames.hasOwnProperty(name)&&(reverseNames[colorNames[name]]=name);var cs=module.exports={to:{},get:{}};function clamp(r,e,a){return Math.min(Math.max(e,r),a)}function hexDouble(r){var e=r.toString(16).toUpperCase();return e.length<2?"0"+e:e}cs.get=function(r){var e,a;switch(r.substring(0,3).toLowerCase()){case"hsl":e=cs.get.hsl(r),a="hsl";break;case"hwb":e=cs.get.hwb(r),a="hwb";break;default:e=cs.get.rgb(r),a="rgb"}return e?{model:a,value:e}:null},cs.get.rgb=function(r){if(!r)return null;var e,a,s,t=[0,0,0,1];if(e=r.match(/^#([a-f0-9]{6})([a-f0-9]{2})?$/i)){for(s=e[2],e=e[1],a=0;a<3;a++){var n=2*a;t[a]=parseInt(e.slice(n,n+2),16)}s&&(t[3]=Math.round(parseInt(s,16)/255*100)/100)}else if(e=r.match(/^#([a-f0-9]{3,4})$/i)){for(s=(e=e[1])[3],a=0;a<3;a++)t[a]=parseInt(e[a]+e[a],16);s&&(t[3]=Math.round(parseInt(s+s,16)/255*100)/100)}else if(e=r.match(/^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/)){for(a=0;a<3;a++)t[a]=parseInt(e[a+1],0);e[4]&&(t[3]=parseFloat(e[4]))}else{if(!(e=r.match(/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/)))return(e=r.match(/(\D+)/))?"transparent"===e[1]?[0,0,0,0]:(t=colorNames[e[1]])?(t[3]=1,t):null:null;for(a=0;a<3;a++)t[a]=Math.round(2.55*parseFloat(e[a+1]));e[4]&&(t[3]=parseFloat(e[4]))}for(a=0;a<3;a++)t[a]=clamp(t[a],0,255);return t[3]=clamp(t[3],0,1),t},cs.get.hsl=function(r){if(!r)return null;var e=r.match(/^hsla?\(\s*([+-]?(?:\d*\.)?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/);if(e){var a=parseFloat(e[4]);return[(parseFloat(e[1])+360)%360,clamp(parseFloat(e[2]),0,100),clamp(parseFloat(e[3]),0,100),clamp(isNaN(a)?1:a,0,1)]}return null},cs.get.hwb=function(r){if(!r)return null;var e=r.match(/^hwb\(\s*([+-]?\d*[\.]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/);if(e){var a=parseFloat(e[4]);return[(parseFloat(e[1])%360+360)%360,clamp(parseFloat(e[2]),0,100),clamp(parseFloat(e[3]),0,100),clamp(isNaN(a)?1:a,0,1)]}return null},cs.to.hex=function(){var r=swizzle(arguments);return"#"+hexDouble(r[0])+hexDouble(r[1])+hexDouble(r[2])+(r[3]<1?hexDouble(Math.round(255*r[3])):"")},cs.to.rgb=function(){var r=swizzle(arguments);return r.length<4||1===r[3]?"rgb("+Math.round(r[0])+", "+Math.round(r[1])+", "+Math.round(r[2])+")":"rgba("+Math.round(r[0])+", "+Math.round(r[1])+", "+Math.round(r[2])+", "+r[3]+")"},cs.to.rgb.percent=function(){var r=swizzle(arguments),e=Math.round(r[0]/255*100),a=Math.round(r[1]/255*100),s=Math.round(r[2]/255*100);return r.length<4||1===r[3]?"rgb("+e+"%, "+a+"%, "+s+"%)":"rgba("+e+"%, "+a+"%, "+s+"%, "+r[3]+")"},cs.to.hsl=function(){var r=swizzle(arguments);return r.length<4||1===r[3]?"hsl("+r[0]+", "+r[1]+"%, "+r[2]+"%)":"hsla("+r[0]+", "+r[1]+"%, "+r[2]+"%, "+r[3]+")"},cs.to.hwb=function(){var r=swizzle(arguments),e="";return r.length>=4&&1!==r[3]&&(e=", "+r[3]),"hwb("+r[0]+", "+r[1]+"%, "+r[2]+"%"+e+")"},cs.to.keyword=function(r){return reverseNames[r.slice(0,3)]};

},{"color-name":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/color-name/index.js","simple-swizzle":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/simple-swizzle/index.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/es6-promise/dist/es6-promise.js":[function(require,module,exports){
(function (process,global){
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.ES6Promise=e()}(this,function(){"use strict";function t(t){return"function"==typeof t}var e=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)},r=0,n=void 0,o=void 0,i=function(t,e){h[r]=t,h[r+1]=e,2===(r+=2)&&(o?o(v):m())};var s="undefined"!=typeof window?window:void 0,u=s||{},c=u.MutationObserver||u.WebKitMutationObserver,a="undefined"==typeof self&&"undefined"!=typeof process&&"[object process]"==={}.toString.call(process),f="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel;function l(){var t=setTimeout;return function(){return t(v,1)}}var h=new Array(1e3);function v(){for(var t=0;t<r;t+=2){(0,h[t])(h[t+1]),h[t]=void 0,h[t+1]=void 0}r=0}var p,d,_,y,m=void 0;function b(t,e){var r=this,n=new this.constructor(A);void 0===n[g]&&K(n);var o=r._state;if(o){var s=arguments[o-1];i(function(){return q(o,n,s,r._result)})}else Y(r,n,t,e);return n}function w(t){if(t&&"object"==typeof t&&t.constructor===this)return t;var e=new this(A);return x(e,t),e}a?m=function(){return process.nextTick(v)}:c?(d=0,_=new c(v),y=document.createTextNode(""),_.observe(y,{characterData:!0}),m=function(){y.data=d=++d%2}):f?((p=new MessageChannel).port1.onmessage=v,m=function(){return p.port2.postMessage(0)}):m=void 0===s&&"function"==typeof require?function(){try{var t=Function("return this")().require("vertx");return void 0!==(n=t.runOnLoop||t.runOnContext)?function(){n(v)}:l()}catch(t){return l()}}():l();var g=Math.random().toString(36).substring(2);function A(){}var j=void 0,S=1,E=2,T={error:null};function M(t){try{return t.then}catch(t){return T.error=t,T}}function P(e,r,n){r.constructor===e.constructor&&n===b&&r.constructor.resolve===w?function(t,e){e._state===S?O(t,e._result):e._state===E?F(t,e._result):Y(e,void 0,function(e){return x(t,e)},function(e){return F(t,e)})}(e,r):n===T?(F(e,T.error),T.error=null):void 0===n?O(e,r):t(n)?function(t,e,r){i(function(t){var n=!1,o=function(t,e,r,n){try{t.call(e,r,n)}catch(t){return t}}(r,e,function(r){n||(n=!0,e!==r?x(t,r):O(t,r))},function(e){n||(n=!0,F(t,e))},t._label);!n&&o&&(n=!0,F(t,o))},t)}(e,r,n):O(e,r)}function x(t,e){var r,n;t===e?F(t,new TypeError("You cannot resolve a promise with itself")):(n=typeof(r=e),null===r||"object"!==n&&"function"!==n?O(t,e):P(t,e,M(e)))}function C(t){t._onerror&&t._onerror(t._result),k(t)}function O(t,e){t._state===j&&(t._result=e,t._state=S,0!==t._subscribers.length&&i(k,t))}function F(t,e){t._state===j&&(t._state=E,t._result=e,i(C,t))}function Y(t,e,r,n){var o=t._subscribers,s=o.length;t._onerror=null,o[s]=e,o[s+S]=r,o[s+E]=n,0===s&&t._state&&i(k,t)}function k(t){var e=t._subscribers,r=t._state;if(0!==e.length){for(var n=void 0,o=void 0,i=t._result,s=0;s<e.length;s+=3)n=e[s],o=e[s+r],n?q(r,n,o,i):o(i);t._subscribers.length=0}}function q(e,r,n,o){var i=t(n),s=void 0,u=void 0,c=void 0,a=void 0;if(i){if((s=function(t,e){try{return t(e)}catch(t){return T.error=t,T}}(n,o))===T?(a=!0,u=s.error,s.error=null):c=!0,r===s)return void F(r,new TypeError("A promises callback cannot return that same promise."))}else s=o,c=!0;r._state!==j||(i&&c?x(r,s):a?F(r,u):e===S?O(r,s):e===E&&F(r,s))}var D=0;function K(t){t[g]=D++,t._state=void 0,t._result=void 0,t._subscribers=[]}var L=function(){function t(t,r){this._instanceConstructor=t,this.promise=new t(A),this.promise[g]||K(this.promise),e(r)?(this.length=r.length,this._remaining=r.length,this._result=new Array(this.length),0===this.length?O(this.promise,this._result):(this.length=this.length||0,this._enumerate(r),0===this._remaining&&O(this.promise,this._result))):F(this.promise,new Error("Array Methods must be provided an Array"))}return t.prototype._enumerate=function(t){for(var e=0;this._state===j&&e<t.length;e++)this._eachEntry(t[e],e)},t.prototype._eachEntry=function(t,e){var r=this._instanceConstructor,n=r.resolve;if(n===w){var o=M(t);if(o===b&&t._state!==j)this._settledAt(t._state,e,t._result);else if("function"!=typeof o)this._remaining--,this._result[e]=t;else if(r===N){var i=new r(A);P(i,t,o),this._willSettleAt(i,e)}else this._willSettleAt(new r(function(e){return e(t)}),e)}else this._willSettleAt(n(t),e)},t.prototype._settledAt=function(t,e,r){var n=this.promise;n._state===j&&(this._remaining--,t===E?F(n,r):this._result[e]=r),0===this._remaining&&O(n,this._result)},t.prototype._willSettleAt=function(t,e){var r=this;Y(t,void 0,function(t){return r._settledAt(S,e,t)},function(t){return r._settledAt(E,e,t)})},t}();var N=function(){function e(t){this[g]=D++,this._result=this._state=void 0,this._subscribers=[],A!==t&&("function"!=typeof t&&function(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}(),this instanceof e?function(t,e){try{e(function(e){x(t,e)},function(e){F(t,e)})}catch(e){F(t,e)}}(this,t):function(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}())}return e.prototype.catch=function(t){return this.then(null,t)},e.prototype.finally=function(e){var r=this.constructor;return t(e)?this.then(function(t){return r.resolve(e()).then(function(){return t})},function(t){return r.resolve(e()).then(function(){throw t})}):this.then(e,e)},e}();return N.prototype.then=b,N.all=function(t){return new L(this,t).promise},N.race=function(t){var r=this;return e(t)?new r(function(e,n){for(var o=t.length,i=0;i<o;i++)r.resolve(t[i]).then(e,n)}):new r(function(t,e){return e(new TypeError("You must pass an array to race."))})},N.resolve=w,N.reject=function(t){var e=new this(A);return F(e,t),e},N._setScheduler=function(t){o=t},N._setAsap=function(t){i=t},N._asap=i,N.polyfill=function(){var t=void 0;if("undefined"!=typeof global)t=global;else if("undefined"!=typeof self)t=self;else try{t=Function("return this")()}catch(t){throw new Error("polyfill failed because global object is unavailable in this environment")}var e=t.Promise;if(e){var r=null;try{r=Object.prototype.toString.call(e.resolve())}catch(t){}if("[object Promise]"===r&&!e.cast)return}t.Promise=N},N.Promise=N,N});

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/process/browser.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars.runtime.js":[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _interopRequireWildcard(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&(r[a]=e[a]);return r.default=e,r}exports.__esModule=!0;var _handlebarsBase=require("./handlebars/base"),base=_interopRequireWildcard(_handlebarsBase),_handlebarsSafeString=require("./handlebars/safe-string"),_handlebarsSafeString2=_interopRequireDefault(_handlebarsSafeString),_handlebarsException=require("./handlebars/exception"),_handlebarsException2=_interopRequireDefault(_handlebarsException),_handlebarsUtils=require("./handlebars/utils"),Utils=_interopRequireWildcard(_handlebarsUtils),_handlebarsRuntime=require("./handlebars/runtime"),runtime=_interopRequireWildcard(_handlebarsRuntime),_handlebarsNoConflict=require("./handlebars/no-conflict"),_handlebarsNoConflict2=_interopRequireDefault(_handlebarsNoConflict);function create(){var e=new base.HandlebarsEnvironment;return Utils.extend(e,base),e.SafeString=_handlebarsSafeString2.default,e.Exception=_handlebarsException2.default,e.Utils=Utils,e.escapeExpression=Utils.escapeExpression,e.VM=runtime,e.template=function(r){return runtime.template(r,e)},e}var inst=create();inst.create=create,_handlebarsNoConflict2.default(inst),inst.default=inst,exports.default=inst,module.exports=exports.default;

},{"./handlebars/base":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/base.js","./handlebars/exception":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/exception.js","./handlebars/no-conflict":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/no-conflict.js","./handlebars/runtime":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/runtime.js","./handlebars/safe-string":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/safe-string.js","./handlebars/utils":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/utils.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/base.js":[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}exports.__esModule=!0,exports.HandlebarsEnvironment=HandlebarsEnvironment;var _utils=require("./utils"),_exception=require("./exception"),_exception2=_interopRequireDefault(_exception),_helpers=require("./helpers"),_decorators=require("./decorators"),_logger=require("./logger"),_logger2=_interopRequireDefault(_logger),VERSION="4.0.12";exports.VERSION=VERSION;var COMPILER_REVISION=7;exports.COMPILER_REVISION=COMPILER_REVISION;var REVISION_CHANGES={1:"<= 1.0.rc.2",2:"== 1.0.0-rc.3",3:"== 1.0.0-rc.4",4:"== 1.x.x",5:"== 2.0.0-alpha.x",6:">= 2.0.0-beta.1",7:">= 4.0.0"};exports.REVISION_CHANGES=REVISION_CHANGES;var objectType="[object Object]";function HandlebarsEnvironment(e,t,r){this.helpers=e||{},this.partials=t||{},this.decorators=r||{},_helpers.registerDefaultHelpers(this),_decorators.registerDefaultDecorators(this)}HandlebarsEnvironment.prototype={constructor:HandlebarsEnvironment,logger:_logger2.default,log:_logger2.default.log,registerHelper:function(e,t){if(_utils.toString.call(e)===objectType){if(t)throw new _exception2.default("Arg not supported with multiple helpers");_utils.extend(this.helpers,e)}else this.helpers[e]=t},unregisterHelper:function(e){delete this.helpers[e]},registerPartial:function(e,t){if(_utils.toString.call(e)===objectType)_utils.extend(this.partials,e);else{if(void 0===t)throw new _exception2.default('Attempting to register a partial called "'+e+'" as undefined');this.partials[e]=t}},unregisterPartial:function(e){delete this.partials[e]},registerDecorator:function(e,t){if(_utils.toString.call(e)===objectType){if(t)throw new _exception2.default("Arg not supported with multiple decorators");_utils.extend(this.decorators,e)}else this.decorators[e]=t},unregisterDecorator:function(e){delete this.decorators[e]}};var log=_logger2.default.log;exports.log=log,exports.createFrame=_utils.createFrame,exports.logger=_logger2.default;

},{"./decorators":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/decorators.js","./exception":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/exception.js","./helpers":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/helpers.js","./logger":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/logger.js","./utils":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/utils.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/decorators.js":[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}exports.__esModule=!0,exports.registerDefaultDecorators=registerDefaultDecorators;var _decoratorsInline=require("./decorators/inline"),_decoratorsInline2=_interopRequireDefault(_decoratorsInline);function registerDefaultDecorators(e){_decoratorsInline2.default(e)}

},{"./decorators/inline":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/decorators/inline.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/decorators/inline.js":[function(require,module,exports){
"use strict";exports.__esModule=!0;var _utils=require("../utils");exports.default=function(r){r.registerDecorator("inline",function(r,t,a,e){var s=r;return t.partials||(t.partials={},s=function(e,s){var i=a.partials;a.partials=_utils.extend({},i,t.partials);var l=r(e,s);return a.partials=i,l}),t.partials[e.args[0]]=e.fn,s})},module.exports=exports.default;

},{"../utils":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/utils.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/exception.js":[function(require,module,exports){
"use strict";exports.__esModule=!0;var errorProps=["description","fileName","lineNumber","message","name","number","stack"];function Exception(r,e){var t=e&&e.loc,o=void 0,c=void 0;t&&(r+=" - "+(o=t.start.line)+":"+(c=t.start.column));for(var s=Error.prototype.constructor.call(this,r),i=0;i<errorProps.length;i++)this[errorProps[i]]=s[errorProps[i]];Error.captureStackTrace&&Error.captureStackTrace(this,Exception);try{t&&(this.lineNumber=o,Object.defineProperty?Object.defineProperty(this,"column",{value:c,enumerable:!0}):this.column=c)}catch(r){}}Exception.prototype=new Error,exports.default=Exception,module.exports=exports.default;

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/helpers.js":[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}exports.__esModule=!0,exports.registerDefaultHelpers=registerDefaultHelpers;var _helpersBlockHelperMissing=require("./helpers/block-helper-missing"),_helpersBlockHelperMissing2=_interopRequireDefault(_helpersBlockHelperMissing),_helpersEach=require("./helpers/each"),_helpersEach2=_interopRequireDefault(_helpersEach),_helpersHelperMissing=require("./helpers/helper-missing"),_helpersHelperMissing2=_interopRequireDefault(_helpersHelperMissing),_helpersIf=require("./helpers/if"),_helpersIf2=_interopRequireDefault(_helpersIf),_helpersLog=require("./helpers/log"),_helpersLog2=_interopRequireDefault(_helpersLog),_helpersLookup=require("./helpers/lookup"),_helpersLookup2=_interopRequireDefault(_helpersLookup),_helpersWith=require("./helpers/with"),_helpersWith2=_interopRequireDefault(_helpersWith);function registerDefaultHelpers(e){_helpersBlockHelperMissing2.default(e),_helpersEach2.default(e),_helpersHelperMissing2.default(e),_helpersIf2.default(e),_helpersLog2.default(e),_helpersLookup2.default(e),_helpersWith2.default(e)}

},{"./helpers/block-helper-missing":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/helpers/block-helper-missing.js","./helpers/each":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/helpers/each.js","./helpers/helper-missing":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/helpers/helper-missing.js","./helpers/if":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/helpers/if.js","./helpers/log":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/helpers/log.js","./helpers/lookup":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/helpers/lookup.js","./helpers/with":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/helpers/with.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/helpers/block-helper-missing.js":[function(require,module,exports){
"use strict";exports.__esModule=!0;var _utils=require("../utils");exports.default=function(t){t.registerHelper("blockHelperMissing",function(e,r){var i=r.inverse,s=r.fn;if(!0===e)return s(this);if(!1===e||null==e)return i(this);if(_utils.isArray(e))return e.length>0?(r.ids&&(r.ids=[r.name]),t.helpers.each(e,r)):i(this);if(r.data&&r.ids){var a=_utils.createFrame(r.data);a.contextPath=_utils.appendContextPath(r.data.contextPath,r.name),r={data:a}}return s(e,r)})},module.exports=exports.default;

},{"../utils":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/utils.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/helpers/each.js":[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}exports.__esModule=!0;var _utils=require("../utils"),_exception=require("../exception"),_exception2=_interopRequireDefault(_exception);exports.default=function(e){e.registerHelper("each",function(e,t){if(!t)throw new _exception2.default("Must pass iterator to #each");var i=t.fn,r=t.inverse,a=0,o="",n=void 0,s=void 0;function u(t,r,a){n&&(n.key=t,n.index=r,n.first=0===r,n.last=!!a,s&&(n.contextPath=s+t)),o+=i(e[t],{data:n,blockParams:_utils.blockParams([e[t],t],[s+t,null])})}if(t.data&&t.ids&&(s=_utils.appendContextPath(t.data.contextPath,t.ids[0])+"."),_utils.isFunction(e)&&(e=e.call(this)),t.data&&(n=_utils.createFrame(t.data)),e&&"object"==typeof e)if(_utils.isArray(e))for(var l=e.length;a<l;a++)a in e&&u(a,a,a===e.length-1);else{var d=void 0;for(var c in e)e.hasOwnProperty(c)&&(void 0!==d&&u(d,a-1),d=c,a++);void 0!==d&&u(d,a-1,!0)}return 0===a&&(o=r(this)),o})},module.exports=exports.default;

},{"../exception":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/exception.js","../utils":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/utils.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/helpers/helper-missing.js":[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}exports.__esModule=!0;var _exception=require("../exception"),_exception2=_interopRequireDefault(_exception);exports.default=function(e){e.registerHelper("helperMissing",function(){if(1!==arguments.length)throw new _exception2.default('Missing helper: "'+arguments[arguments.length-1].name+'"')})},module.exports=exports.default;

},{"../exception":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/exception.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/helpers/if.js":[function(require,module,exports){
"use strict";exports.__esModule=!0;var _utils=require("../utils");exports.default=function(e){e.registerHelper("if",function(e,s){return _utils.isFunction(e)&&(e=e.call(this)),!s.hash.includeZero&&!e||_utils.isEmpty(e)?s.inverse(this):s.fn(this)}),e.registerHelper("unless",function(s,t){return e.helpers.if.call(this,s,{fn:t.inverse,inverse:t.fn,hash:t.hash})})},module.exports=exports.default;

},{"../utils":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/utils.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/helpers/log.js":[function(require,module,exports){
"use strict";exports.__esModule=!0,exports.default=function(e){e.registerHelper("log",function(){for(var l=[void 0],t=arguments[arguments.length-1],a=0;a<arguments.length-1;a++)l.push(arguments[a]);var o=1;null!=t.hash.level?o=t.hash.level:t.data&&null!=t.data.level&&(o=t.data.level),l[0]=o,e.log.apply(e,l)})},module.exports=exports.default;

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/helpers/lookup.js":[function(require,module,exports){
"use strict";exports.__esModule=!0,exports.default=function(e){e.registerHelper("lookup",function(e,t){return e&&e[t]})},module.exports=exports.default;

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/helpers/with.js":[function(require,module,exports){
"use strict";exports.__esModule=!0;var _utils=require("../utils");exports.default=function(t){t.registerHelper("with",function(t,e){_utils.isFunction(t)&&(t=t.call(this));var a=e.fn;if(_utils.isEmpty(t))return e.inverse(this);var s=e.data;return e.data&&e.ids&&((s=_utils.createFrame(e.data)).contextPath=_utils.appendContextPath(e.data.contextPath,e.ids[0])),a(t,{data:s,blockParams:_utils.blockParams([t],[s&&s.contextPath])})})},module.exports=exports.default;

},{"../utils":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/utils.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/logger.js":[function(require,module,exports){
"use strict";exports.__esModule=!0;var _utils=require("./utils"),logger={methodMap:["debug","info","warn","error"],level:"info",lookupLevel:function(e){if("string"==typeof e){var o=_utils.indexOf(logger.methodMap,e.toLowerCase());e=o>=0?o:parseInt(e,10)}return e},log:function(e){if(e=logger.lookupLevel(e),"undefined"!=typeof console&&logger.lookupLevel(logger.level)<=e){var o=logger.methodMap[e];console[o]||(o="log");for(var l=arguments.length,r=Array(l>1?l-1:0),t=1;t<l;t++)r[t-1]=arguments[t];console[o].apply(console,r)}}};exports.default=logger,module.exports=exports.default;

},{"./utils":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/utils.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/no-conflict.js":[function(require,module,exports){
(function (global){
"use strict";exports.__esModule=!0,exports.default=function(e){var o="undefined"!=typeof global?global:window,n=o.Handlebars;e.noConflict=function(){return o.Handlebars===e&&(o.Handlebars=n),e}},module.exports=exports.default;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/runtime.js":[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _interopRequireWildcard(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}exports.__esModule=!0,exports.checkRevision=checkRevision,exports.template=template,exports.wrapProgram=wrapProgram,exports.resolvePartial=resolvePartial,exports.invokePartial=invokePartial,exports.noop=noop;var _utils=require("./utils"),Utils=_interopRequireWildcard(_utils),_exception=require("./exception"),_exception2=_interopRequireDefault(_exception),_base=require("./base");function checkRevision(e){var t=e&&e[0]||1,r=_base.COMPILER_REVISION;if(t!==r){if(t<r){var a=_base.REVISION_CHANGES[r],n=_base.REVISION_CHANGES[t];throw new _exception2.default("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version ("+a+") or downgrade your runtime to an older version ("+n+").")}throw new _exception2.default("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version ("+e[1]+").")}}function template(e,t){if(!t)throw new _exception2.default("No environment passed to template");if(!e||!e.main)throw new _exception2.default("Unknown template object: "+typeof e);e.main.decorator=e.main_d,t.VM.checkRevision(e.compiler);var r={strict:function(e,t){if(!(t in e))throw new _exception2.default('"'+t+'" not defined in '+e);return e[t]},lookup:function(e,t){for(var r=e.length,a=0;a<r;a++)if(e[a]&&null!=e[a][t])return e[a][t]},lambda:function(e,t){return"function"==typeof e?e.call(t):e},escapeExpression:Utils.escapeExpression,invokePartial:function(r,a,n){n.hash&&(a=Utils.extend({},a,n.hash),n.ids&&(n.ids[0]=!0)),r=t.VM.resolvePartial.call(this,r,a,n);var o=t.VM.invokePartial.call(this,r,a,n);if(null==o&&t.compile&&(n.partials[n.name]=t.compile(r,e.compilerOptions,t),o=n.partials[n.name](a,n)),null!=o){if(n.indent){for(var i=o.split("\n"),l=0,s=i.length;l<s&&(i[l]||l+1!==s);l++)i[l]=n.indent+i[l];o=i.join("\n")}return o}throw new _exception2.default("The partial "+n.name+" could not be compiled when running in runtime-only mode")},fn:function(t){var r=e[t];return r.decorator=e[t+"_d"],r},programs:[],program:function(e,t,r,a,n){var o=this.programs[e],i=this.fn(e);return t||n||a||r?o=wrapProgram(this,e,i,t,r,a,n):o||(o=this.programs[e]=wrapProgram(this,e,i)),o},data:function(e,t){for(;e&&t--;)e=e._parent;return e},merge:function(e,t){var r=e||t;return e&&t&&e!==t&&(r=Utils.extend({},t,e)),r},nullContext:Object.seal({}),noop:t.VM.noop,compilerInfo:e.compiler};function a(t){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],o=n.data;a._setup(n),!n.partial&&e.useData&&(o=initData(t,o));var i=void 0,l=e.useBlockParams?[]:void 0;function s(t){return""+e.main(r,t,r.helpers,r.partials,o,l,i)}return e.useDepths&&(i=n.depths?t!=n.depths[0]?[t].concat(n.depths):n.depths:[t]),(s=executeDecorators(e.main,s,r,n.depths||[],o,l))(t,n)}return a.isTop=!0,a._setup=function(a){a.partial?(r.helpers=a.helpers,r.partials=a.partials,r.decorators=a.decorators):(r.helpers=r.merge(a.helpers,t.helpers),e.usePartial&&(r.partials=r.merge(a.partials,t.partials)),(e.usePartial||e.useDecorators)&&(r.decorators=r.merge(a.decorators,t.decorators)))},a._child=function(t,a,n,o){if(e.useBlockParams&&!n)throw new _exception2.default("must pass block params");if(e.useDepths&&!o)throw new _exception2.default("must pass parent depths");return wrapProgram(r,t,e[t],a,0,n,o)},a}function wrapProgram(e,t,r,a,n,o,i){function l(t){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],l=i;return!i||t==i[0]||t===e.nullContext&&null===i[0]||(l=[t].concat(i)),r(e,t,e.helpers,e.partials,n.data||a,o&&[n.blockParams].concat(o),l)}return(l=executeDecorators(r,l,e,i,a,o)).program=t,l.depth=i?i.length:0,l.blockParams=n||0,l}function resolvePartial(e,t,r){return e?e.call||r.name||(r.name=e,e=r.partials[e]):e="@partial-block"===r.name?r.data["partial-block"]:r.partials[r.name],e}function invokePartial(e,t,r){var a=r.data&&r.data["partial-block"];r.partial=!0,r.ids&&(r.data.contextPath=r.ids[0]||r.data.contextPath);var n=void 0;if(r.fn&&r.fn!==noop&&function(){r.data=_base.createFrame(r.data);var e=r.fn;n=r.data["partial-block"]=function(t){var r=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];return r.data=_base.createFrame(r.data),r.data["partial-block"]=a,e(t,r)},e.partials&&(r.partials=Utils.extend({},r.partials,e.partials))}(),void 0===e&&n&&(e=n),void 0===e)throw new _exception2.default("The partial "+r.name+" could not be found");if(e instanceof Function)return e(t,r)}function noop(){return""}function initData(e,t){return t&&"root"in t||((t=t?_base.createFrame(t):{}).root=e),t}function executeDecorators(e,t,r,a,n,o){if(e.decorator){var i={};t=e.decorator(t,i,r,a&&a[0],n,o,a),Utils.extend(t,i)}return t}

},{"./base":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/base.js","./exception":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/exception.js","./utils":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/utils.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/safe-string.js":[function(require,module,exports){
"use strict";function SafeString(t){this.string=t}exports.__esModule=!0,SafeString.prototype.toString=SafeString.prototype.toHTML=function(){return""+this.string},exports.default=SafeString,module.exports=exports.default;

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars/utils.js":[function(require,module,exports){
"use strict";exports.__esModule=!0,exports.extend=extend,exports.indexOf=indexOf,exports.escapeExpression=escapeExpression,exports.isEmpty=isEmpty,exports.createFrame=createFrame,exports.blockParams=blockParams,exports.appendContextPath=appendContextPath;var escape={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;","=":"&#x3D;"},badChars=/[&<>"'`=]/g,possible=/[&<>"'`=]/;function escapeChar(t){return escape[t]}function extend(t){for(var r=1;r<arguments.length;r++)for(var e in arguments[r])Object.prototype.hasOwnProperty.call(arguments[r],e)&&(t[e]=arguments[r][e]);return t}var toString=Object.prototype.toString;exports.toString=toString;var isFunction=function(t){return"function"==typeof t};isFunction(/x/)&&(exports.isFunction=isFunction=function(t){return"function"==typeof t&&"[object Function]"===toString.call(t)}),exports.isFunction=isFunction;var isArray=Array.isArray||function(t){return!(!t||"object"!=typeof t)&&"[object Array]"===toString.call(t)};function indexOf(t,r){for(var e=0,n=t.length;e<n;e++)if(t[e]===r)return e;return-1}function escapeExpression(t){if("string"!=typeof t){if(t&&t.toHTML)return t.toHTML();if(null==t)return"";if(!t)return t+"";t=""+t}return possible.test(t)?t.replace(badChars,escapeChar):t}function isEmpty(t){return!t&&0!==t||!(!isArray(t)||0!==t.length)}function createFrame(t){var r=extend({},t);return r._parent=t,r}function blockParams(t,r){return t.path=r,t}function appendContextPath(t,r){return(t?t+".":"")+r}exports.isArray=isArray;

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/runtime.js":[function(require,module,exports){
module.exports=require("./dist/cjs/handlebars.runtime").default;

},{"./dist/cjs/handlebars.runtime":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/dist/cjs/handlebars.runtime.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/process/browser.js":[function(require,module,exports){
var cachedSetTimeout,cachedClearTimeout,process=module.exports={};function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}function runTimeout(e){if(cachedSetTimeout===setTimeout)return setTimeout(e,0);if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout)return cachedSetTimeout=setTimeout,setTimeout(e,0);try{return cachedSetTimeout(e,0)}catch(t){try{return cachedSetTimeout.call(null,e,0)}catch(t){return cachedSetTimeout.call(this,e,0)}}}function runClearTimeout(e){if(cachedClearTimeout===clearTimeout)return clearTimeout(e);if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout)return cachedClearTimeout=clearTimeout,clearTimeout(e);try{return cachedClearTimeout(e)}catch(t){try{return cachedClearTimeout.call(null,e)}catch(t){return cachedClearTimeout.call(this,e)}}}!function(){try{cachedSetTimeout="function"==typeof setTimeout?setTimeout:defaultSetTimout}catch(e){cachedSetTimeout=defaultSetTimout}try{cachedClearTimeout="function"==typeof clearTimeout?clearTimeout:defaultClearTimeout}catch(e){cachedClearTimeout=defaultClearTimeout}}();var currentQueue,queue=[],draining=!1,queueIndex=-1;function cleanUpNextTick(){draining&&currentQueue&&(draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue())}function drainQueue(){if(!draining){var e=runTimeout(cleanUpNextTick);draining=!0;for(var t=queue.length;t;){for(currentQueue=queue,queue=[];++queueIndex<t;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,t=queue.length}currentQueue=null,draining=!1,runClearTimeout(e)}}function Item(e,t){this.fun=e,this.array=t}function noop(){}process.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];queue.push(new Item(e,t)),1!==queue.length||draining||runTimeout(drainQueue)},Item.prototype.run=function(){this.fun.apply(null,this.array)},process.title="browser",process.browser=!0,process.env={},process.argv=[],process.version="",process.versions={},process.on=noop,process.addListener=noop,process.once=noop,process.off=noop,process.removeListener=noop,process.removeAllListeners=noop,process.emit=noop,process.prependListener=noop,process.prependOnceListener=noop,process.listeners=function(e){return[]},process.binding=function(e){throw new Error("process.binding is not supported")},process.cwd=function(){return"/"},process.chdir=function(e){throw new Error("process.chdir is not supported")},process.umask=function(){return 0};

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/simple-swizzle/index.js":[function(require,module,exports){
"use strict";var isArrayish=require("is-arrayish"),concat=Array.prototype.concat,slice=Array.prototype.slice,swizzle=module.exports=function(r){for(var e=[],i=0,t=r.length;i<t;i++){var s=r[i];isArrayish(s)?e=concat.call(e,slice.call(s)):e.push(s)}return e};swizzle.wrap=function(r){return function(){return r(swizzle(arguments))}};

},{"is-arrayish":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/simple-swizzle/node_modules/is-arrayish/index.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/simple-swizzle/node_modules/is-arrayish/index.js":[function(require,module,exports){
module.exports=function(r){return!(!r||"string"==typeof r)&&(r instanceof Array||Array.isArray(r)||r.length>=0&&(r.splice instanceof Function||Object.getOwnPropertyDescriptor(r,r.length-1)&&"String"!==r.constructor.name))};

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/underscore.string/dasherize.js":[function(require,module,exports){
var trim=require("./trim");module.exports=function(r){return trim(r).replace(/([A-Z])/g,"-$1").replace(/[-_\s]+/g,"-").toLowerCase()};

},{"./trim":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/underscore.string/trim.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/underscore.string/helper/defaultToWhiteSpace.js":[function(require,module,exports){
var escapeRegExp=require("./escapeRegExp");module.exports=function(e){return null==e?"\\s":e.source?e.source:"["+escapeRegExp(e)+"]"};

},{"./escapeRegExp":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/underscore.string/helper/escapeRegExp.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/underscore.string/helper/escapeRegExp.js":[function(require,module,exports){
var makeString=require("./makeString");module.exports=function(e){return makeString(e).replace(/([.*+?^=!:${}()|[\]\/\\])/g,"\\$1")};

},{"./makeString":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/underscore.string/helper/makeString.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/underscore.string/helper/makeString.js":[function(require,module,exports){
module.exports=function(n){return null==n?"":""+n};

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/underscore.string/helper/strRepeat.js":[function(require,module,exports){
module.exports=function(r,e){if(e<1)return"";for(var n="";e>0;)1&e&&(n+=r),e>>=1,r+=r;return n};

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/underscore.string/lpad.js":[function(require,module,exports){
var pad=require("./pad");module.exports=function(r,e,a){return pad(r,e,a)};

},{"./pad":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/underscore.string/pad.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/underscore.string/pad.js":[function(require,module,exports){
var makeString=require("./helper/makeString"),strRepeat=require("./helper/strRepeat");module.exports=function(e,t,r,a){e=makeString(e),t=~~t;var h=0;switch(r?r.length>1&&(r=r.charAt(0)):r=" ",a){case"right":return h=t-e.length,e+strRepeat(r,h);case"both":return h=t-e.length,strRepeat(r,Math.ceil(h/2))+e+strRepeat(r,Math.floor(h/2));default:return h=t-e.length,strRepeat(r,h)+e}};

},{"./helper/makeString":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/underscore.string/helper/makeString.js","./helper/strRepeat":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/underscore.string/helper/strRepeat.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/underscore.string/trim.js":[function(require,module,exports){
var makeString=require("./helper/makeString"),defaultToWhiteSpace=require("./helper/defaultToWhiteSpace"),nativeTrim=String.prototype.trim;module.exports=function(e,r){return e=makeString(e),!r&&nativeTrim?nativeTrim.call(e):(r=defaultToWhiteSpace(r),e.replace(new RegExp("^"+r+"+|"+r+"+$","g"),""))};

},{"./helper/defaultToWhiteSpace":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/underscore.string/helper/defaultToWhiteSpace.js","./helper/makeString":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/underscore.string/helper/makeString.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/App.js":[function(require,module,exports){
(function (GIT_REV,_){
"use strict";"Portfolio App started GIT:".concat(GIT_REV),require("setimmediate"),require("es6-promise/auto"),require("classlist-polyfill"),require("raf-polyfill"),require("matches-polyfill"),require("fullscreen-polyfill"),require("math-sign-polyfill"),require("mutation-observer"),require("backbone").$=require("backbone.native"),require("backbone.babysitter"),require("Backbone.Mutators"),require("hammerjs"),window.addEventListener("load",function(e){e.target,e.type;try{require("app/model/helper/bootstrap")(window.bootstrap)}catch(e){var r=document.querySelector(".app");throw r.classList.remove("app-initial"),r.classList.add("app-error"),new Error("bootstrap data error ("+e.message+")",e.fileName,e.lineNumber)}finally{delete window.bootstrap}require("app/view/template/_helpers"),require("app/view/helper/createColorStyleSheet").call();var t=require("app/view/AppView"),i=require("webfontloader"),a={async:!1,groupName:"",classes:!1,loading:function(){this.groupName},active:function(){this.groupName},inactive:function(){console.warn("WebFont:%s:inactive",this.groupName)},fontactive:function(e,r){this.groupName},fontinactive:function(e,r){console.warn("WebFont:%s:fontinactive '%s' (%s)",this.groupName,e,r)}};i.load(_.defaults({async:!1,groupName:"required",custom:{families:["FranklinGothicFS:n4,n6","FolioFigures:n4"],testStrings:{FolioFigures:"hms"}},active:function(){return t.getInstance()},inactive:function(){return t.getInstance()}},a)),i.load(_.defaults({},a))});

}).call(this,'65e3bc7',require("underscore"))

},{"Backbone.Mutators":"Backbone.Mutators","app/model/helper/bootstrap":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/helper/bootstrap.js","app/view/AppView":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/AppView.js","app/view/helper/createColorStyleSheet":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/helper/createColorStyleSheet.js","app/view/template/_helpers":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/template/_helpers.js","backbone":"backbone","backbone.babysitter":"backbone.babysitter","backbone.native":"backbone.native","classlist-polyfill":"classlist-polyfill","es6-promise/auto":"es6-promise/auto","fullscreen-polyfill":"fullscreen-polyfill","hammerjs":"hammerjs","matches-polyfill":"matches-polyfill","math-sign-polyfill":"math-sign-polyfill","mutation-observer":"mutation-observer","raf-polyfill":"raf-polyfill","setimmediate":"setimmediate","underscore":"underscore","webfontloader":"webfontloader"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/control/Controller.js":[function(require,module,exports){
(function (_){
"use strict";var Backbone=require("backbone"),articles=require("app/model/collection/ArticleCollection"),bundles=require("app/model/collection/BundleCollection"),Controller=Backbone.Router.extend({initialize:function(e){this.route(/(.*)/,"notfound",this.toNotFound),this.route(/^([a-z][a-z0-9\-]*)\/?$/,"article-item",this.toArticleItem),this.route(/^(?:bundles)?\/?$/,"root",this.toRoot),this.route(/^bundles\/([^\/]+)(?:\/(\d+)?)?\/?$/,"media-item",this.toMediaItem)},selectMedia:function(e){this._goToLocation(e.get("bundle"),e)},selectBundle:function(e){e.attr("@no-desc")?this._goToLocation(e,e.get("media").at(0),{replace:!0,trigger:!0}):this._goToLocation(e)},deselectMedia:function(){this._goToLocation(bundles.selected)},deselectBundle:function(){this._goToLocation()},selectArticle:function(e){this.navigate(e.get("handle"),{trigger:!0})},deselectArticle:function(){this.navigate("",{trigger:!0})},_getLocation:function(e,t){var i,n=[];return e&&(n.push("bundles"),n.push(e.get("handle")),t&&(i=e.get("media").indexOf(t))>=0&&n.push(i)),n.join("/")},_goToLocation:function(e,t,i){this.navigate(this._getLocation(e,t),_.defaults(i||{},{trigger:!0}))},toRoot:function(){this.trigger("change:before"),bundles.selected&&bundles.deselect(),articles.deselect(),this.trigger("change:after")},toNotFound:function(e){},toBundleItem:function(e){var t=bundles.findWhere({handle:e});if(!t)throw new Error("No bundle found with handle '".concat(e,"'"));this._changeSelection(t)},toMediaItem:function(e,t){var i=bundles.findWhere({handle:e});if(!i)throw new Error("No bundle found with handle '".concat(e,"'"));var n=i.get("media").at(t||0);if(!n)throw new Error("No media found at index ".concat(t," in bundle '").concat(e,"'"));this._changeSelection(i,n)},toArticleItem:function(e){var t=articles.findWhere({handle:e});if(!t)throw new Error("No article found with handle '".concat(e,"'"));this.trigger("change:before",t),bundles.deselect(),articles.select(t),this.trigger("change:after",t)},_changeSelection:function(e,t){var i,n;void 0===e&&(e=null),void 0===t&&(t=null),n=(i=bundles.selected)?i.get("media").selected:null,i&&i.cid,e&&e.cid,n&&n.cid,t&&t.cid,(articles.selected||i!==e||n!==t)&&(this.trigger("change:before",e,t),e&&e.get("media").select(t),bundles.select(e),articles.deselect(),this.trigger("change:after",e,t))}});module.exports=new Controller;

}).call(this,require("underscore"))

},{"app/model/collection/ArticleCollection":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/collection/ArticleCollection.js","app/model/collection/BundleCollection":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/collection/BundleCollection.js","backbone":"backbone","underscore":"underscore"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/control/Globals.js":[function(require,module,exports){
(function (_){
"use strict";module.exports=function(){var e,a,t,s={},r=require("../../../sass/variables.json");for(a in s.VPAN_DRAG=.95,s.HPAN_OUT_DRAG=.4,s.VPAN_OUT_DRAG=.1,s.PAN_THRESHOLD=15,s.COLLAPSE_THRESHOLD=75,s.COLLAPSE_OFFSET=parseInt(r.temp.collapse_offset),s.VIDEO_CROP_PX=parseInt(r.video_crop_px),s.BREAKPOINTS={},r.breakpoints)e=r.breakpoints[a],e=(e=Array.isArray(e)?e.join(", "):e).replace(/[\'\"]/g,""),(e=window.matchMedia(e)).className=a,s.BREAKPOINTS[a]=e;s.DEFAULT_COLORS=_.clone(r.default_colors),s.APP_ROOT=window.approot,s.MEDIA_DIR=window.mediadir,delete window.approot,delete window.mediadir,s.FONT_METRICS={FranklinGothicFS:{unitsPerEm:1e3,ascent:827,descent:-173},ITCFranklinGothicStd:{unitsPerEm:1e3,ascent:686,descent:-314},FolioFigures:{unitsPerEm:1024,ascent:939,descent:-256}},s.PAUSE_CHAR=String.fromCharCode(9208),s.PLAY_CHAR=String.fromCharCode(9205),s.STOP_CHAR=String.fromCharCode(9209),"3d"==r.transform_type?s.TRANSLATE_TEMPLATE=function(e,a){return"translate3d("+e+"px, "+a+"px, 0px)"}:s.TRANSLATE_TEMPLATE=function(e,a){return"translate("+e+"px, "+a+"px)"},s.TRANSLATE_TEMPLATE=function(e,a){return"translate("+e+"px, "+a+"px)"};var n=s.TRANSITION_EASE=r.transitions.ease,i=s.TRANSITION_DURATION=parseFloat(r.transitions.duration_ms),o=s.TRANSITION_DELAY_INTERVAL=parseFloat(r.transitions.delay_interval_ms),T=s.TRANSITION_MIN_DELAY=parseFloat(r.transitions.min_delay_ms),d=s.TRANSITION_DELAY=s.TRANSITION_DURATION+s.TRANSITION_DELAY_INTERVAL;(e={}).tx=function(e,a,t){_.isNumber(e)||(e=1),_.isNumber(a)||(a=-1),_.isString(t)||(t=n);var s={};return a<0?(s.duration=i*e+o*(e-1),s.delay=0):(s.duration=i*e+o*(e-1)-T,s.delay=d*a-T),s.easeing=t,0},e.NONE={delay:0,duration:0,easing:"step-start"},e.NOW={delay:0,duration:i,easing:n},e.UNSET=_.defaults({cssText:""},e.NONE);var A=_.defaults({duration:i-T},e.NOW);for(a in e.FIRST=_.defaults({delay:0*d+T},A),e.BETWEEN=_.defaults({delay:1*d+T},A),e.LAST=_.defaults({delay:2*d+T},A),e.AFTER=_.defaults({delay:2*d+T},A),e.BETWEEN_EARLY=_.defaults({delay:1*d+T-60},A),e.BETWEEN_LATE=_.defaults({delay:1*d+T+60},A),e.FIRST_LATE=_.defaults({delay:.5*d+T},A),e.LAST_EARLY=_.defaults({delay:1.5*d+T},A),e)_.isFunction(e[a])||((t=e[a]).name=a,t.className="tx-"+a.replace("_","-").toLowerCase(),t.hasOwnProperty("cssText")||(t.cssText=t.duration/1e3+"s "+t.easing+" "+t.delay/1e3+"s"),t.name,t.cssText);return s.transitions=e,s}();

}).call(this,require("underscore"))

},{"../../../sass/variables.json":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/sass/variables.json","underscore":"underscore"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/AppState.js":[function(require,module,exports){
"use strict";var BaseModel=require("backbone").Model;module.exports=BaseModel.extend({defaults:{routeName:"initial",fromRouteName:"",page:"",article:null,bundle:null,media:null,withArticle:!1,withBundle:!1,withMedia:!1,collapsed:!1},getters:["page","routeName","fromRouteName","article","bundle","media","withArticle","withBundle","withMedia","collapsed"],initialize:function(){var e={silent:!1};this.listenTo(this,"change",function(i){this.hasChanged("routeName")&&this.set("fromRouteName",this.previous("routeName"),e),this.hasChanged("article")&&this.set("withArticle",this.has("article"),e),this.hasChanged("bundle")&&this.set("withBundle",this.has("bundle"),e),this.hasChanged("media")&&this.set("withMedia",this.has("media"),e)}),this.listenTo(this,"change:routeName",function(e){this.cid}),this.listenTo(this,"change:article",function(e){this.cid}),this.listenTo(this,"change:bundle",function(e){this.cid}),this.listenTo(this,"change:media",function(e){this.cid})},hasAnyPrevious:function(e){return null!=this.previous(e)},hasAnyChanged:function(e){return this.hasChanged(e)&&this.has(e)!=this.hasAnyPrevious(e)}});

},{"backbone":"backbone"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/BaseItem.js":[function(require,module,exports){
(function (_){
"use strict";var BaseModel=require("app/model/BaseModel"),parseSymAttrs=function(t){return t.replace(/(\,|\;)/g,function(t){return","==t?";":","})},toAttrsHash=function(t,e){if(_.isString(e)){var r=e.indexOf(":");r>0?t[e.substring(0,r)]=parseSymAttrs(e.substring(r+1)):t[e]=e}return t};module.exports=BaseModel.extend({_domPrefix:"_",defaults:{get attrs(){return{}}},getters:["domid"],mutators:{domid:function(){return this.hasOwnProperty("_domId")||(this._domId=this._domPrefix+this.id),this._domId},attrs:{set:function(t,e,r,i){Array.isArray(e)&&(e=e.reduce(toAttrsHash,{})),_.isObject(e)||(console.error("%s::attrs value not an object or string array",this.cid,e),e={}),i(t,e,r)}}},attr:function(t){return this.attrs()[t]},attrs:function(){return this.get("attrs")},toString:function(){return this.get("domid")},getDistanceToSelected:function(){return this.collection&&this.collection.selectedIndex>0?this.collection.indexOf(this)-this.collection.selectedIndex:-1},getIndex:function(){return this.collection?this.collection.indexOf(this):-1}});

}).call(this,require("underscore"))

},{"app/model/BaseModel":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/BaseModel.js","underscore":"underscore"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/BaseModel.js":[function(require,module,exports){
(function (_){
"use strict";var Backbone=require("backbone"),BaseModelProto={},BaseModel={extend:function(e,t){var o,r;for(r in e)e.hasOwnProperty(r)&&_.isObject(e[r])&&(e[r]=_.defaults(e[r],this.prototype[r]));return o=Backbone.Model.extend.apply(this,arguments),Array.isArray(o.prototype.getters)&&o.prototype.getters.forEach(function(e){Object.defineProperty(o.prototype,e,{enumerable:!0,get:function(){return this.get(e)}})}),o}};module.exports=Backbone.Model.extend.call(Backbone.Model,BaseModelProto,BaseModel);

}).call(this,require("underscore"))

},{"backbone":"backbone","underscore":"underscore"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/SelectableCollection.js":[function(require,module,exports){
(function (_){
"use strict";var Backbone=require("backbone"),SelectableCollection=Backbone.Collection.extend({initialize:function(e,t){t=_.defaults({},t,{initialSelection:"none",silentInitial:!0}),this.initialSelection=t.initialSelection,this.initialOptions={silent:t.silentInitial}},reset:function(e,t){this.deselect(this.initialOptions),Backbone.Collection.prototype.reset.apply(this,arguments),"first"===this.initialSelection&&this.length&&this.select(this.at(0),this.initialOptions)},select:function(e,t){if(void 0===e&&(e=null),this.selected!==e){var i=!(t&&t.silent),n=this.selected;this.lastSelected=this.selected,this.lastSelectedIndex=this.selectedIndex,this.selected=e,this.selectedIndex=this.indexOf(e),n?(_.isFunction(n.deselect)?n.deselect(t):i&&(n.selected=void 0,n.trigger("deselected",e,n)),i&&this.trigger("deselect:one",n)):i&&this.trigger("deselect:none",null),e?(_.isFunction(e.select)?e.select(t):i&&(e.selected=!0,e.trigger("selected",e,n)),i&&this.trigger("select:one",e)):i&&this.trigger("select:none",null)}},deselect:function(e){this.select(null,e)},selectAt:function(e,t){(0>e||e>=this.length)&&new RangeError("index is out of bounds"),this.select(this.at(e),t)},distance:function(e,t){var i,n;if(!e)return NaN;if(-1==(i=this.indexOf(e)))return NaN;if(1==arguments.length)n=this.selectedIndex;else{if(!t)return NaN;if(-1==(n=this.indexOf(t)))return NaN}return Math.abs(n-i)},hasFollowing:function(e){return e||(e=this.selected),this.indexOf(e)<this.length-1},following:function(e){return e||(e=this.selected),this.hasFollowing(e)?this.at(this.indexOf(e)+1):null},followingOrFirst:function(e){return e||(e=this.selected),this.at((this.indexOf(e)+1)%this.length)},hasPreceding:function(e){return e||(e=this.selected),this.indexOf(e)>0},preceding:function(e){return e||(e=this.selected),this.hasPreceding(e)?this.at(this.indexOf(e)-1):null},precedingOrLast:function(e){e||(e=this.selected);var t=this.indexOf(e)-1;return this.at(t>-1?t:this.length-1)}});module.exports=SelectableCollection;

}).call(this,require("underscore"))

},{"backbone":"backbone","underscore":"underscore"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/collection/ArticleCollection.js":[function(require,module,exports){
"use strict";var SelectableCollection=require("app/model/SelectableCollection"),ArticleItem=require("app/model/item/ArticleItem"),ArticleCollection=SelectableCollection.extend({model:ArticleItem});module.exports=new ArticleCollection;

},{"app/model/SelectableCollection":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/SelectableCollection.js","app/model/item/ArticleItem":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/item/ArticleItem.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/collection/BundleCollection.js":[function(require,module,exports){
"use strict";var SelectableCollection=require("app/model/SelectableCollection"),BundleItem=require("app/model/item/BundleItem"),BundleCollection=SelectableCollection.extend({model:BundleItem,comparator:function(e,l){var t=e.get("completed"),o=l.get("completed");return t>o?-1:t<o?1:0},url:"/json/bundles/"});module.exports=new BundleCollection;

},{"app/model/SelectableCollection":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/SelectableCollection.js","app/model/item/BundleItem":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/item/BundleItem.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/collection/KeywordCollection.js":[function(require,module,exports){
"use strict";var SelectableCollection=require("app/model/SelectableCollection"),KeywordItem=require("app/model/item/KeywordItem"),KeywordCollection=SelectableCollection.extend({model:KeywordItem});module.exports=new KeywordCollection;

},{"app/model/SelectableCollection":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/SelectableCollection.js","app/model/item/KeywordItem":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/item/KeywordItem.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/collection/TypeCollection.js":[function(require,module,exports){
"use strict";var Backbone=require("backbone"),TypeItem=require("app/model/item/TypeItem"),TypeCollection=Backbone.Collection.extend({model:TypeItem});module.exports=new TypeCollection;

},{"app/model/item/TypeItem":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/item/TypeItem.js","backbone":"backbone"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/helper/bootstrap.js":[function(require,module,exports){
(function (_){
"use strict";module.exports=function(e){require("app/control/Globals").APP_NAME=e.params["website-name"];var l=require("app/model/collection/TypeCollection"),o=require("app/model/collection/KeywordCollection"),t=require("app/model/collection/BundleCollection"),i=require("app/model/collection/ArticleCollection"),r=e["articles-all"],d=e["types-all"],s=e["keywords-all"],c=e["bundles-all"],a=e["media-all"],n=_.groupBy(a,"bId");c.forEach(function(e,l,o){e.tIds=[],e.media=n[e.id],s.forEach(function(o,t,i){0===l&&(o.bIds=[]),-1!=e.kIds.indexOf(o.id)&&(o.bIds.push(e.id),-1==e.tIds.indexOf(o.tId)&&e.tIds.push(o.tId))})}),i.reset(r),l.reset(d),o.reset(s),t.reset(c)};

}).call(this,require("underscore"))

},{"app/control/Globals":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/control/Globals.js","app/model/collection/ArticleCollection":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/collection/ArticleCollection.js","app/model/collection/BundleCollection":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/collection/BundleCollection.js","app/model/collection/KeywordCollection":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/collection/KeywordCollection.js","app/model/collection/TypeCollection":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/collection/TypeCollection.js","underscore":"underscore"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/item/ArticleItem.js":[function(require,module,exports){
"use strict";var BaseItem=require("app/model/BaseItem");module.exports=BaseItem.extend({_domPrefix:"a",defaults:{name:"",handle:"",text:""}});

},{"app/model/BaseItem":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/BaseItem.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/item/BundleItem.js":[function(require,module,exports){
(function (_){
"use strict";var Color=require("color"),BaseItem=require("app/model/BaseItem"),MediaItem=require("app/model/item/MediaItem"),SelectableCollection=require("app/model/SelectableCollection"),Globals=require("app/control/Globals"),stripTags=require("utils/strings/stripTags"),attrsDefault=_.defaults({"has-colors":"defaults"},Globals.DEFAULT_COLORS),MediaCollection=SelectableCollection.extend({model:MediaItem,comparator:"o"});module.exports=BaseItem.extend({_domPrefix:"b",defaults:{name:"",handle:"",desc:"",completed:0,get kIds(){return[]}},getters:["name","media"],mutators:{text:function(){return stripTags(this.get("desc"))},media:{transient:!0,set:function(t,e,o,r){Array.isArray(e)&&(e.forEach(function(t){t.bundle=this},this),e=new MediaCollection(e)),r(t,e,o)}}},initialize:function(t,e){this.colors={fgColor:new Color(this.attr("color")),bgColor:new Color(this.attr("background-color")),lnColor:new Color(this.attr("link-color"))},this.colors.hasDarkBg=this.colors.fgColor.luminosity()>this.colors.bgColor.luminosity()},attrs:function(){return this._attrs||(this._attrs=_.defaults({},this.get("attrs"),attrsDefault))}});

}).call(this,require("underscore"))

},{"app/control/Globals":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/control/Globals.js","app/model/BaseItem":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/BaseItem.js","app/model/SelectableCollection":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/SelectableCollection.js","app/model/item/MediaItem":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/item/MediaItem.js","color":"color","underscore":"underscore","utils/strings/stripTags":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/strings/stripTags.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/item/KeywordItem.js":[function(require,module,exports){
"use strict";var BaseItem=require("app/model/BaseItem");module.exports=BaseItem.extend({_domPrefix:"k",defaults:{name:"",handle:"",tId:-1}});

},{"app/model/BaseItem":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/BaseItem.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/item/MediaItem.js":[function(require,module,exports){
(function (_){
"use strict";var Color=require("color"),BaseItem=require("app/model/BaseItem"),SourceItem=require("app/model/item/SourceItem"),SelectableCollection=require("app/model/SelectableCollection"),Globals=require("app/control/Globals"),stripTags=require("utils/strings/stripTags"),urlTemplates={original:_.template(Globals.MEDIA_DIR+"/<%= src %>"),"constrain-width":_.template(Globals.APP_ROOT+"image/1/<%= width %>/0/uploads/<%= src %>"),"constrain-height":_.template(Globals.APP_ROOT+"image/1/0/<%= height %>/uploads/<%= src %>"),"debug-bandwidth":_.template(Globals.MEDIA_DIR.replace(/(https?\:\/\/[^\/]+)/,"$1/slow/<%= kbps %>")+"/<%= src %>")},SourceCollection=SelectableCollection.extend({model:SourceItem});module.exports=BaseItem.extend({_domPrefix:"m",defaults:{name:"<p><em>Untitled</em></p>",sub:"",o:0,bId:-1,srcIdx:0,get srcset(){return[]},get sources(){return new SourceCollection}},getters:["name","bundle","source","sources"],mutators:{handle:function(){return this.get("src")},text:function(){return this.hasOwnProperty("_text")||(this._text=_.unescape(stripTags(this.get("name")))),this._text},attrs:{set:function(t,e,s,r){this._attrs=null,BaseItem.prototype.mutators.attrs.set.apply(this,arguments),this._updateSources()}},srcset:{set:function(t,e,s,r){r(t,e,s),this.get("sources").reset(e,s),this._updateSources()}},source:{transient:!0,get:function(){return this.get("sources").at(this.get("srcIdx"))}}},initialize:function(){this._updateColors(),this.listenTo(this,"change:attrs change:bundle",function(){this._attrs=null})},attrs:function(){return this._attrs||(this._attrs=_.defaults({},this.get("bundle").attrs(),this.get("attrs")))},_updateColors:function(){this.colors={fgColor:new Color(this.attr("color")),bgColor:new Color(this.attr("background-color"))},this.colors.hasDarkBg=this.colors.fgColor.luminosity()>this.colors.bgColor.luminosity()},_updateSources:function(){var t={kbps:this.attr("@debug-bandwidth")},e=urlTemplates[t.kbps?"debug-bandwidth":"original"];this.get("sources").forEach(function(s){t.src=s.get("src"),s.set("original",e(t))})}});

}).call(this,require("underscore"))

},{"app/control/Globals":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/control/Globals.js","app/model/BaseItem":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/BaseItem.js","app/model/SelectableCollection":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/SelectableCollection.js","app/model/item/SourceItem":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/item/SourceItem.js","color":"color","underscore":"underscore","utils/strings/stripTags":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/strings/stripTags.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/item/SourceItem.js":[function(require,module,exports){
"use strict";var BaseItem=require("app/model/BaseItem"),noCacheSuffix="?"+Date.now();module.exports=BaseItem.extend({defaults:{src:null,mime:null,w:null,h:null},getters:["src","original"],mutators:{src:{set:function(e,t,s,l){l(e,t,s)}}}});

},{"app/model/BaseItem":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/BaseItem.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/item/TypeItem.js":[function(require,module,exports){
"use strict";var BaseItem=require("app/model/BaseItem");module.exports=BaseItem.extend({_domPrefix:"t",defaults:{name:"",handle:""}});

},{"app/model/BaseItem":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/BaseItem.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/AppView.js":[function(require,module,exports){
(function (GTAG_ENABLED,_){
"use strict";var Backbone=require("backbone"),stripTags=require("utils/strings/stripTags"),Globals=require("app/control/Globals"),controller=require("app/control/Controller"),AppState=require("app/model/AppState"),bundles=require("app/model/collection/BundleCollection"),articles=require("app/model/collection/ArticleCollection"),View=require("app/view/base/View"),NavigationView=require("app/view/NavigationView"),ContentView=require("app/view/ContentView"),TouchManager=require("app/view/base/TouchManager");module.exports=View.extend({cidPrefix:"app",el:"html",className:"app",model:AppState,events:{visibilitychange:function(e){this.cid,e.type},fullscreenchange:function(e){this.cid,e.type,document.fullscreenElement,document.fullscreen},dragstart:function(e){"IMG"!=e.target.nodeName&&"A"!=e.target.nodeName||e.defaultPrevented||e.preventDefault()}},properties:{container:{get:function(){return this._container||(this._container=document.getElementById("container"))}},navigation:{get:function(){return this._navigation||(this._navigation=document.getElementById("navigation"))}},content:{get:function(){return this._content||(this._content=document.getElementById("content"))}}},initialize:function(e){var t,i,n,o=this;this.breakpointEl=this.el,n=this.content,t=i=TouchManager.init(n),this._onResize=this._onResize.bind(this),window.addEventListener("resize",this._onResize,!1),this.listenTo(controller,"route",this._onRoute),this.listenTo(this.model,"change",this._onModelChange),this.navigationView=new NavigationView({el:this.navigation,model:this.model,vpan:t,hpan:i}),this.contentView=new ContentView({el:this.content,model:this.model,vpan:t,hpan:i});var s={capture:!1,passive:!1},a=function(e){!e.defaultPrevented&&o.el.scrollHeight-1<=o.el.clientHeight&&e.preventDefault()},l=function e(t){o.el.removeEventListener("touchmove",a,s),o.el.removeEventListener("touchend",e,s),o.el.removeEventListener("touchcancel",e,s)};this.el.addEventListener("touchstart",function(e){o.el.addEventListener("touchmove",a,s),o.el.addEventListener("touchend",l,s),o.el.addEventListener("touchcancel",l,s)},{passive:!0});this.listenTo(this.navigationView,"view:collapsed:measured",function(e){o.setImmediate(function(){o.requestAnimationFrame(function(){o.el.scrollHeight-1<=o.el.clientHeight?o.el.style.overflowY="hidden":o.el.style.overflowY="",o.el.scrollTop=1})})}),GTAG_ENABLED,window.GTAG_ID,window.ga,this.listenToOnce(controller,"route",this._appStart),Backbone.history.start({pushState:!1,hashChange:!0})},_appStart:function(e,t){this.cid,t.join(),this.skipTransitions=!0,this.el.classList.add("skip-transitions"),window.ga&&window.GTAG_ID&&window.ga("create",window.GTAG_ID,"auto"),this.requestRender(View.MODEL_INVALID|View.SIZE_INVALID).requestChildrenRender(View.MODEL_INVALID|View.SIZE_INVALID).listenToOnce(this,"view:render:after",function(e,t){this.requestAnimationFrame(function(){this.cid,this.skipTransitions=!1,this.el.classList.remove("skip-transitions"),this.el.classList.remove("app-initial")})})},_onRoute:function(e,t){this.cid,this.model.get("routeName");var i={routeName:e,bundle:null,media:null,article:null,page:Backbone.history.getFragment().replace(/^(?!\/)/,"/")};switch(e){case"media-item":i.bundle=bundles.selected,i.media=i.bundle.media.selected,i.collapsed=!0;break;case"bundle-item":i.bundle=bundles.selected,i.collapsed=!0;break;case"article-item":i.article=articles.selected,i.collapsed=!0;break;case"bundle-list":case"notfound":case"root":default:i.collapsed=!1}this.model.set(i)},_onModelChange:function(){this.requestRender(View.MODEL_INVALID)},_onResize:function(e){this.cid,this.skipTransitions=!0,this.el.classList.add("skip-transitions"),this.requestRender(View.SIZE_INVALID).once("view:render:after",function(e,t){this.requestAnimationFrame(function(){e.cid,e.skipTransitions=!1,e.el.classList.remove("skip-transitions"),this.el.scrollTop=1})}),null===document.fullscreenElement&&this.renderNow()},renderFrame:function(e,t){this.cid,View.flagsToString(t),t&View.MODEL_INVALID&&this.renderModelChange(t),t&View.SIZE_INVALID&&_.each(Globals.BREAKPOINTS,function(e,t){this.toggle(t,e.matches)},this.breakpointEl.classList),this.requestChildrenRender(t,!0)},renderModelChange:function(){var e=this.el.classList,t=null,i=!1,n=[];n.push(Globals.APP_NAME),this.model.get("bundle")?(n.push(stripTags(this.model.get("bundle").get("name"))),this.model.get("media")&&n.push(stripTags(this.model.get("media").get("name")))):this.model.get("article")&&n.push(stripTags(this.model.get("article").get("name"))),n=_.unescape(n.join(" / ")),document.title=n,window.ga&&window.GTAG_ID&&window.ga("send",{hitType:"pageview",page:this.model.get("page"),title:n}),this.model.hasChanged("routeName")&&((t=this.model.previous("fromRouteName"))&&e.remove("from-route-"+t),e.add("from-route-"+this.model.get("fromRouteName")),(t=this.model.previous("routeName"))&&e.remove("route-"+t),e.add("route-"+this.model.get("routeName"))),["article","bundle","media"].forEach(function(n){var o=this.model.get(n);this.model.hasChanged(n)&&((t=this.model.previous(n))&&e.remove(t.get("domid")),o&&e.add(o.get("domid"))),e.toggle("with-"+n,!!o),e.toggle("without-"+n,!o),i|=o&&o.colors&&o.colors.hasDarkBg}.bind(this)),e.toggle("color-dark",i)}},{getInstance:function(){return window.app instanceof this||(window.app=new this({model:new AppState})),window.app}});

}).call(this,true,require("underscore"))

},{"app/control/Controller":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/control/Controller.js","app/control/Globals":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/control/Globals.js","app/model/AppState":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/AppState.js","app/model/collection/ArticleCollection":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/collection/ArticleCollection.js","app/model/collection/BundleCollection":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/collection/BundleCollection.js","app/view/ContentView":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/ContentView.js","app/view/NavigationView":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/NavigationView.js","app/view/base/TouchManager":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/base/TouchManager.js","app/view/base/View":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/base/View.js","backbone":"backbone","underscore":"underscore","utils/strings/stripTags":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/strings/stripTags.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/ContentView.js":[function(require,module,exports){
(function (_){
"use strict";var Globals=require("app/control/Globals"),TransformHelper=require("utils/TransformHelper"),controller=require("app/control/Controller"),bundles=require("app/model/collection/BundleCollection"),articles=require("app/model/collection/ArticleCollection"),View=require("app/view/base/View"),ArticleView=require("app/view/component/ArticleView"),CollectionStack=require("app/view/component/CollectionStack"),SelectableListView=require("app/view/component/SelectableListView"),DotNavigationRenderer=require("app/view/render/DotNavigationRenderer"),Carousel=require("app/view/component/Carousel"),CarouselRenderer=require("app/view/render/CarouselRenderer"),ImageRenderer=require("app/view/render/ImageRenderer"),VideoRenderer=require("app/view/render/VideoRenderer"),SequenceRenderer=require("app/view/render/SequenceRenderer"),carouselEmptyTemplate=require("./template/Carousel.EmptyRenderer.Bundle.hbs"),mediaStackTemplate=require("./template/CollectionStack.Media.hbs"),transformProp=View.prefixedProperty("transform"),transitionProp=View.prefixedProperty("transition"),tx=Globals.transitions;module.exports=View.extend({cidPrefix:"contentView",className:"container-expanded",events:{"transitionend .adding-child":"_onAddedTransitionEnd","transitionend .removing-child":"_onRemovedTransitionEnd"},initialize:function(e){_.bindAll(this,"_onVPanStart","_onVPanMove","_onVPanFinal","_onCollapsedEvent"),this.transforms=new TransformHelper,this.vpan=e.vpan||new Error("no vpan"),this.hpan=e.hpan||new Error("no hpan"),this.listenTo(this.model,"change",this._onModelChange),this.skipTransitions=!0,this.itemViews=[]},renderFrame:function(e,t){var i=this.model.get("collapsed"),n=t&View.MODEL_INVALID&&this.model.hasChanged("collapsed"),s=t&View.MODEL_INVALID&&(this.model.hasChanged("bundle")||this.model.hasChanged("article")),r=!!(t&View.SIZE_INVALID),a=!!(t&(View.MODEL_INVALID|View.SIZE_INVALID|View.LAYOUT_INVALID));if(a=a||this._transformsChanged||this.skipTransitions,s&&(this.removeChildren(),bundles.selected?this.createChildren(bundles.selected):articles.selected&&this.createChildren(articles.selected)),n&&(this.el.classList.toggle("container-collapsed",i),this.el.classList.toggle("container-expanded",!i)),r&&this.transforms.clearAllCaptures(),a){var o;if(this.el.classList.remove("container-changing"),this.skipTransitions)this.transforms.stopAllTransitions(),this.el.classList.remove("container-changed"),s||n&&this._setChildrenEnabled(i);else if(!s)if(n)this.el.classList.add("container-changed"),i?(o=function(){this._setChildrenEnabled(!0),this.el.classList.remove("container-changed")},this.transforms.runAllTransitions(tx.LAST)):(o=function(){this.el.classList.remove("container-changed")},this._setChildrenEnabled(!1),this.transforms.runAllTransitions(tx.FIRST)),o=o.bind(this),this.transforms.whenAllTransitionsEnd().then(o,o);else this.transforms.items.forEach(function(e){e.hasOffset&&e.runTransition(tx.NOW)});s||this.transforms.clearAllOffsets(),this.transforms.validate()}r&&this.itemViews.forEach(function(e){e.skipTransitions=this.skipTransitions,e.requestRender(View.SIZE_INVALID).renderNow()},this),this.skipTransitions=this._transformsChanged=!1},_setChildrenEnabled:function(e){this.itemViews.forEach(function(t){t.setEnabled(e)})},_onCollapsedEvent:function(e){this.cid,e.type,e.target,e.defaultPrevented||!this.model.has("bundle")||this.model.get("collapsed")||this.enabled||(e.preventDefault(),this.setImmediate(function(){this.model.set("collapsed",!0)}))},_onModelChange:function(){this.model.hasAnyChanged("bundle")&&(this.model.has("bundle")?this.vpan.on("vpanstart",this._onVPanStart):this.vpan.off("vpanstart",this._onVPanStart)),this.requestRender(View.MODEL_INVALID)},_collapsedOffsetY:Globals.COLLAPSE_OFFSET,_onVPanStart:function(e){this.vpan.on("vpanmove",this._onVPanMove),this.vpan.on("vpanend vpancancel",this._onVPanFinal),this.transforms.stopAllTransitions(),this.transforms.clearAllCaptures(),this.el.classList.add("container-changing"),this._onVPanMove(e)},_onVPanMove:function(e){var t=this.model.get("collapsed"),i=e.deltaY,n=this._collapsedOffsetY,s=t?i>0:i<0,r=t?Globals.VPAN_DRAG:1-Globals.VPAN_DRAG;i=Math.abs(i),i*=r,n*=r,s?i>n&&(i=(i-n)*Globals.VPAN_OUT_DRAG+n):i=-i*Globals.VPAN_OUT_DRAG,i*=t?1:-1,this.transforms.offsetAll(0,i),this.transforms.validate()},_onVPanFinal:function(e){this.vpan.off("vpanmove",this._onVPanMove),this.vpan.off("vpanend vpancancel",this._onVPanFinal),this._onVPanMove(e),this.setImmediate(function(){this._transformsChanged=!0,this.requestRender()})},createChildren:function(e){var t;e.__proto__.constructor===bundles.model?(t=this.createMediaCaptionStack(e),this.itemViews.push(t),this.transforms.add(t.el),t=this.createMediaCarousel(e),this.itemViews.push(t),this.transforms.add(t.el),t=this.createMediaDotNavigation(e),this.itemViews.push(t)):e.__proto__.constructor===articles.model&&(t=this.createArticleView(e),this.itemViews.push(t)),this.itemViews.forEach(function(e){this.skipTransitions||(e.el.classList.add("adding-child"),e.el.style.opacity=0),this.el.appendChild(e.el),e.render()},this),this.skipTransitions||this.requestAnimationFrame(function(){this.cid,this.itemViews.forEach(function(e){this.skipTransitions||(e.el.style[transitionProp]="opacity "+tx.LAST.cssText),e.el.style.removeProperty("opacity")},this)})},removeChildren:function(){this.itemViews.forEach(function(e,t,i){if(this.transforms.remove(e.el),this.skipTransitions)e.remove();else{var n=window.getComputedStyle(e.el);"0"==n.opacity||"hidden"==n.visibility?(this.cid,e.cid,e.remove()):(e.el.classList.add("removing-child"),n[transformProp]&&(e.el.style[transformProp]=n[transformProp]),e.el.style[transitionProp]="opacity "+tx.FIRST.cssText,e.el.style.opacity=0)}i[t]=null},this),this.itemViews.length=0},_onAddedTransitionEnd:function(e){if(e.target.cid&&this.childViews.hasOwnProperty(e.target.cid)){this.cid,e.target.cid,e.propertyName,e.type;var t=this.childViews[e.target.cid];t.el.classList.remove("adding-child"),t.el.style.removeProperty(transitionProp)}},_onRemovedTransitionEnd:function(e){if(e.target.cid&&this.childViews.hasOwnProperty(e.target.cid)){this.cid,e.target.cid,e.propertyName,e.type;var t=this.childViews[e.target.cid];t.el.classList.remove("removing-child"),t.remove()}},createMediaCarousel:function(e){var t=CarouselRenderer.extend({className:"carousel-item empty-item",model:e,template:carouselEmptyTemplate}),i=new Carousel({className:"media-carousel "+e.get("domid"),collection:e.get("media"),rendererFunction:function(e,i,n){if(-1===i)return t;switch(e.attr("@renderer")){case"video":return VideoRenderer;case"sequence":return SequenceRenderer;case"image":default:return ImageRenderer}},requireSelection:!!e.attr("@no-desc"),touch:this.hpan});return controller.listenTo(i,{"view:select:one":function(e){i.cid,e.cid,controller.selectMedia(e)},"view:select:none":controller.deselectMedia}),i.listenTo(e,"deselected",function(){this.stopListening(this.collection),controller.stopListening(this)}),i},createMediaCaptionStack:function(e){var t=new CollectionStack({className:"media-caption-stack",collection:e.get("media"),template:mediaStackTemplate});return t.listenTo(e,"deselected",function(){this.stopListening(this.collection)}),t},createMediaDotNavigation:function(e){var t=new SelectableListView({className:"media-dotnav dots-fontface color-fg05",collection:e.get("media"),renderer:DotNavigationRenderer});return controller.listenTo(t,{"view:select:one":controller.selectMedia,"view:select:none":controller.deselectMedia}),t.listenTo(e,"deselected",function(){this.stopListening(this.collection),controller.stopListening(this)}),t},createArticleView:function(e){return new ArticleView({model:e})}});

}).call(this,require("underscore"))

},{"./template/Carousel.EmptyRenderer.Bundle.hbs":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/template/Carousel.EmptyRenderer.Bundle.hbs","./template/CollectionStack.Media.hbs":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/template/CollectionStack.Media.hbs","app/control/Controller":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/control/Controller.js","app/control/Globals":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/control/Globals.js","app/model/collection/ArticleCollection":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/collection/ArticleCollection.js","app/model/collection/BundleCollection":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/collection/BundleCollection.js","app/view/base/View":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/base/View.js","app/view/component/ArticleView":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/component/ArticleView.js","app/view/component/Carousel":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/component/Carousel.js","app/view/component/CollectionStack":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/component/CollectionStack.js","app/view/component/SelectableListView":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/component/SelectableListView.js","app/view/render/CarouselRenderer":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/CarouselRenderer.js","app/view/render/DotNavigationRenderer":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/DotNavigationRenderer.js","app/view/render/ImageRenderer":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/ImageRenderer.js","app/view/render/SequenceRenderer":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/SequenceRenderer.js","app/view/render/VideoRenderer":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/VideoRenderer.js","underscore":"underscore","utils/TransformHelper":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/TransformHelper.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/NavigationView.js":[function(require,module,exports){
(function (_){
"use strict";var Hammer=require("hammerjs"),Globals=require("app/control/Globals"),TransformHelper=require("utils/TransformHelper"),controller=require("app/control/Controller"),types=require("app/model/collection/TypeCollection"),keywords=require("app/model/collection/KeywordCollection"),bundles=require("app/model/collection/BundleCollection"),articles=require("app/model/collection/ArticleCollection"),View=require("app/view/base/View"),FilterableListView=require("app/view/component/FilterableListView"),GroupingListView=require("app/view/component/GroupingListView"),GraphView=require("app/view/component/GraphView"),ArticleButton=require("app/view/component/ArticleButton"),tx=Globals.transitions,txNow=_.clone(tx.NOW);txNow.easing="ease",module.exports=View.extend({cidPrefix:"navigationView",className:"navigation container-expanded",initialize:function(e){_.bindAll(this,"_onVPanStart","_onVPanMove","_onVPanFinal"),_.bindAll(this,"_onHPanStart","_onHPanMove","_onHPanFinal"),_.bindAll(this,"_onNavigationClick"),this.itemViews=[],this.transforms=new TransformHelper,this.vpan=e.vpan||new Error("no vpan"),this.hpan=e.hpan||new Error("no hpan"),this.listenTo(this.model,"change",this._onModelChange),this.listenTo(keywords,"select:one select:none",this._onKeywordSelect),this.vpanGroup=this.el.querySelector("#vpan-group"),this.keywordList=this.createKeywordList(),this.bundleList=this.createBundleList(),this.itemViews.push(this.keywordList),this.itemViews.push(this.bundleList),this.graph=this.createGraphView(this.bundleList,this.keywordList,this.vpanGroup),this.sitename=this.createSitenameButton(),this.about=this.createAboutButton(),this.hGroupings=this.keywordList.el.querySelectorAll(".list-group .label"),this.transforms.add(this.vpanGroup,this.bundleList.wrapper,this.keywordList.wrapper,this.bundleList.el,this.keywordList.el,this.hGroupings,this.sitename.wrapper,this.about.wrapper,this.sitename.el,this.about.el,this.graph.el)},renderFrame:function(e,t){t&View.MODEL_INVALID&&(this.model.hasChanged("collapsed")&&(this.el.classList.toggle("container-collapsed",this.model.get("collapsed")),this.el.classList.toggle("container-expanded",!this.model.get("collapsed"))),(this.model.hasChanged("collapsed")||this.model.hasChanged("withBundle"))&&this.el.classList.add("container-changing"),this.model.hasChanged("routeName")&&(this.bundleList.requestRender(View.SIZE_INVALID|View.LAYOUT_INVALID),this.keywordList.requestRender(View.SIZE_INVALID|View.LAYOUT_INVALID))),(this.skipTransitions||t&View.ALL_INVALID)&&(this.skipTransitions?(this.transforms.stopAllTransitions(),this.transforms.validate(),this.transforms.clearAllOffsets()):this.renderTransitions(t),this.transforms.validate());var i,s=function(e){var t=Math.max(this.bundleList.metrics.height,this.keywordList.metrics.height);return this.model.get("collapsed")?(this.el.style.height="",this.graph.el.style.height=""):(this.el.style.height=t+"px",this.graph.el.style.height=t+"px"),this.graph.requestRender(View.SIZE_INVALID|View.LAYOUT_INVALID),this.cid,this.model.get("collapsed"),this.trigger("view:collapsed:measured",this),e}.bind(this),n=function(e){return this.graph.enabled=!this.model.get("collapsed"),this.graph.valueTo("a2b",0,0),this.model.get("collapsed")||this.graph.valueTo("a2b",1,Globals.TRANSITION_DURATION),e}.bind(this),a=function(e){return this.cid,View.flagsToString(t),this.el.classList.remove("container-changing"),this.trigger("view:collapsed:end",this),e}.bind(this);i=Promise.all([this.bundleList.whenCollapseChangeEnds(),this.keywordList.whenCollapseChangeEnds()]).then(s),t&View.MODEL_INVALID&&this.model.hasChanged("collapsed")&&(i=i.then(n)),i.then(this.transforms.whenAllTransitionsEnd()).then(a,function(e){console.error(e)}).catch(function(e){console.warn("%s::renderFrame promise rejected",this.cid)}.bind(this)),this.itemViews.forEach(function(e){this.skipTransitions&&(e.skipTransitions=!0),t&View.SIZE_INVALID&&e.requestRender(View.SIZE_INVALID),e.renderNow()},this),this.requestAnimationFrame(function(){this.skipTransitions=!1})},renderTransitions:function(e){var t,i=e&View.MODEL_INVALID,s=this.model.get("fromRouteName"),n=this.model.get("routeName"),a=i&&this.model.hasChanged("routeName"),o=this.model.has("bundle"),l=i&&this.model.hasAnyChanged("bundle"),r=i&&this.model.hasChanged("bundle"),h=this.model.has("media"),d=i&&this.model.hasAnyChanged("media"),c=i&&this.model.hasAnyChanged("article"),p=this.model.get("collapsed"),u=i&&this.model.hasChanged("collapsed");(t=this.transforms.get(this.vpanGroup))&&t.hasOffset&&(t.runTransition(u?tx.BETWEEN:tx.NOW),t.clearOffset()),Globals.BREAKPOINTS["medium-wide"].matches||Globals.BREAKPOINTS["medium-wide-stretch"].matches?(t=this.transforms.get(this.keywordList.wrapper),u&&!c?l?d&&t.runTransition(o?tx.LAST:tx.FIRST):h&&t.runTransition(p?tx.LAST:tx.FIRST):!l&&d&&t.runTransition(r?tx.BETWEEN:txNow),t.hasOffset&&t.clearOffset(),u^c&&(this.transforms.runTransition(p?tx.LAST:tx.FIRST,this.sitename.el,this.about.el,this.bundleList.wrapper),this.transforms.runTransition(p?tx.LAST:tx.FIRST,this.hGroupings)),!a||"root"!=s&&"root"!=n||this.transforms.runTransition(tx.BETWEEN,this.sitename.wrapper,this.about.wrapper)):Globals.BREAKPOINTS["small-stretch"].matches?u^c&&this.transforms.runTransition(p?tx.FIRST:tx.LAST,this.sitename.el,this.about.el):l&&this.transforms.runTransition(tx.BETWEEN,this.sitename.el,this.about.el)},_onModelChange:function(){this.requestRender(View.MODEL_INVALID),this.model.hasChanged("collapsed")&&(this.model.get("collapsed")&&keywords.deselect(),this.keywordList.collapsed=this.model.get("collapsed"),this.bundleList.collapsed=this.model.get("collapsed")),this.model.hasChanged("bundle")&&(this.bundleList.selectedItem=this.model.get("bundle"),this.keywordList.refreshFilter()),this.model.hasChanged("withBundle")&&(this.model.get("withBundle")?(this.el.addEventListener(View.CLICK_EVENT,this._onNavigationClick),this.vpan.on("vpanstart",this._onVPanStart),this.hpan.on("hpanstart",this._onHPanStart)):(this.el.removeEventListener(View.CLICK_EVENT,this._onNavigationClick),this.vpan.off("vpanstart",this._onVPanStart),this.hpan.off("hpanstart",this._onHPanStart),keywords.deselect()))},_onKeywordSelect:function(e){!this.model.get("collapsed")&&this.graph&&this.listenToOnce(this.bundleList,"view:render:after",function(e,t){this.graph.valueTo("b2a",0,0),this.graph.valueTo("b2a",1,Globals.TRANSITION_DURATION)}),this.bundleList.refreshFilter()},_onNavigationClick:function(e){this.cid,e.type,e.defaultPrevented,e.defaultPrevented||(e.preventDefault(),this.model.has("bundle")&&this.model.set("collapsed",!this.model.get("collapsed")))},_setCollapsed:function(e){e!==this.model.get("collapsed")&&this.setImmediate(function(){this.model.set("collapsed",e)})},_onHPanStart:function(e){this.transforms.get(this.keywordList.wrapper).stopTransition().clearOffset().validate(),(Globals.BREAKPOINTS["medium-wide"].matches||Globals.BREAKPOINTS["medium-wide-stretch"].matches)&&"bundleItem"===this.model.get("routeName")&&this.model.get("bundle").get("media").selectedIndex<=0&&this.model.get("collapsed")&&(this.transforms.get(this.keywordList.wrapper).clearCapture(),this._onHPanMove(e),this.hpan.on("hpanmove",this._onHPanMove),this.hpan.on("hpanend hpancancel",this._onHPanFinal))},_onHPanMove:function(e){var t=e.deltaX;this.model.has("media")?t*=e.offsetDirection&Hammer.DIRECTION_LEFT?0:720/920:t*=e.offsetDirection&Hammer.DIRECTION_LEFT?720/920:Globals.HPAN_OUT_DRAG,this.transforms.offset(t,null,this.keywordList.wrapper),this.transforms.validate()},_onHPanFinal:function(e){this.hpan.off("hpanmove",this._onHPanMove),this.hpan.off("hpanend hpancancel",this._onHPanFinal);var t=this.transforms.get(this.keywordList.wrapper);this._renderFlags&View.MODEL_INVALID||!t.hasOffset||(0!=t.offsetX&&t.runTransition(tx.NOW),t.clearOffset().validate())},_collapsedOffsetY:Globals.COLLAPSE_OFFSET,_onVPanStart:function(e){this.vpan.on("vpanmove",this._onVPanMove),this.vpan.on("vpanend vpancancel",this._onVPanFinal),this.transforms.stopTransition(this.vpanGroup),this.transforms.clearCapture(this.vpanGroup)},_onVPanMove:function(e){var t=this._computeVPanDelta(e.deltaY);this.transforms.offset(0,t,this.vpanGroup),this.transforms.validate()},_onVPanFinal:function(e){this.vpan.off("vpanmove",this._onVPanMove),this.vpan.off("vpanend vpancancel",this._onVPanFinal),this.setImmediate(function(){this.willCollapsedChange(e)&&this.model.set("collapsed",!this.model.get("collapsed")),this.requestRender(View.LAYOUT_INVALID)})},willCollapsedChange:function(e){return"vpanend"==e.type&&(this.model.get("collapsed")?e.deltaY>Globals.COLLAPSE_THRESHOLD:e.deltaY<-Globals.COLLAPSE_THRESHOLD)},_computeVPanDelta:function(e){var t=this.model.get("collapsed"),i=this._collapsedOffsetY,s=t?e>0:e<0,n=t?1-Globals.VPAN_DRAG:Globals.VPAN_DRAG;return e=Math.abs(e),e*=n,i*=n,s?e>i&&(e=(e-i)*Globals.VPAN_OUT_DRAG+i):e=-e*Globals.VPAN_OUT_DRAG,e*=t?.5:-1},createSitenameButton:function(){var e=new View({el:"#site-name",events:{"click a":function(e){e.defaultPrevented||e.preventDefault(),this.trigger("view:click")}}});return e.wrapper=e.el.parentElement,this.listenTo(e,"view:click",this._onSitenameClick),e},_onSitenameClick:function(){switch(this.model.get("routeName")){case"media-item":case"bundle-item":controller.deselectBundle();break;case"article-item":controller.deselectArticle()}},createArticleButton:function(e){var t=new ArticleButton({el:".article-button[data-handle='about']",model:e}).render();return t.wrapper=t.el.parentElement,this.listenTo(t,"view:click",this._onArticleClick),t},_onArticleClick:function(e){switch(this.model.get("routeName")){case"article-item":controller.deselectArticle();break;case"root":default:controller.selectArticle(e)}},createAboutButton:function(){return this.createArticleButton(articles.findWhere({handle:"about"}))},createBundleList:function(e){var t=new FilterableListView({el:"#bundle-list",collection:bundles,collapsed:!1,filterFn:function(e,t,i){return!!keywords.selected&&-1!==e.get("kIds").indexOf(keywords.selected.id)}});return t.wrapper=t.el.parentElement,this.listenTo(t,"view:select:one view:select:none",function(e){this.setImmediate(function(){controller.selectBundle(e)})}),this.listenTo(t,"view:select:same",this._onBundleListSame),t},_onBundleListSame:function(e){this.model.set("collapsed",!this.model.get("collapsed"))},createKeywordList:function(e){var t=new GroupingListView({el:"#keyword-list",collection:keywords,collapsed:!1,filterFn:function(e,t,i){return!!bundles.selected&&-1!==bundles.selected.get("kIds").indexOf(e.id)},groupingFn:function(e,t,i){return types.get(e.get("tId"))}});return t.wrapper=t.el.parentElement,t.listenTo(keywords,"select:one select:none",function(e){t.selectedItem=e}),this.listenTo(t,"view:select:one view:select:none",this._onKeywordListChange),t},_onKeywordListChange:function(e){this.model.get("collapsed")||keywords.select(e)},createGraphView:function(e,t,i){var s=new GraphView({id:"nav-graph",listA:e,listB:t,model:this.model,useOpaque:!1});return i||(i=this.el),i.insertBefore(s.el,i.firstElementChild),s}});

}).call(this,require("underscore"))

},{"app/control/Controller":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/control/Controller.js","app/control/Globals":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/control/Globals.js","app/model/collection/ArticleCollection":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/collection/ArticleCollection.js","app/model/collection/BundleCollection":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/collection/BundleCollection.js","app/model/collection/KeywordCollection":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/collection/KeywordCollection.js","app/model/collection/TypeCollection":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/collection/TypeCollection.js","app/view/base/View":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/base/View.js","app/view/component/ArticleButton":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/component/ArticleButton.js","app/view/component/FilterableListView":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/component/FilterableListView.js","app/view/component/GraphView":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/component/GraphView.js","app/view/component/GroupingListView":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/component/GroupingListView.js","hammerjs":"hammerjs","underscore":"underscore","utils/TransformHelper":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/TransformHelper.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/base/CallbackQueue.js":[function(require,module,exports){
"use strict";var PriorityQueue=function(t){this._offset=0|t,this._items=[],this._priorities=[],this._numItems=0};PriorityQueue.prototype=Object.create({enqueue:function(t,i){var e=this._items.length;return this._items[e]=t,this._priorities[e]={priority:0|i,index:e},this._numItems++,this._offset+e},contains:function(t){return 0<=(t-=this.offset)&&t<this._items.length},skip:function(t){var i,e;if(!(0>(i=t-this._offset)||i>=this._items.length))return null!==(e=this._items[i])&&(this._items[i]=null,this._numItems--),e},indexes:function(){var t=this._priorities.concat();return t.sort(function(t,i){return t.priority>i.priority?1:t.priority<i.priority?-1:0}),t.forEach(function(t,i,e){e[i]=t.index},this),t},items:function(){var t=this._priorities.concat();return t.sort(function(t,i){return t.priority>i.priority?1:t.priority<i.priority?-1:0}),t.forEach(function(t,i,e){e[i]=this._items[t.index]},this),t},_empty:function(t){this._offset=t,this._items.length=0,this._priorities.length=0,this._numItems=0}},{offset:{get:function(){return this._offset}},length:{get:function(){return this._items.length}},numItems:{get:function(){return this._numItems}}});var CallbackQueue=function(t,i){this._nextQueue=new PriorityQueue(0),this._currQueue=null,this._running=!1,this._runId=-1,this._requestFn=t,this._cancelFn=i,this._runQueue=this._runQueue.bind(this)};CallbackQueue.prototype=Object.create({_runQueue:function(){if(this._running)throw new Error("wtf!!!");var t,i;this._currQueue=this._nextQueue,this._nextQueue=new PriorityQueue(this._currQueue.offset+this._currQueue.length),this._runId=-1,this._running=!0;var e=this._currQueue.indexes(),n=this._currQueue._items;for(t=0;t<e.length;t++)null!==(i=n[e[t]])&&i.apply(null,arguments);this._running=!1,this._currQueue=null,this._nextQueue.numItems>0&&(this._runId=this._requestFn.call(null,this._runQueue))},request:function(t,i){return this._running||-1!==this._runId||(this._runId=this._requestFn.call(null,this._runQueue)),this._nextQueue.enqueue(t,i)},cancel:function(t){var i;return this._running?i=this._currQueue.skip(t)||this._nextQueue.skip(t):(i=this._nextQueue.skip(t),-1!==this._runId&&0===this._nextQueue.numItems&&(this._cancelFn.call(null,this._runId),this._runId=-1)),i}},{running:{get:function(){return this._running}}}),module.exports=CallbackQueue;

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/base/CanvasView.js":[function(require,module,exports){
(function (_){
"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var View=require("app/view/base/View"),Globals=require("app/control/Globals"),Interpolator=require("app/view/base/Interpolator"),getBoxEdgeStyles=require("utils/css/getBoxEdgeStyles"),MIN_CANVAS_RATIO=1,CanvasView=View.extend({cidPrefix:"canvasView",tagName:"canvas",className:"canvas-view",properties:{paused:{get:function(){return this._paused},set:function(t){t=!!t,this._interpolator.paused!==t&&(this._interpolator.paused=t,t||this.requestRender())}},context:{get:function(){return this._ctx}},interpolator:{get:function(){return this._interpolator}},canvasRatio:{get:function(){return this._canvasRatio}}},defaults:{values:{value:0},maxValues:{value:1},paused:!1,useOpaque:!1},initialize:function(t){(t=_.defaults(t||{},this.defaults)).values=_.defaults(t.values||{},this.defaults.values),t.maxValues=_.defaults(t.maxValues||{},this.defaults.maxValues),this._interpolator=new Interpolator(t.values,t.maxValues),this._interpolator.paused=t.paused,this._useOpaque=t.useOpaque,this._options=_.pick(t,"color","backgroundColor");this._ctx=this.el.getContext("2d",{});var e=MIN_CANVAS_RATIO,i=this._ctx.webkitBackingStorePixelRatio||1;window.devicePixelRatio!==i&&(e=window.devicePixelRatio/i,e=Math.max(e,MIN_CANVAS_RATIO)),this._canvasRatio=e,this.listenTo(this,"view:attached",function(){this.requestRender(View.SIZE_INVALID|View.LAYOUT_INVALID).renderNow()})},_updateCanvas:function(){var t=getComputedStyle(this.el);if(this._canvasWidth=this.el.scrollWidth,this._canvasHeight=this.el.scrollHeight,"border-box"===t.boxSizing){var e=getBoxEdgeStyles(t);this._canvasWidth-=e.paddingLeft+e.paddingRight+e.borderLeftWidth+e.borderRightWidth,this._canvasHeight-=e.paddingTop+e.paddingBottom+e.borderTopWidth+e.borderBottomWidth}this._canvasWidth*=this._canvasRatio,this._canvasHeight*=this._canvasRatio,this.measureCanvas(this._canvasWidth,this._canvasHeight,t),this.el.width=this._canvasWidth,this.el.height=this._canvasHeight,this._color=this._options.color||t.color||Globals.DEFAULT_COLORS.color,this._backgroundColor=this._options.backgroundColor||t.backgroundColor||Globals.DEFAULT_COLORS["background-color"],this._useOpaque&&this._opaqueProp&&(this.el[this._opaqueProp]=!0),this._fontSize=parseFloat(t.fontSize)*this._canvasRatio,this._fontFamily=t.fontFamily,this._ctx.restore(),this._ctx.font=[t.fontWeight,t.fontStyle,this._fontSize+"px/1",t.fontFamily].join(" "),this._ctx.textAlign="left",this._ctx.lineCap="butt",this._ctx.lineJoin="miter",this._ctx.strokeStyle=this._color,this._ctx.fillStyle=this._color,this.updateCanvas(this._ctx,t),this._ctx.save()},measureCanvas:function(t,e,i){},updateCanvas:function(t,e){},_getFontMetrics:function(t){var e,i,a,s=t.length;for(e in Globals.FONT_METRICS)-1!==(i=t.indexOf(e))&&i<s&&(s=i,a=Globals.FONT_METRICS[e]);return a||{unitsPerEm:1024,ascent:939,descent:-256}},_clearCanvas:function(){4==arguments.length?this._clearCanvasRect.apply(this,arguments):(this._ctx.save(),this._ctx.setTransform(1,0,0,1,0,0),this._clearCanvasRect(0,0,this.el.width,this.el.height),this._ctx.restore())},_clearCanvasRect:function(t,e,i,a){this._ctx.clearRect(t,e,i,a),this._useOpaque&&(this._ctx.save(),this._ctx.fillStyle=this._backgroundColor,this._ctx.fillRect(t,e,i,a),this._ctx.restore())},_setStyle:function(t){CanvasView.setStyle(this._ctx,t)},render:function(){return this.attached?this.renderNow():this},renderFrame:function(t,e){if(!this.attached)return e;e&View.SIZE_INVALID&&this._updateCanvas(),this._interpolator.valuesChanged&&(e|=View.LAYOUT_INVALID,this._interpolator.interpolate(t)),e&(View.LAYOUT_INVALID|View.SIZE_INVALID)&&(this.redraw(this._ctx,this._interpolator,e),this._interpolator.valuesChanged&&this.requestRender())},getTargetValue:function(t){return this._interpolator.getTargetValue(t)},getRenderedValue:function(t){return this._interpolator.getRenderedValue(t)},valueTo:function(t,e,i){this._interpolator.valueTo(t,e,i),this.requestRender(View.MODEL_INVALID|View.LAYOUT_INVALID)},redraw:function(t,e,i){}},{setStyle:function(t,e){if("object"==_typeof(e))for(var i in e)switch(_typeof(t[i])){case"undefined":break;case"function":Array.isArray(e[i])?t[i].apply(t,e[i]):t[i].call(t,e[i]);break;default:t[i]=e[i]}}});module.exports=CanvasView;

}).call(this,require("underscore"))

},{"app/control/Globals":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/control/Globals.js","app/view/base/Interpolator":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/base/Interpolator.js","app/view/base/View":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/base/View.js","underscore":"underscore","utils/css/getBoxEdgeStyles":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/css/getBoxEdgeStyles.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/base/Interpolator.js":[function(require,module,exports){
(function (_){
"use strict";var linear=require("utils/ease/fn/linear"),Interpolator=function(e,t,a){for(var r in this._tstamp=0,this._renderableKeys=[],this._renderedKeys=[],this._paused=!1,this._pausedChanging=!1,this._maxValues=_.isObject(t)?_.extend({},t):{},this._easeFn=_.isObject(a)?_.extend({},a):{},this._valueData={},e)_.isNumber(this._maxValues[r])||(this._maxValues[r]=null),_.isFunction(this._easeFn[r])||(this._easeFn[r]=linear),this._valueData[r]=this._initValue(e[r],0,this._maxValues[r]),this._renderableKeys.push(r)};Interpolator.prototype=Object.create({isAtTarget:function(e){return-1===this._renderableKeys.indexOf(e)},getCurrentValue:function(e){return this._valueData[e]._renderedValue||this._valueData[e]._value},getTargetValue:function(e){return this._valueData[e]._value},getStartValue:function(e){return this._valueData[e]._startValue},getRenderedValue:function(e){return this._valueData[e]._renderedValue},getOption:function(e,t){return"max"===t?this._maxValues[e]:"ease"===t?this._easeFn[e]:void 0},valueTo:function(e,t,a,r){var i,n=this._valueData[e];return _.isFunction(r)&&(this._easeFn[e]=r),(i=Array.isArray(n)?t.reduce(function(t,r,i){return n[i]?(n[i]=this._initNumber(r,a,this._maxValues[e]),!0):this._setValue(n[i],r,a)||t}.bind(this),i):this._setValue(n,t,a))&&(-1!==this._renderableKeys.indexOf(e)||this._renderableKeys.push(e)),this},updateValue:function(e){var t=this._renderableKeys.indexOf(e);return-1===t||this._interpolateKey(e)||this._renderableKeys.splice(t,1),this},_initValue:function(e,t,a){return Array.isArray(e)?e.map(function(e){return this._initNumber(e,t,a)},this):this._initNumber(e,t,a)},_initNumber:function(e,t,a){var r={};return r._value=e,r._startValue=e,r._valueDelta=0,r._duration=t||0,r._startTime=NaN,r._elapsedTime=NaN,r._lastRenderedValue=null,r._renderedValue=r._startValue,r._maxVal=a,r},_setValue:function(e,t,a){return e._value!==t&&(e._startValue=e._value,e._valueDelta=t-e._value,e._value=t,e._duration=a||0,e._startTime=NaN,e._elapsedTime=NaN,!0)},_tstamp:0,interpolate:function(e){if(this._tstamp=e,this.valuesChanged){this._pausedChanging&&(this._renderableKeys.forEach(function(t){var a=this._valueData[t];isNaN(a._elapsedTime)||(a._startTime=e-a._elapsedTime)},this),this._pausedChanging=!1);var t=this._renderableKeys;this._renderableKeys=t.filter(function(t){return this._interpolateValue(e,this._valueData[t],this._easeFn[t])},this),this._renderedKeys=t}return this},_interpolateKey:function(e){return this._interpolateValue(this._tstamp,this._valueData[e],this._easeFn[e])},_interpolateValue:function(e,t,a){return Array.isArray(t)?t.reduce(function(t,r,i,n){return this._interpolateNumber(e,r,a)||t}.bind(this),!1):this._interpolateNumber(e,t,a)},_interpolateNumber:function(e,t,a){isNaN(t._startTime)&&(t._startTime=e),t._lastRenderedValue=t._renderedValue;var r=Math.max(0,e-t._startTime);return r<t._duration?(t._maxVal&&t._valueDelta<0?t._renderedValue=a(r,t._startValue,t._valueDelta+t._maxVal,t._duration)-t._maxVal:t._renderedValue=a(r,t._startValue,t._valueDelta,t._duration),t._elapsedTime=r,!0):(t._renderedValue=t._value,t._elapsedTime=NaN,t._startTime=NaN,!1)}},{paused:{get:function(){return this._paused},set:function(e){e=!!e,this._paused!==e&&(this._paused=e,this._pausedChanging=!0)}},valuesChanged:{get:function(){return!this._paused&&this._renderableKeys.length>0}},renderableKeys:{get:function(){return this._renderableKeys}},renderedKeys:{get:function(){return this._renderedKeys}},keys:{get:function(){return Object.keys(this._valueData)}}}),module.exports=Interpolator;

}).call(this,require("underscore"))

},{"underscore":"underscore","utils/ease/fn/linear":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/ease/fn/linear.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/base/PrefixedEvents.js":[function(require,module,exports){
"use strict";var prefixedEvent=require("utils/prefixedEvent"),eventMap={transitionend:prefixedEvent("transitionend"),fullscreenchange:prefixedEvent("fullscreenchange",document),fullscreenerror:prefixedEvent("fullscreenerror",document),visibilitychange:prefixedEvent("visibilitychange",document,"hidden")},eventNum=0;for(var eventName in eventMap)eventName===eventMap[eventName]?delete eventMap[eventName]:(Object.defineProperty(eventMap,eventName,{value:eventMap[eventName],enumerable:!0}),Object.defineProperty(eventMap,eventNum,{value:eventName,enumerable:!1}),eventNum++);Object.defineProperty(eventMap,"length",{value:eventNum}),module.exports=eventMap;

},{"utils/prefixedEvent":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/prefixedEvent.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/base/TouchManager.js":[function(require,module,exports){
"use strict";var Globals=require("app/control/Globals"),Hammer=require("hammerjs"),Pan=require("utils/touch/SmoothPanRecognizer");function createInstance(e){var n=new Hammer.Manager(e),a=new Pan({event:"hpan",direction:Hammer.DIRECTION_HORIZONTAL,threshold:Globals.PAN_THRESHOLD});return n.add(a),n}var logPanEvent,logEvent,PANEND_THRES_MS=300,PANEND_THRES_PX=25,UP_EVENT=window.hasOwnProperty("onpointerup")?"pointerup":"mouseup",touchHandlers={},captureHandlers={},bubblingHandlers={},lastTimeStamp=NaN,panSessionOpened=!1,saveTimeStamp=function(e){panSessionOpened=!e.isFinal,e.isFinal&&(lastTimeStamp=e.srcEvent.timeStamp)},stopEventAfterPan=function(e){e.timeStamp-lastTimeStamp<PANEND_THRES_MS&&(e.preventDefault(),e.stopPropagation()),lastTimeStamp=NaN};function addHandlers(){var e,n=instance.element;for(e in touchHandlers)touchHandlers.hasOwnProperty(e)&&instance.on(e,touchHandlers[e]);for(e in captureHandlers)captureHandlers.hasOwnProperty(e)&&n.addEventListener(e,captureHandlers[e],!0);for(e in bubblingHandlers)bubblingHandlers.hasOwnProperty(e)&&n.addEventListener(e,bubblingHandlers[e],!1)}function removeHandlers(){var e,n=instance.element;for(e in captureHandlers)captureHandlers.hasOwnProperty(e)&&n.removeEventListener(e,captureHandlers[e],!0);for(e in bubblingHandlers)captureHandlers.hasOwnProperty(e)&&n.removeEventListener(e,bubblingHandlers[e],!0)}touchHandlers["hpanstart hpanend hpancancel"]=saveTimeStamp,captureHandlers.click=stopEventAfterPan;var instance=null,TouchManager={init:function(e){return null===instance?(instance=createInstance(e),addHandlers()):instance.element!==e&&console.warn("TouchManager already initialized with another element"),instance},destroy:function(){null!==instance?(removeHandlers(),instance.destroy(),instance=null):console.warn("no instance to destroy")},getInstance:function(){return null===instance&&console.error("TouchManager has not been initialized"),instance}};module.exports=TouchManager;

},{"app/control/Globals":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/control/Globals.js","hammerjs":"hammerjs","utils/touch/SmoothPanRecognizer":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/touch/SmoothPanRecognizer.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/base/View.js":[function(require,module,exports){
(function (_){
"use strict";require("setimmediate");var Backbone=require("backbone"),_cidSeed=1,_viewsByCid={};function addChildViews(e){for(var t,i=e.querySelectorAll("*[data-cid]"),n=0,r=i.length;n<r;n++)(t=View.findByElement(i.item(n)))&&(t.attached||t._elementAttached())}function removeChildViews(e){for(var t,i=e.querySelectorAll("*[data-cid]"),n=0,r=i.length;n<r;n++)(t=View.findByElement(i.item(n)))&&(t.attached?(t.cid,t._elementDetached()):console.warn("View::[detached (parent)] %s (ignored)",t.cid))}var observer=new MutationObserver(function(e){var t,i,n,r,s,a,d;for(t=0,i=e.length;t<i;t++)if("childList"==(n=e[t]).type){for(r=0,s=n.addedNodes.length;r<s;r++)a=n.addedNodes.item(r),(d=View.findByElement(a))&&(d.attached||d._elementAttached()),a instanceof HTMLElement&&addChildViews(a);for(r=0,s=n.removedNodes.length;r<s;r++)a=n.removedNodes.item(r),(d=View.findByElement(a))&&(d.attached?(d.cid,d.attached,d._elementDetached()):console.warn("View::[detached (childList)] %s (ignored)",d.cid,d.attached)),a instanceof HTMLElement&&removeChildViews(a)}else"attributes"==n.type&&(d=View.findByElement(n.target))&&(d.attached||d._elementAttached())});observer.observe(document.body,{attributes:!0,childList:!0,subtree:!0,attributeFilter:["data-cid"]});var _now=window.performance?window.performance.now.bind(window.performance):Date.now.bind(Date),renderQueue=new(require("app/view/base/CallbackQueue"))(function(e){return window.requestAnimationFrame(e)},function(e){return window.cancelAnimationFrame(e)}),modelQueue=new(require("app/view/base/CallbackQueue"))(function(e){return window.setImmediate(function(){e.call(null,_now())})},function(e){return window.clearImmediate(e)}),PrefixedEvents=require("app/view/base/PrefixedEvents"),applyEventPrefixes=function(e){var t,i;for(t in e)i=t.match(/^\w+/i)[0],PrefixedEvents.hasOwnProperty(i)&&(e[t.replace(i,PrefixedEvents[i])]=e[t],delete e[t]);return e},getViewDepth=function(e){return e?e.attached?null===e.parentView?0:e.parentView.viewDepth+1:NaN:null};function logAttachInfo(e,t,i){-1!=["log","info","warn","error"].indexOf(i)&&(i="log"),console[i].call(console,"%s::%s [parent:%s %s %s depth:%s]",e.cid,t,e.parentView&&e.parentView.cid,e.attached?"attached":"detached",e._viewPhase,e.viewDepth)}var View={NONE_INVALID:0,ALL_INVALID:-1>>>1,CHILDREN_INVALID:1,MODEL_INVALID:2,STYLES_INVALID:4,SIZE_INVALID:8,LAYOUT_INVALID:16,CLICK_EVENT:"click",ViewError:require("app/view/base/ViewError"),prefixedProperty:require("utils/prefixedProperty"),prefixedStyleName:require("utils/prefixedStyleName"),prefixedEvent:require("utils/prefixedEvent"),whenViewIsAttached:require("app/view/promise/whenViewIsAttached"),whenViewIsRendered:require("app/view/promise/whenViewIsRendered"),findByElement:function(e){return _viewsByCid[e.cid]?_viewsByCid[e.cid]:null},findByDescendant:function(e){do{if(_viewsByCid[e.cid])return _viewsByCid[e.cid]}while(e=e.parentElement||e.parentNode);return null},extend:function(e,t){return PrefixedEvents.length&&e.events&&(_.isFunction(e.events)?e.events=_.wrap(e.events,function(e){return applyEventPrefixes(e.apply(this))}):_.isObject(e.events)&&(e.events=applyEventPrefixes(e.events))),e.properties&&this.prototype.properties&&_.defaults(e.properties,this.prototype.properties),Backbone.View.extend.apply(this,arguments)},_flagsToStrings:["-"],flagsToString:function(e){var t=View._flagsToStrings[0|e];return t||(t=[],e&View.CHILDREN_INVALID&&t.push("children"),e&View.MODEL_INVALID&&t.push("model"),e&View.STYLES_INVALID&&t.push("styles"),e&View.SIZE_INVALID&&t.push("size"),e&View.LAYOUT_INVALID&&t.push("layout"),View._flagsToStrings[e]=t=t.join(" ")),t}};Object.defineProperty(View,"instances",{value:_viewsByCid,enumerable:!0});var ViewProto={cidPrefix:"view",_attached:!1,_parentView:null,_viewDepth:null,_viewPhase:"initializing",_renderQueueId:-1,_renderFlags:0,_enabled:null,properties:{cid:{get:function(){return this._cid||(this._cid=this.cidPrefix+_cidSeed++)},set:function(e){}},attached:{get:function(){return this._attached}},parentView:{get:function(){return this._parentView}},viewDepth:{get:function(){return this._getViewDepth()}},invalidated:{get:function(){return-1!==this._renderQueueId}},enabled:{get:function(){return this._enabled},set:function(e){this.setEnabled(e)}},renderFlags:{get:function(){return this._renderFlags}}},$:Backbone.$,constructor:function(e){this.transform={},this.childViews={},this._applyRender=this._applyRender.bind(this),this.properties&&Object.defineProperties(this,this.properties),e&&e.className&&this.className&&(e.className+=" "+_.result(this,"className")),e&&e.parentView&&this._setParentView(e.parentView,!0),Backbone.View.apply(this,arguments),this._viewPhase="initialized",null!==this.parentView&&this.trigger("view:parentChange",this.parentView,null),this.attached&&this.trigger("view:attached",this)},remove:function(){return"disposing"==this._viewPhase&&logAttachInfo(this,"remove","warn"),this._viewPhase="disposing",this._cancelRender(),this.$el.remove(),this._attached=!1,this.trigger("view:removed",this),this._setParentView(null),this.stopListening(),this.invalidated&&(console.warn("%s::remove invalidated after remove()",this.cid),this._cancelRender()),delete _viewsByCid[this.cid],this._viewPhase="disposed",this},_elementAttached:function(){this._attached=!0,this._viewDepth=null,this.setEnabled(!0),this._setParentView(View.findByDescendant(this.el.parentElement)),"initialized"==this._viewPhase?this.trigger("view:attached",this):"replacing"==this._viewPhase&&(this._viewPhase="initialized",this.trigger("view:replaced",this))},_elementDetached:function(){this.attached&&"disposing"!=this._viewPhase&&"disposed"!=this._viewPhase||logAttachInfo(this,"_elementDetached","error"),this._attached=!1,this._viewDepth=null,this.setEnabled(!1),"disposing"==this._viewPhase&&"disposed"!=this._viewPhase||this.remove()},_setParentView:function(e,t){void 0===e&&(console.warn("$s::_setParentView invalid value '%s'",this.cid,e),e=null);var i=this._parentView;this._parentView=e,this._viewDepth=null,e!==i&&(null!==i&&this.cid in i.childViews&&delete i.childViews[this.cid],null!==e&&(e.childViews[this.cid]=this),t||this.trigger("view:parentChange",this,e,i))},whenAttached:function(){return View.whenViewIsAttached(this)},_getViewDepth:function(){return null===this._viewDepth&&(this._viewDepth=getViewDepth(this)),this._viewDepth},setElement:function(e,t){if(this.el?(this.el!==e&&this.el.parentElement&&(this.attached&&(this._viewPhase="replacing"),this.el.parentElement.replaceChild(e,this.el)),Backbone.View.prototype.setElement.apply(this,arguments),this.className&&_.result(this,"className").split(" ").forEach(function(e){this.el.classList.add(e)},this)):Backbone.View.prototype.setElement.apply(this,arguments),void 0===this.el)throw new Error("Backbone view has no element");return _viewsByCid[this.cid]=this,this.el.cid=this.cid,this.el.setAttribute("data-cid",this.cid),this.model&&this.el.setAttribute("data-mcid",this.model.cid),this},addListeners:function(e,t,i,n){_.isObject(n)||(n=!!n),"string"==typeof t&&(t=t.split(" "));for(var r=0;r<t.length;r++)e.addEventListener(t[r],i,n);return this},removeListeners:function(e,t,i,n){_.isObject(n)||(n=!!n),"string"==typeof t&&(t=t.split(" "));for(var r=0;r<t.length;r++)e.removeEventListener(t[r],i,n);return this},listenToElement:function(e,t,i){e=Backbone.$(e),"string"==typeof t&&(t=t.split(" "));for(var n=0;n<t.length;n++)this.listenTo(e,t[n],i)},stopListeningToElement:function(e,t,i){e=Backbone.$(e),"string"==typeof t&&(t=t.split(" "));for(var n=0;n<t.length;n++)this.stopListening(e,t[n],i)},listenToElementOnce:function(e,t,i,n){var r,s,a;return _.isObject(n)||(n=!!n),r=function(){a.off("view:remove",r),e.removeEventListener(t,s,n)},s=function(e){r(),i.call(a,e)},(a=this).on("view:remove",r),e.addEventListener(t,s,n),this},requestAnimationFrame:function(e,t,i){return renderQueue.request(e.bind(i||this),t)},cancelAnimationFrame:function(e){return renderQueue.cancel(e)},setImmediate:function(e,t,i){return modelQueue.request(e.bind(i||this),t)},clearImmediate:function(e){return modelQueue.cancel(e)},_traceRenderStatus:function(){return[-1!=this._renderQueueId?"async id:"+this._renderQueueId:"sync",View.flagsToString(this._renderFlags),this.attached?"attached":"detached",(this.skipTransitions?"skip":"run")+"-tx"].join(", ")},_applyRender:function(e){var t=this._renderFlags;this.trigger("view:render:before",this,t),this._renderFlags=0,this._renderQueueId=-1,this._renderFlags|=this.renderFrame(e,t),this.trigger("view:render:after",this,t),0!=this._renderFlags&&console.warn("%s::_applyRender [returned] phase: %s flags: %s (%s)",this.cid,this._viewPhase,View.flagsToString(this._renderFlags),this._renderFlags)},_cancelRender:function(){var e,t;-1!=this._renderQueueId&&(e=this._renderQueueId,this._renderQueueId=-1,void 0===(t=renderQueue.cancel(e))?console.warn("%s::_cancelRender [id:%i] not found",this.cid,e):null===t&&console.warn("%s::_cancelRender [id:%i] already cancelled",this.cid,e))},_requestRender:function(){renderQueue.running&&this._cancelRender(),-1==this._renderQueueId&&(this._renderQueueId=renderQueue.request(this._applyRender,isNaN(this.viewDepth)?Number.MAX_VALUE:this.viewDepth))},invalidate:function(e){return void 0!==e&&(this._renderFlags|=e),this},requestRender:function(e){return this.invalidate(e),this._requestRender(),this},renderFrame:function(e,t){return View.NONE_INVALID},renderNow:function(e){return-1!=this._renderQueueId&&(this._cancelRender(),e=!0),e&&this._applyRender(_now()),this},whenRendered:function(){return View.whenViewIsRendered(this)},requestChildrenRender:function(e,t,i){var n,r;for(n in this.childViews)(r=this.childViews[n]).skipTransitions=r.skipTransitions||this.skipTransitions,r.requestRender(e),t&&r.renderNow(i);return this},render:function(){return this.renderNow(!0)},setEnabled:function(e){this._enabled!=e&&(this._enabled=!!e,this._enabled?this.delegateEvents():this.undelegateEvents())}};module.exports=Backbone.View.extend(ViewProto,View);

}).call(this,require("underscore"))

},{"app/view/base/CallbackQueue":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/base/CallbackQueue.js","app/view/base/PrefixedEvents":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/base/PrefixedEvents.js","app/view/base/ViewError":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/base/ViewError.js","app/view/promise/whenViewIsAttached":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/promise/whenViewIsAttached.js","app/view/promise/whenViewIsRendered":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/promise/whenViewIsRendered.js","backbone":"backbone","setimmediate":"setimmediate","underscore":"underscore","utils/prefixedEvent":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/prefixedEvent.js","utils/prefixedProperty":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/prefixedProperty.js","utils/prefixedStyleName":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/prefixedStyleName.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/base/ViewError.js":[function(require,module,exports){
"use strict";function ViewError(r,e){this.view=r,this.err=e,this.message=e.message}ViewError.prototype=Object.create(Error.prototype),ViewError.prototype.constructor=ViewError,ViewError.prototype.name="ViewError",module.exports=ViewError;

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/component/ArticleButton.hbs":[function(require,module,exports){
"use strict";var HandlebarsCompiler=require("hbsfy/runtime");module.exports=HandlebarsCompiler.template({compiler:[7,">= 4.0.0"],main:function(a,l,e,n,s){var t,r,u=null!=l?l:a.nullContext||{},o=e.helperMissing,i=a.escapeExpression;return'<a href="'+i((e.global||l&&l.global||o).call(u,"APP_ROOT",{name:"global",hash:{},data:s}))+"#"+i("function"==typeof(r=null!=(r=e.handle||(null!=l?l.handle:l))?r:o)?r.call(u,{name:"handle",hash:{},data:s}):r)+'"><span class="label">'+(null!=(t="function"==typeof(r=null!=(r=e.name||(null!=l?l.name:l))?r:o)?r.call(u,{name:"name",hash:{},data:s}):r)?t:"")+"</span></a>\n"},useData:!0});

},{"hbsfy/runtime":"hbsfy/runtime"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/component/ArticleButton.js":[function(require,module,exports){
"use strict";var View=require("app/view/base/View"),viewTemplate=require("./ArticleButton.hbs"),ArticleButton=View.extend({cidPrefix:"articleButton",tagName:"h2",className:"article-button",template:viewTemplate,events:{"click a":function(e){e.defaultPrevented||e.preventDefault(),this.trigger("view:click",this.model)}},renderFrame:function(e,t){this.el.innerHTML=this.template(this.model.toJSON())}});module.exports=ArticleButton;

},{"./ArticleButton.hbs":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/component/ArticleButton.hbs","app/view/base/View":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/base/View.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/component/ArticleView.js":[function(require,module,exports){
"use strict";var View=require("app/view/base/View"),RECAPTCHA_KEYS={"canillas.name":"6LcaPHwUAAAAAAfzEnqRchIx8jY1YkUEpuswJDHx"},RECAPTCHA_URL=function(e){return"https://www.google.com/recaptcha/api.js?render=".concat(RECAPTCHA_KEYS[e])},ArticleView=View.extend({cidPrefix:"articleView",tagName:"article",className:"article-view mdown",initialize:function(e){},renderFrame:function(e,i){this.el.innerHTML=this.model.get("text")}});module.exports=ArticleView;

},{"app/view/base/View":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/base/View.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/component/CanvasProgressMeter.js":[function(require,module,exports){
(function (_){
"use strict";var CanvasView=require("app/view/base/CanvasView"),PI2=2*Math.PI,BASE_ROTATION=.75,GAP_ARC=PI2/48,easeIn=require("utils/ease/fn/easeInQuad"),easeOut=require("utils/ease/fn/easeOutQuad"),LOOP_OFFSET=1.833333,STEP_MS=400,ARC_DEFAULTS={amount:{lineWidth:.75,radiusOffset:0},available:{lineWidth:.75,inverse:"not-available"},"not-available":{lineWidth:.8,lineDash:[.3,.7],lineDashOffset:0},indeterminate:{lineWidth:2,lineDash:[.3,1.7],lineDashOffset:0}};module.exports=CanvasView.extend({cidPrefix:"canvasProgressMeter",className:"progress-meter canvas-progress-meter",defaultKey:"amount",defaults:{values:{amount:0,available:0,_loop:0,_stalled_arc:0,_stalled_loop:0},maxValues:{amount:1,available:1,_stalled_loop:1},useOpaque:!0,labelFn:function(e,t){return e/t*100|0}},properties:{stalled:{get:function(){return!1},set:function(e){}}},_setStalled:function(e){this._stalled!==e&&(this._stalled=e,this.requestRender(CanvasView.MODEL_INVALID|CanvasView.LAYOUT_INVALID))},initialize:function(e){CanvasView.prototype.initialize.apply(this,arguments),this._labelFn=e.labelFn,this._stalled=!!e.stalled,this._valueStyles={},this._canvasSize=null,this._canvasOrigin=null},_needsLoop:!1,valueTo:function(e,t,a){"amount"===e&&t<this.interpolator.getCurrentValue("amount")&&(this._needsLoop=!0),CanvasView.prototype.valueTo.apply(this,arguments)},measureCanvas:function(e,t,a){this._canvasHeight=this._canvasWidth=Math.min(e,t)},updateCanvas:function(){var e;for(var t in ARC_DEFAULTS)(e=_.defaults({},ARC_DEFAULTS[t])).lineWidth*=this._canvasRatio,e.radius=(this._canvasWidth-e.lineWidth)/2,e.radiusOffset&&(e.radius+=e.radiusOffset*this._canvasRatio),_.isArray(e.lineDash)?(e.lineDash=e.lineDash.map(function(e,t,a){return e*this.radius*GAP_ARC},e),e.lineDashLength=e.lineDash.reduce(function(e,t,a,s){return e+t},0),e.lineDashArc=e.lineDash[0]*GAP_ARC):e.lineDashArc=0,this._valueStyles[t]=e;var a=this._getFontMetrics(this._fontFamily);this._baselineShift=a?(a.ascent+a.descent)/a.unitsPerEm:.7,this._baselineShift*=.5*this._fontSize,this._baselineShift=Math.round(this._baselineShift),this._ctx.restore(),this._ctx.setTransform(1,0,0,1,this._canvasWidth/2,this._canvasHeight/2),this._ctx.save()},redraw:function(e,t,a){var s,i,l,n;this._clearCanvas(-this._canvasWidth/2,-this._canvasHeight/2,this._canvasWidth,this._canvasHeight),i=t._valueData.amount,this.drawLabel(this._labelFn(i._renderedValue,i._maxVal)),e.save(),this._needsLoop&&(this._needsLoop=!1,t.valueTo("_loop",1,0),t.valueTo("_loop",0,750),t.updateValue("_loop")),n=t.getCurrentValue("_loop"),e.rotate(PI2*(BASE_ROTATION+(1-n)));var r=0;s=this._valueStyles.amount,(l=n+i._renderedValue/i._maxVal)>0&&(r=this.drawArc(l,GAP_ARC,PI2-GAP_ARC,r,s),this.drawEndCap(r,s),r+=2*GAP_ARC),s=this._valueStyles.available;var h=(i=t._valueData.available).length||1,_=PI2/h,o=GAP_ARC+(_%GAP_ARC-s.lineDashArc)/2;if(Array.isArray(i))for(var u=0;u<h;u++)l=i[u]._renderedValue/(i[u]._maxVal/h),this.drawArc(l,u*_+o,(u+1)*_-o,r,s);else l=i._renderedValue/i._maxVal,this.drawArc(l,o,PI2-o,r,s);this._stalled?0===t.getTargetValue("_stalled_arc")&&t.valueTo("_stalled_arc",1,1*STEP_MS,easeIn).updateValue("_stalled_arc"):1===t.getTargetValue("_stalled_arc")&&t.valueTo("_stalled_arc",0,1*STEP_MS,easeOut).updateValue("_stalled_arc");var d=t.getRenderedValue("_stalled_arc");d>0&&!t.paused&&t.isAtTarget("_stalled_loop")&&t.valueTo("_stalled_loop",0,0).valueTo("_stalled_loop",1,2*STEP_MS).updateValue("_stalled_loop");var c=t.getRenderedValue("_stalled_loop");if(d>0){var v=d*(2*(c<.5?c%.5:.5-c%.5))*.25+.125*d+1e-4,p=c+LOOP_OFFSET;e.save(),e.lineWidth=10*this._canvasRatio,e.globalAlpha=1,e.globalCompositeOperation="destination-out",e.strokeColor="red",e.beginPath(),e.arc(0,0,this._canvasWidth/2,(1-v+p)*PI2,(v+p)*PI2,!1),e.stroke(),e.restore()}e.restore()},drawArc:function(e,t,a,s,i){var l,n,r,h,_,o;return s||(s=0),(r=t+(l=a-t)*e)>(n=Math.max(t,s))&&(this._ctx.save(),this.applyValueStyle(i),this._ctx.beginPath(),this._ctx.arc(0,0,i.radius,r,n,!0),this._ctx.stroke(),this._ctx.restore()),void 0!==i.inverse&&(h=this._valueStyles[i.inverse],(o=r+l*(1-e))>(_=Math.max(r,s))&&(this._ctx.save(),this.applyValueStyle(h),this._ctx.beginPath(),this._ctx.arc(0,0,h.radius,o,_,!0),this._ctx.stroke(),this._ctx.restore())),r},applyValueStyle:function(e){this._ctx.lineWidth=e.lineWidth,_.isArray(e.lineDash)&&this._ctx.setLineDash(e.lineDash),_.isNumber(e.lineDashOffset)&&(this._ctx.lineDashOffset=e.lineDashOffset)},drawNotch:function(e,t,a){var s,i,l,n;s=Math.cos(e),i=Math.sin(e),l=a.radius,n=a.radius-t,this._ctx.save(),this.applyValueStyle(a),this._ctx.lineCap="square",this._ctx.beginPath(),this._ctx.moveTo(l*s,l*i),this._ctx.lineTo(n*s,n*i),this._ctx.stroke(),this._ctx.restore()},drawEndCap:function(e,t){var a=t.radius;this._ctx.save(),this._ctx.lineWidth=t.lineWidth,this._ctx.rotate(e-2*GAP_ARC),this._ctx.beginPath(),this._ctx.arc(0,0,a,.5*GAP_ARC,2*GAP_ARC,!1),this._ctx.lineTo(a-GAP_ARC*a,0),this._ctx.closePath(),this._ctx.fill(),this._ctx.stroke(),this._ctx.restore()},drawLabel:function(e){this._labelText!==e&&(this._labelText=e,this._labelWidth=this._ctx.measureText(e).width),this._ctx.fillText(e,-.5*this._labelWidth,this._baselineShift,this._labelWidth)}});

}).call(this,require("underscore"))

},{"app/view/base/CanvasView":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/base/CanvasView.js","underscore":"underscore","utils/ease/fn/easeInQuad":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/ease/fn/easeInQuad.js","utils/ease/fn/easeOutQuad":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/ease/fn/easeOutQuad.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/component/Carousel.js":[function(require,module,exports){
(function (_){
"use strict";var Container=require("backbone.babysitter"),Hammer=require("hammerjs"),Pan=require("utils/touch/SmoothPanRecognizer"),Tap=Hammer.Tap,Globals=require("app/control/Globals"),View=require("app/view/base/View"),CarouselRenderer=require("app/view/render/CarouselRenderer"),prefixedProperty=require("utils/prefixedProperty"),prefixedStyleName=require("utils/prefixedStyleName"),transformStyleName=prefixedStyleName("transform"),transformProperty=prefixedProperty("transform"),translateTemplate=Globals.TRANSLATE_TEMPLATE,MAX_SELECT_THRESHOLD=20,VERTICAL=Hammer.DIRECTION_VERTICAL,HORIZONTAL=Hammer.DIRECTION_HORIZONTAL,dirToStr=function(e){return e===Hammer.DIRECTION_NONE?"NONE":e===Hammer.DIRECTION_LEFT?"LEFT":e===Hammer.DIRECTION_RIGHT?"RIGHT":e===Hammer.DIRECTION_UP?"UP":e===Hammer.DIRECTION_DOWN?"DOWN":e===Hammer.DIRECTION_HORIZONTAL?"HOR":e===Hammer.DIRECTION_VERTICAL?"VER":e===Hammer.DIRECTION_ALL?"ALL":"UNREC"},isValidTouchManager=function(e,t){try{return e.get("hpan").options.direction==t}catch(e){return!1}},createTouchManager=function(e,t,i){var s=new Hammer.Manager(e),r=new Pan({event:"hpan",threshold:Globals.THRESHOLD,direction:Hammer.DIRECTION_HORIZONTAL}),n=new Tap({threshold:Globals.THRESHOLD-1,interval:50,time:200});return n.recognizeWith(r),s.add([r,n]),s},Carousel={ANIMATED:!1,IMMEDIATE:!0,DIRECTION_VERTICAL:VERTICAL,DIRECTION_HORIZONTAL:HORIZONTAL,defaults:{selectOnScrollEnd:!1,requireSelection:!1,direction:HORIZONTAL,selectThreshold:20,rendererFunction:function(){var e=CarouselRenderer.extend({className:"carousel-item default-renderer"}),t=CarouselRenderer.extend({className:"carousel-item empty-renderer"});return function(i,s,r){return-1===s?t:e}}()}};Carousel.validOptions=_.keys(Carousel.defaults);var CarouselProto={cidPrefix:"carousel",tagName:"div",className:"carousel skip-transitions",properties:{scrolling:{get:function(){return this._scrolling}},selectedItem:{get:function(){return this._selectedView.model},set:function(e){e?this._onSelectOne(e):this._onSelectNone()}}},events:{"transitionend .carousel-item.selected":"_onScrollTransitionEnd","click .carousel-item:not(.selected)":"_onClick"},initialize:function(e){_.bindAll(this,"_onPointerEvent","_onClick"),this.itemViews=new Container,this.metrics={},_.extend(this,_.defaults(_.pick(e,Carousel.validOptions),Carousel.defaults)),this._precedingDir=(Hammer.DIRECTION_LEFT|Hammer.DIRECTION_UP)&this.direction,this._followingDir=(Hammer.DIRECTION_RIGHT|Hammer.DIRECTION_DOWN)&this.direction,isValidTouchManager(e.touch,this.direction)?this.touch=e.touch:(console.warn("%s::initialize creating Hammer instance",this.cid),this.touch=createTouchManager(this.el,this.direction),this.listenTo(this,"view:removed",function(){this.touch.destroy()})),this.setEnabled(!0),this.skipTransitions=!0,this._renderFlags=View.CHILDREN_INVALID,this.listenTo(this,"view:attached",function(){this.skipTransitions=!0,this.requestRender(View.SIZE_INVALID|View.LAYOUT_INVALID)}),this.listenTo(this.collection,{reset:this._onReset,"select:one":this._onSelectOne,"select:none":this._onSelectNone,"deselect:one":this._onDeselectAny,"deselect:none":this._onDeselectAny})},remove:function(){return this._togglePointerEvents(!1),this.removeChildren(),View.prototype.remove.apply(this,arguments),this},dirProp:function(e,t){return this.direction&HORIZONTAL?e:t},renderFrame:function(e,t){t&View.CHILDREN_INVALID&&(this._createChildren(),t&=~View.CHILDREN_INVALID),this.attached?(t&View.SIZE_INVALID&&this._measure(),t&(View.LAYOUT_INVALID|View.SIZE_INVALID)&&this._scrollBy(this._delta,this.skipTransitions)):t&&this.listenToOnce(this,"view:attached",function(){this.requestRender(t)})},setEnabled:function(e){this._enabled!==e&&(this._enabled=e,this._togglePointerEvents(e),this.setImmediate(this._renderEnabled))},_renderEnabled:function(){this.el.classList.toggle("disabled",!this.enabled),this.itemViews.each(function(e){e.setEnabled(this.enabled)},this)},_createChildren:function(){var e,t,i,s;this.removeChildren(),this.collection.length&&(s={enabled:this.enabled},e=document.createDocumentFragment(),this.requireSelection||(t=this.rendererFunction(null,-1,this.collection),i=new t(s),this.itemViews.add(i),e.appendChild(i.el),this.emptyView=i),this.collection.each(function(r,n,o){s.model=r,t=this.rendererFunction(r,n,o),i=new t(s),this.itemViews.add(i),e.appendChild(i.el)},this),this.adjustToSelection(),this._selectedView.el.classList.add("selected"),this.el.appendChild(e))},removeChildren:function(){this.itemViews.each(this.removeItemView,this),this.emptyView=void 0},removeItemView:function(e){return this.itemViews.remove(e),e.remove(),e},_measure:function(){var e,t,i,s,r=0,n=0,o=0,a=0;i=s=this.emptyView||this.itemViews.first(),this.itemViews.each(function(e){e.render()}),this.itemViews.each(function(t){(e=this.measureItemView(t)).pos=r,r+=e.outer,e.posInner=n,n+=e.inner,t!==this.emptyView&&(e.across>o&&(o=e.across,s=t),e.outer>a&&(a=e.outer,i=t))},this),(t=this.metrics[this.cid]||(this.metrics[this.cid]={})).outer=this.el[this.dirProp("offsetWidth","offsetHeight")],t.before=i.el[this.dirProp("offsetLeft","offsetTop")],t.inner=i.el[this.dirProp("offsetWidth","offsetHeight")],t.after=t.outer-(t.inner+t.before),t.across=o,this._tapAcrossBefore=s.el[this.dirProp("offsetTop","offsetLeft")],this._tapAcrossAfter=this._tapAcrossBefore+o,this._tapBefore=t.before+this._tapGrow,this._tapAfter=t.before+t.inner-this._tapGrow,this.selectThreshold=Math.min(MAX_SELECT_THRESHOLD,.1*t.outer)},measureItemView:function(e){var t,i;return i=e.el,(t=this.metrics[e.cid]||(this.metrics[e.cid]={})).outer=i[this.dirProp("offsetWidth","offsetHeight")],t.across=i[this.dirProp("offsetHeight","offsetWidth")],e.metrics?(t.before=e.metrics[this.dirProp("marginLeft","marginTop")],t.outer+=t.before,t.outer+=e.metrics[this.dirProp("marginRight","marginBottom")],t.inner=e.metrics.content[this.dirProp("width","height")],t.before+=e.metrics.content[this.dirProp("x","y")],t.after=t.outer-(t.inner+t.before)):(console.warn("%s::measureItemView view '%s' has no metrics",this.cid,e.cid),t.inner=t.outer,t.after=t.before=0),t},_delta:0,_scrolling:!1,_setScrolling:function(e){this._scrolling!=e&&(this._scrolling=e,this.el.classList.toggle("scrolling",e),this.trigger(e?"view:scrollstart":"view:scrollend"))},scrollBy:function(e,t){this._delta=e||0,this.skipTransitions=!!t,this.requestRender(View.LAYOUT_INVALID)},_scrollBy:function(e,t){var i,s,r;i=this.metrics[(this._scrollCandidateView||this._selectedView).cid],this.itemViews.each(function(t){s=this.metrics[t.cid],r=Math.floor(this._getScrollOffset(e,s,i)),t.metrics.translateX=this.direction&HORIZONTAL?r:0,t.metrics.translateY=this.direction&HORIZONTAL?0:r,t.metrics._transform=translateTemplate(t.metrics.translateX,t.metrics.translateY),t.el.style[transformProperty]=t.metrics._transform},this),this.el.classList.toggle("skip-transitions",t),this.selectFromView()},_getScrollOffset:function(e,t,i){var s,r=0;return(s=t.pos-i.pos+e)<0?Math.abs(s)<i.outer?r+=-t.after/i.outer*s:r+=t.after:0<=s&&(Math.abs(s)<i.outer?r-=t.before/i.outer*s:r-=t.before),s+r},_onScrollTransitionEnd:function(e){e.propertyName===transformStyleName&&this.scrolling&&(this.cid,e.target.cid,this._setScrolling(!1))},_togglePointerEvents:function(e){this._pointerEventsEnabled!=e&&(this._pointerEventsEnabled=e,e?(this.touch.on("hpanstart hpanmove hpanend hpancancel",this._onPointerEvent),this.el.addEventListener(View.CLICK_EVENT,this._onClick,!0)):(this.touch.off("hpanstart hpanmove hpanend hpancancel",this._onPointerEvent),this.el.removeEventListener(View.CLICK_EVENT,this._onClick,!0)))},_onPointerEvent:function(e){if("pointercancel"!==e.srcEvent.type)switch(this.cid,e.type,e.srcEvent.type,dirToStr(e.offsetDirection),dirToStr(e.direction),dirToStr(this.direction),dirToStr(e.direction|this.direction),e.srcEvent.defaultPrevented,e.type){case"hpanstart":return this._onPanStart(e);case"hpanmove":return this._onPanMove(e);case"hpanend":case"hpancancel":return this._onPanFinal(e)}},getViewAtPanDir:function(e){return e&this._followingDir?this._precedingView:this._followingView},_onPanStart:function(e){this.selectFromView(),this.el.classList.add("panning"),this._setScrolling(!0)},_onPanMove:function(e){var t=this.direction&HORIZONTAL?e.deltaX:e.deltaY,i=this.getViewAtPanDir(e.offsetDirection),s=this._panCandidateView;s!==i&&(s&&s.el.classList.remove("candidate"),i&&i.el.classList.add("candidate"),this._panCandidateView=i),void 0===s&&(t*=Globals.HPAN_OUT_DRAG),-1!==this._renderRafId?(this.scrollBy(t,Carousel.IMMEDIATE),this.renderNow()):this._scrollBy(t,Carousel.IMMEDIATE)},_onPanFinal:function(e){var t,i=this.direction&HORIZONTAL?e.deltaX:e.deltaY;"hpanend"==e.type&&e.direction^e.offsetDirection^this.direction&&Math.abs(i)>this.selectThreshold&&(t=this.getViewAtPanDir(e.offsetDirection)),this._scrollCandidateView=t||void 0,this._panCandidateView&&this._panCandidateView!==t&&this._panCandidateView.el.classList.remove("candidate"),this._panCandidateView=void 0,this.el.classList.remove("panning"),this.cid,e.type,Math.abs(i),this.selectThreshold,dirToStr(e.direction),dirToStr(e.offsetDirection),dirToStr(this.direction),dirToStr(e.direction^e.offsetDirection^this.direction),t&&(t.cid,t.model.cid),this.scrollBy(0,Carousel.ANIMATED),this.selectFromView()},_tapGrow:10,getViewAtTapPos:function(e,t){if(this._tapAcrossBefore<t&&t<this._tapAcrossAfter){if(e<this._tapBefore)return this._precedingView;if(e>this._tapAfter)return this._followingView}},_onClick:function(e){this.cid,e.type,e.defaultPrevented,this._onTap(e)},_onTap:function(e){if(!e.defaultPrevented){var t,i=View.findByDescendant(e.target);do{if(this._selectedView===i){t=null;break}if(this===i.parentView){t=i;break}if(this===i){var s,r,n;s=this.el.getBoundingClientRect(),r=("tap"===e.type?e.center.x:e.clientX)-s.left,n=("tap"===e.type?e.center.y:e.clientY)-s.top,t=this.getViewAtTapPos(this.dirProp(r,n),this.dirProp(n,r));break}}while(i=i.parentView);t&&(e.preventDefault(),this._scrollCandidateView=t,this._setScrolling(!0),this.scrollBy(0,Carousel.ANIMATED),this.triggerSelectionEvents(t,!0))}},triggerSelectionEvents:function(e,t){void 0===e||this._internalSelection||(this._internalSelection=!!t,e===this.emptyView?this.trigger("view:select:none"):this.trigger("view:select:one",e.model),this._internalSelection=!1)},selectFromView:function(){this._scrollCandidateView&&this.triggerSelectionEvents(this._scrollCandidateView,!0)},adjustToSelection:function(){var e,t=this.collection.selectedIndex;this.requireSelection?(-1==t&&t++,this._selectedView=(e=this.collection.at(t))&&this.itemViews.findByModel(e),this._precedingView=(e=this.collection.at(t-1))&&this.itemViews.findByModel(e),this._followingView=(e=this.collection.at(t+1))&&this.itemViews.findByModel(e)):(this._selectedView=(e=this.collection.at(t))?this.itemViews.findByModel(e):this.emptyView,this._precedingView=e&&((e=this.collection.at(t-1))?this.itemViews.findByModel(e):this.emptyView),this._followingView=(e=this.collection.at(t+1))&&this.itemViews.findByModel(e))},_onSelectOne:function(e){e!==this._selectedView.model&&this._onSelectAny(e)},_onSelectNone:function(){(this.requireSelection?this.itemViews.first():this.emptyView)!==this._selectedView&&this._onSelectAny()},_onSelectAny:function(e){this._selectedView.el.classList.remove("selected"),this.adjustToSelection(),this._selectedView.el.classList.add("selected"),this._scrollCandidateView&&(this._scrollCandidateView.el.classList.remove("candidate"),this._scrollCandidateView=void 0),this._internalSelection||(this._setScrolling(!0),this.scrollBy(0,Carousel.ANIMATED))},_onReset:function(){this.requestRender(View.CHILDREN_INVALID|View.MODEL_INVALID)}};module.exports=Carousel=View.extend(CarouselProto,Carousel);

}).call(this,require("underscore"))

},{"app/control/Globals":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/control/Globals.js","app/view/base/View":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/base/View.js","app/view/render/CarouselRenderer":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/CarouselRenderer.js","backbone.babysitter":"backbone.babysitter","hammerjs":"hammerjs","underscore":"underscore","utils/prefixedProperty":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/prefixedProperty.js","utils/prefixedStyleName":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/prefixedStyleName.js","utils/touch/SmoothPanRecognizer":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/touch/SmoothPanRecognizer.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/component/CollectionStack.hbs":[function(require,module,exports){
"use strict";var HandlebarsCompiler=require("hbsfy/runtime");module.exports=HandlebarsCompiler.template({compiler:[7,">= 4.0.0"],main:function(e,l,n,a,r){var i;return e.escapeExpression("function"==typeof(i=null!=(i=n.id||(null!=l?l.id:l))?i:n.helperMissing)?i.call(null!=l?l:e.nullContext||{},{name:"id",hash:{},data:r}):i)},useData:!0});

},{"hbsfy/runtime":"hbsfy/runtime"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/component/CollectionStack.js":[function(require,module,exports){
"use strict";var View=require("app/view/base/View"),viewTemplate=require("./CollectionStack.hbs");module.exports=View.extend({cidPrefix:"stack",tagName:"div",className:"stack",template:viewTemplate,events:{transitionend:function(t){this._renderContent()}},initialize:function(t){this._enabled=!0,this._skipTransitions=!0,this._contentInvalid=!0,t.template&&(this.template=t.template),this.content=document.createElement("div"),this.content.className="stack-item",this.el.appendChild(this.content),this.listenTo(this.collection,"select:one select:none",this._onSelectChange)},setEnabled:function(t){this._enabled!==t&&(this._enabled=t,this.el.classList.toggle("disabled",!this._enabled))},_onSelectChange:function(t){if(this._renderedItem===this.collection.selected)throw new Error("change event received but item is identical");this._renderedItem=this.collection.selected,this._contentInvalid=!0,this.render()},render:function(){return this._skipTransitions?(this._skipTransitions=!1,this.el.classList.add("skip-transitions"),this.setImmediate(function(){this.el.classList.remove("skip-transitions")}),this._contentInvalid&&this._renderContent()):this._contentInvalid&&this.content.classList.remove("current"),this},_renderContent:function(){if(this._contentInvalid){this._contentInvalid=!1;var t=this.collection.selected;this.content.innerHTML=t?this.template(t.toJSON()):"",this.content.classList.add("current")}}});

},{"./CollectionStack.hbs":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/component/CollectionStack.hbs","app/view/base/View":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/base/View.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/component/FilterableListView.js":[function(require,module,exports){
(function (_){
"use strict";var Container=require("backbone.babysitter"),View=require("app/view/base/View"),ClickableRenderer=require("app/view/render/ClickableRenderer"),prefixedProperty=require("utils/prefixedProperty"),getBoxEdgeStyles=require("utils/css/getBoxEdgeStyles"),diff=require("utils/array/difference"),resolveAll=require("utils/promise/resolveAll"),rejectAll=require("utils/promise/rejectAll"),translateCssValue=require("app/control/Globals").TRANSLATE_TEMPLATE,transformProp=prefixedProperty("transform"),FilterableListView=View.extend({cidPrefix:"filterableList",tagName:"ul",className:"list selectable filterable",defaults:{collapsed:!0,filterFn:function(){return!0},renderer:ClickableRenderer.extend({cidPrefix:"listItem",className:"list-item list-node"})},properties:{collapsed:{get:function(){return this._collapsed},set:function(e){this._setCollapsed(e)}},selectedItem:{get:function(){return this._selectedItem},set:function(e){this._setSelection(e)}},filteredItems:{get:function(){return this._filteredItems}},metrics:{get:function(){return this._metrics}}},events:{"transitionend .list-node":function(e){e.propertyName==transformProp&&e.target.parentElement===this.el&&this._changedPosNum--,this._collapsedChanging&&0==this._changedPosNum&&(this.cid,e.type,e.propertyName,this._collapsePromises.length,this._collapsedChanging=!1,this.el.classList.remove("collapsed-changing"),resolveAll(this._collapsePromises,this))}},initialize:function(e){this._filteredItems=[],this._filteredIncoming=[],this._filteredOutgoing=[],this._metrics={},this._itemMetrics=[],this._collapsePromises=[],this.itemViews=new Container,_.defaults(e,this.defaults),this.renderer=e.renderer,this._filterFn=e.filterFn,this.collection.each(this.createItemView,this),this._setSelection(this.collection.selected),this._setCollapsed(e.collapsed),this.refreshFilter(),this.listenTo(this.collection,"reset",function(){throw this._allItems=null,new Error("not implemented")}),this.cid,this.attached,this.once("view:attached",function(e){e.cid,e.attached,e.skipTransitions=!0,e.el.classList.add("skip-transitions"),e.setImmediate(function(){e.renderNow()})})},_getAllItems:function(){return this._allItems||(this._allItems=this.collection.slice())},_whenCollapseChangeEnds:function(){if(this._collapsedChanged){var e=this;return new Promise(function(t,i){e.on("view:render:after",t)})}return Promise.resolve(this)},whenCollapseChangeEnds:function(){var e,t;return this._collapsedChanging||this._collapsedChanged?(e={},t=new Promise(function(t,i){e.resolve=t,e.reject=i}),this._collapsePromises.push(e)):t=Promise.resolve(this),t},renderFrame:function(e,t){if(this._collapsedChanging&&(console.warn("%s::renderFrame collapsed tx interrupted",this.cid),this._collapsedChanging=!1,this.el.classList.remove("collapsed-changing"),rejectAll(this._collapsePromises,this)),this.skipTransitions&&(this.el.classList.add("skip-transitions"),this.setImmediate(function(){this.skipTransitions=!1,this.el.classList.remove("skip-transitions")})),this._collapsedChanged&&(this._collapsedChanged=!1,t|=View.SIZE_INVALID,this.el.classList.toggle("collapsed",this._collapsed),this.skipTransitions?(this._collapsedChanging=!1,this.once("view:render:after",function(e){this._changedPosNum=0,resolveAll(e._collapsePromises,e)})):(this._collapsedChanging=!0,this.el.classList.add("collapsed-changing")),this.cid,this._collapsePromises.length,this._collapsedChanging),this._selectionChanged&&(this._selectionChanged=!1,t|=View.LAYOUT_INVALID,this.renderSelection(this.collection.selected,this.collection.lastSelected)),this._filterChanged){this._filterChanged=!1,t|=View.LAYOUT_INVALID;this.filteredItems;this.computeFilter(),this.applyFilter()}t&View.SIZE_INVALID&&this.measure(),t&(View.LAYOUT_INVALID|View.SIZE_INVALID)&&this.renderLayout()},measure:function(){this._metrics=getBoxEdgeStyles(this.el,this._metrics),this.itemViews.forEach(function(e){e._metrics||(e._metrics={}),e._metrics.offsetTop=e.el.offsetTop,e._metrics.offsetHeight=e.el.offsetHeight,e._metrics.offsetLeft=e.el.offsetLeft,e._metrics.offsetWidth=e.el.offsetWidth,!this._collapsed&&e.label?(e._metrics.textLeft=e.label.offsetLeft,e._metrics.textWidth=e.label.offsetWidth):(e._metrics.textLeft=e._metrics.offsetLeft,e._metrics.textWidth=e._metrics.offsetWidth)},this)},renderLayout:function(){var e,t,i,s;e=this._metrics.paddingLeft,t=this._metrics.paddingTop,this._changedPosNum=0;for(var l=0,r=this.el.children.length;l<r;l++){var n=this.itemViews.findByCid(this.el.children[l].cid);i=n.transform.tx,s=n.transform.ty,(this.collection.selected&&!n.model.selected||n.el.classList.contains("excluded"))&&this._collapsed?(n.transform.tx=e,n.transform.ty=t):(0==n._metrics.offsetHeight&&(t-=n._metrics.offsetTop),n.transform.tx=e,n.transform.ty=t,t+=n._metrics.offsetHeight+n._metrics.offsetTop),n.el.style[transformProp]=translateCssValue(n.transform.tx,n.transform.ty),n.transform.tx==i&&n.transform.ty==s||this._changedPosNum++}this._metrics.height=Math.max(0,t+this._metrics.paddingBottom),this.el.style.height=this._metrics.height+"px"},createItemView:function(e,t){var i=new this.renderer({model:e,el:this.el.querySelector('.list-item[data-id="'+e.id+'"]')});return this.listenTo(i,"renderer:click",this._onRendererClick),this.itemViews.add(i),i},_onRendererClick:function(e,t){this._collapsedChanging||this._collapsed&&e.get("excluded")||(this.collection.selected!==e?this.trigger("view:select:one",e):t.altKey?this.trigger("view:select:none"):this.trigger("view:select:same",e))},_collapsed:void 0,_setCollapsed:function(e){e!==this._collapsed&&(this._collapsed=e,this._collapsedChanged=!0,this.requestRender())},_selectedItem:void 0,_setSelection:function(e){e!==this._selectedItem&&(this._selectedItem=e,this._selectionChanged=!0,this.requestRender(View.MODEL_INVALID))},renderSelection:function(e,t){t&&this.itemViews.findByModel(t).el.classList.remove("selected"),e&&this.itemViews.findByModel(e).el.classList.add("selected"),this.el.classList.toggle("has-selected",null!==this.selectedItem)},refreshFilter:function(){this._filterFn&&(this._filterChanged=!0,this.requestRender(View.MODEL_INVALID))},computeFilter:function(){var e,t,i,s;this._filteredIncoming.length=0,this._filteredOutgoing.length=0,e=this._filterFn?this.collection.filter(this._filterFn,this):this._getAllItems(),t=this._filteredItems,i=!(!e||!e.length),s=!(!t||!t.length),i&&diff(s?t:this._getAllItems(),e,this._filteredIncoming),s&&diff(i?e:this._getAllItems(),t,this._filteredOutgoing),this._filteredItems=e},applyFilter:function(){this._filteredIncoming.forEach(function(e){this.itemViews.findByModel(e).el.classList.add("excluded"),e.set("excluded",!0)},this),this._filteredOutgoing.forEach(function(e){this.itemViews.findByModel(e).el.classList.remove("excluded"),e.set("excluded",!1)},this),this.el.classList.toggle("has-excluded",this.filteredItems.length>0)}});module.exports=FilterableListView;

}).call(this,require("underscore"))

},{"app/control/Globals":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/control/Globals.js","app/view/base/View":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/base/View.js","app/view/render/ClickableRenderer":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/ClickableRenderer.js","backbone.babysitter":"backbone.babysitter","underscore":"underscore","utils/array/difference":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/array/difference.js","utils/css/getBoxEdgeStyles":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/css/getBoxEdgeStyles.js","utils/prefixedProperty":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/prefixedProperty.js","utils/promise/rejectAll":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/promise/rejectAll.js","utils/promise/resolveAll":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/promise/resolveAll.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/component/GraphView.js":[function(require,module,exports){
(function (_){
"use strict";var _dStyles,applyFn,debouncedLog,Color=require("color"),CanvasView=require("app/view/base/CanvasView"),Globals=require("app/control/Globals"),calcArcHConnector=require("utils/canvas/calcArcHConnector"),CanvasHelper=require("utils/canvas/CanvasHelper"),inflateRect=require("utils/geom/inflateRect"),styleBase={lineCap:"butt",lineWidth:.75,lineDashOffset:0,setLineDash:[[]]},paramsBase={radiusBase:1.25,radiusIncrement:.21,outlineWidth:3,arrowSize:.4},getRectDirX=function(t,e){return t.right<e.left?1:e.right<t.left?-1:0},GraphView=CanvasView.extend({cidPrefix:"graph",tagName:"canvas",className:"graph",defaultKey:"a2b",defaults:{values:{a2b:0,b2a:0},maxValues:{a2b:1,b2a:1}},initialize:function(t){CanvasView.prototype.initialize.apply(this,arguments),this._listA=t.listA,this._listB=t.listB,this._a2b={srcView:t.listA,destView:t.listB,s:_.defaults({lineWidth:.7},styleBase,paramsBase),p:_.defaults({},paramsBase),strokeStyleFn:function(t,e,i){return Color(i).mix(e,.1).hex()}},this._b2a={srcView:t.listB,destView:t.listA,s:_.defaults({lineWidth:.7},styleBase,paramsBase),p:_.defaults({},paramsBase),strokeStyleFn:function(t,e,i){return Color(t).mix(e,.4).hex()}}},measureCanvas:function(t,e,i){this.cid,i.height,this.el.offsetHeight,this.el.scrollHeight,this.el.clientHeight},updateCanvas:function(){this._updateMetrics(),this._updateStyles()},_updateStyles:function(){var t,e,i;this.model.has("bundle")?(t=this.model.get("bundle"),i=Color(t.colors.lnColor),e=Color(t.colors.bgColor)):(e=Color(Globals.DEFAULT_COLORS["background-color"]),i=Color(Globals.DEFAULT_COLORS["link-color"])),this._a2b.s.strokeStyle=this._a2b.s.fillStyle=this._a2b.strokeStyleFn(this._color,e,i),this._b2a.s.strokeStyle=this._b2a.s.fillStyle=this._b2a.strokeStyleFn(this._color,e,i)},_setStyle:function(t){"string"==typeof t&&(t=this._styleData[t]),CanvasView.setStyle(this._ctx,t)},_updateMetrics:function(){var t,e,i,s,a,n,o,r;for(this._rootFontSize=parseFloat(getComputedStyle(document.documentElement).fontSize),t=this.el.getBoundingClientRect(),this._ctx.setTransform(this._canvasRatio,0,0,this._canvasRatio,-(t.left+window.pageXOffset)*this._canvasRatio-.5,-(t.top+window.pageYOffset)*this._canvasRatio-.5),a=this._a2b.srcView.el.getBoundingClientRect(),n=this._a2b.destView.el.getBoundingClientRect(),this._a2b.qx=getRectDirX(a,n),s=this._listA.el.querySelectorAll(".label"),o=a.left+window.pageXOffset,e=0,i=s.length;e<i;e++)o=Math.max(o,s[e].getBoundingClientRect().right+window.pageXOffset);for(this._a2b.xMin=o,s=this._listB.el.querySelectorAll(".label"),r=n.left+window.pageXOffset,e=0,i=s.length;e<i;e++)r=Math.min(r,s[e].getBoundingClientRect().left+window.pageXOffset);this._a2b.destMinX=r,this._b2a.qx=-this._a2b.qx,this._b2a.xMin=this._a2b.destMinX,this._b2a.destMinX=this._a2b.xMin},redraw:function(t,e,i){this._clearCanvas(0,0,this._canvasWidth,this._canvasHeight),t.save(),this._redraw_fromElements(t,e,i),t.restore()},_redraw_fromElements:function(t,e,i){var s,a;i&(CanvasView.SIZE_INVALID|CanvasView.MODEL_INVALID)&&(this.cid,e.valuesChanged,CanvasView.flagsToString(i),this._a2b.connectorsOut=this._a2b.connectors,this._b2a.connectorsOut=this._b2a.connectors,this._b2a.connectors=this._computeConnectors(this._b2a),this._a2b.connectors=this._computeConnectors(this._a2b),this._labelOverlays=this._computeLabelOverlays(this._listB)),s=e.getRenderedValue("b2a")/e.getOption("b2a","max"),a=e.getRenderedValue("a2b")/e.getOption("a2b","max"),this._drawConnectors(this._b2a.connectors,this._b2a.s,s,1),this._drawConnectors(this._b2a.connectorsOut,this._b2a.s,1-s,1),this._drawConnectors(this._a2b.connectors,this._a2b.s,a,2),this._drawLabelOverlays(this._labelOverlays)},_computeLabelOverlays:function(t){var e,i,s,a={rects:[]},n=t.el.querySelectorAll(".list-group .label span");for(e=0,i=n.length;e<i;e++)(s=_.clone(n[e].getBoundingClientRect())).top+=window.pageYOffset,s.left+=window.pageXOffset,a.rects[e]=s;return a},_drawLabelOverlays:function(t){this._ctx.save(),this._ctx.globalAlpha=.85,this._ctx.globalCompositeOperation="destination-out",t.rects.forEach(function(t){this._ctx.fillRect(t.left,t.top,t.width,t.height)},this),this._ctx.restore()},_computeConnectors:function(t){var e,i,s=t.xMin,a=t.destMinX,n=t.qx;e=this._roundTo(t.s.radiusBase*this._rootFontSize,.5),i=this._roundTo(t.s.radiusIncrement*this._rootFontSize,.5);var o,r,l,c,h,d,_,f=[];if(t.srcView.collection.selected&&t.destView.filteredItems){var u=t.srcView.itemViews.findByModel(t.srcView.collection.selected).label.getBoundingClientRect();for(c=u.left,h=u.top+u.height/2,n>0&&(c+=u.width),c+=window.pageXOffset,h+=window.pageYOffset,_=t.destView.filteredItems,l=t.destView.filteredItems.length,o=0;o<l;o++)r={},u=t.destView.itemViews.findByModel(_[o]).label.getBoundingClientRect(),r.x2=u.left,r.y2=u.top+u.height/2,n<0&&(r.x2+=u.width),r.x2+=window.pageXOffset,r.y2+=window.pageYOffset,r.x1=c,r.y1=h,r.qx=n,f[o]=r;f.sort(function(t,e){return t.y2-e.y2});var w,g=0,x=l*i*.5;for(o=0;o<l;o++)w=(o-(l-1)/2)*i,(r=f[o]).cy1=r.y1+w,r.cy2=r.y2,r.r0=Math.abs(w),r.cx0=r.x1+(x-r.r0)*n,r.di=r.cy1-r.y2>0?o:l-(o+1),g=Math.max(g,r.di);var b=(Math.abs(a-s)-(x+g*i))/2;for(e=Math.max(0,Math.min(e,b)),o=0;o<l;o++)(r=f[o]).r1=r.di*i+e,r.r2=e,r.cx1=s+x*n,r.cx2=a-(g-r.di)*i*n,(d=calcArcHConnector(r.cx1,r.cy1,r.r1,r.cx2,r.cy2,r.r2,.7))?(r.tx1=d[0],r.tx2=d[1]):(r.tx1=r.cx1,r.tx2=r.cx2),r.length=Math.abs(r.x1-r.x2)+Math.abs(r.cy1-r.cy2);f.sort(function(t,e){return t.di-e.di}),f.si=g,f.qx=n,f.sMin=s,f.dMin=a}return f},_drawConnectors:function(t,e,i,s){var a,n,o,r,l,c,h;if(t&&t.length&&i){if(n=t.length,r=e.lineWidth+e.outlineWidth,c=(l=e.arrowSize*this._rootFontSize)+(r-e.lineWidth),h=Math.PI*s,this._setStyle(e),e.outlineWidth){for(this._ctx.save(),this._ctx.globalCompositeOperation="destination-out",this._ctx.lineWidth=r,a=0;a<n;a++)o=t[a],i<1&&(this._ctx.lineDashOffset=o.length*(1+i),this._ctx.setLineDash([o.length,o.length])),this._drawConnector(o,a,t),1==i&&this._drawArrowhead(o.x2,o.y2,c,s*h);this._ctx.restore()}for(a=0;a<n;a++)o=t[a],i<1&&(this._ctx.lineDashOffset=o.length*(1+i),this._ctx.setLineDash([o.length,o.length])),this._drawConnector(o,a,t),1==i&&this._drawArrowhead(o.x2,o.y2,l,s*h)}},_drawArrowhead:function(t,e,i,s){CanvasHelper.arrowhead2(this._ctx,t,e,i,s),this._ctx.stroke()},_drawArrowhead2:function(t,e,i,s){CanvasHelper.arrowhead(this._ctx,t,e,i,s),this._ctx.fill()},_drawConnector:function(t,e,i){this._ctx.beginPath(),this._ctx.moveTo(t.x2,t.cy2),this._ctx.arcTo(t.tx2,t.cy2,t.tx1,t.cy1,t.r2),this._ctx.arcTo(t.tx1,t.cy1,t.cx1,t.cy1,t.r1),this._ctx.arcTo(t.cx0,t.cy1,t.cx0,t.y1,t.r0),this._ctx.stroke()},_roundTo:function(t,e){return e>1&&(e=1/e),Math.round(t/e)*e}});module.exports=GraphView;

}).call(this,require("underscore"))

},{"app/control/Globals":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/control/Globals.js","app/view/base/CanvasView":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/base/CanvasView.js","color":"color","underscore":"underscore","utils/canvas/CanvasHelper":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/canvas/CanvasHelper.js","utils/canvas/calcArcHConnector":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/canvas/calcArcHConnector.js","utils/geom/inflateRect":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/geom/inflateRect.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/component/GroupingListView.js":[function(require,module,exports){
(function (_){
"use strict";var FilterableListView=require("app/view/component/FilterableListView"),ClickableRenderer=require("app/view/render/ClickableRenderer"),LabelRenderer=require("app/view/render/LabelRenderer"),GroupingListView=FilterableListView.extend({cidPrefix:"groupingList",tagName:"dl",className:"grouped",_groupingFn:null,defaults:_.defaults({renderer:ClickableRenderer.extend({cidPrefix:"groupingListItem",tagName:"dl",className:"list-item list-node"}),groupingRenderer:LabelRenderer.extend({cidPrefix:"groupingListGroup",tagName:"dt",className:"list-group list-node"}),groupingFn:null},FilterableListView.prototype.defaults),properties:{groups:{get:function(){return this._groups}},filteredGroups:{get:function(){return this._filteredGroups}}},initialize:function(e){FilterableListView.prototype.initialize.apply(this,arguments),this._groups=[],this._filteredGroups=[],this._changedFilteredGroups=[],this._groupsByItemCid={},this._groupingFn=e.groupingFn,this.groupingRenderer=e.groupingRenderer,this._computeGroups(),this._groupingFn&&this._groups.forEach(this.createGroupingView,this)},_computeGroups:function(){this._groups.length=0,this._groupingFn?this.collection.forEach(function(e){var i,t;(t=this._groupingFn.apply(null,arguments))&&-1==(i=this._groups.indexOf(t))&&(i=this._groups.length,this._groups[i]=t),this._groupsByItemCid[e.cid]=t},this):this.collection.forEach(function(e){this._groupsByItemCid[e.cid]=null},this)},createGroupingView:function(e){var i=new this.groupingRenderer({model:e,el:this.el.querySelector('.list-group[data-id="'+e.id+'"]')});return this.itemViews.add(i),i},computeFilter:function(){FilterableListView.prototype.computeFilter.apply(this,arguments),this._groupingFn&&(0==this._filteredItems.length?this._filteredGroups=this._groups.concat():this._filteredGroups=_.uniq(this._filteredItems.map(function(e){return this._groupsByItemCid[e.cid]},this)))},applyFilter:function(){FilterableListView.prototype.applyFilter.apply(this,arguments),this._groups.forEach(function(e){this.itemViews.findByModel(e).el.classList.toggle("excluded",-1==this._filteredGroups.indexOf(e))},this)}});module.exports=GroupingListView;

}).call(this,require("underscore"))

},{"app/view/component/FilterableListView":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/component/FilterableListView.js","app/view/render/ClickableRenderer":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/ClickableRenderer.js","app/view/render/LabelRenderer":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/LabelRenderer.js","underscore":"underscore"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/component/PlayToggleSymbol.js":[function(require,module,exports){
(function (_){
"use strict";var CanvasView=require("app/view/base/CanvasView"),Color=require("color"),stackBlurRGB=require("utils/canvas/bitmap/stackBlurRGB"),getAverageRGB=require("utils/canvas/bitmap/getAverageRGB"),multiply=require("utils/canvas/bitmap/multiply"),desaturate=require("utils/canvas/bitmap/desaturate"),roundRect=require("utils/canvas/CanvasHelper").roundRect,easeIn=require("utils/ease/fn/easeInQuad"),easeOut=require("utils/ease/fn/easeOutQuad"),PI2=2*Math.PI,LOOP_OFFSET=1.833333,INTEP_MS=require("app/control/Globals").TRANSITION_DURATION,FILTER_REFRESH_THRESHOLD=.5,FILTER_SCALE=1.5,FILTER_RADIUS=30,FILTER_MULTIPLY=.1,PlayToggleSymbol={PLAY:"playing",PAUSE:"paused",WAITING:"waiting",ENDED:"ended"};module.exports=CanvasView.extend({cidPrefix:"playToggleSymbol",className:"play-toggle",defaults:{values:{_loop:0,_arc:0},maxValues:{_loop:1},color:"rgba(255,255,255,1.0)",backgroundColor:"rgba(0,0,0,0.25)",paused:!0,symbolName:""},properties:{symbolName:{get:function(){return this._symbolName},set:function(e){this._setSymbolName(e)}}},initialize:function(e){CanvasView.prototype.initialize.apply(this,arguments),this._options=_.extend(this._options,_.pick(e,"symbolName","borderRadius","borderWidth")),this.symbolName=this._options.symbolName},measureCanvas:function(e,a,t){this._canvasHeight=this._canvasWidth=Math.min(e,a)},updateCanvas:function(e,a){var t=this._getFontMetrics(this._fontFamily);this._baselineShift=t?(t.ascent+t.descent)/t.unitsPerEm:.7,this._baselineShift*=.5*this._fontSize,this._baselineShift=Math.round(this._baselineShift),this._canvasOffsetX=this._canvasOffsetY=this._canvasWidth/2,this._radius=this._canvasWidth/2*Math.SQRT1_2*Math.SQRT1_2*Math.SQRT1_2,this._side=this._radius,this._ctx.setTransform(1,0,0,1,this._canvasOffsetX,this._canvasOffsetY),this._ctx.lineWidth=this._radius*(1-Math.SQRT1_2),this._ctx.shadowColor="rgba(0,0,0,0.75)",this._ctx.shadowBlur=1,this._ctx.shadowOffsetX=2,this._ctx.shadowOffsetY=2,this._isImageDataInvalid=!0},_symbolName:"",_setSymbolName:function(e){this._symbolName!==e&&(this._lastSymbolName=this._symbolName,this._symbolName=e,this.refreshImageSource(),this.requestRender(CanvasView.LAYOUT_INVALID),this.attached?this.parentView.cid:this.cid,this._symbolName,this._lastSymbolName,this.paused)},_imageSource:null,setImageSource:function(e){this._imageSource!==e&&(this._imageSource=e,this._isImageDataInvalid=!0,this.requestRender(CanvasView.SIZE_INVALID))},_imageDataTC:null,refreshImageSource:function(e){!this._isImageDataInvalid&&this._imageSource instanceof HTMLVideoElement&&(_.isNumber(e)||(e=FILTER_REFRESH_THRESHOLD),e<Math.abs(this._imageDataTC-this._imageSource.currentTime)&&(this._isImageDataInvalid=!0,this.requestRender(CanvasView.SIZE_INVALID)))},_imageData:null,_updateImageData:function(){if(null===this._imageSource)return this._imageData=null,void(this._imageDataTC=null);var e,a,t,i,s,h;a=this._imageSource.getBoundingClientRect(),i=this.el.getBoundingClientRect(),this._imageSource instanceof HTMLVideoElement?(e=this._imageSource.videoWidth/a.width,s=this._imageSource.currentTime):(e=this._imageSource.naturalWidth/a.width,s=0),t=e*FILTER_SCALE,this._ctx.save(),this._ctx.setTransform(1,0,0,1,0,0),this._ctx.drawImage(this._imageSource,(i.left-a.left)*e+i.width/2*e-i.width/2*t,(i.top-a.top)*e+i.height/2*e-i.height/2*t,i.width*t,i.height*t,0,0,this.el.width,this.el.height),h=this._ctx.getImageData(0,0,this.el.width,this.el.height),this._ctx.clearRect(0,0,this.el.width,this.el.height),this._ctx.restore(),this._color="black",h=multiply(h,1+FILTER_MULTIPLY),h=stackBlurRGB(h,FILTER_RADIUS),this._imageData=h,this._imageDataTC=s},redraw:function(e,a,t){this._clearCanvas(),"waiting"===this._symbolName?0===a.getTargetValue("_arc")&&a.valueTo("_arc",1,0*INTEP_MS,easeIn).updateValue("_arc"):1===a.getTargetValue("_arc")&&a.valueTo("_arc",0,0*INTEP_MS,easeOut).updateValue("_arc");var i=a.getRenderedValue("_arc");i>0&&!a.paused&&a.isAtTarget("_loop")&&a.valueTo("_loop",0,0).valueTo("_loop",1,2*INTEP_MS).updateValue("_loop");var s=a.getRenderedValue("_loop");if(i>0){var h=i*(2*(s<.5?s%.5:.5-s%.5))*.25+.125*i+1e-4,l=s+LOOP_OFFSET;e.beginPath(),e.arc(0,0,this._radius,(1-h+l)*PI2,(h+l)*PI2,!1),e.stroke()}switch(this._symbolName){case"replay":case"ended":case"play":this.drawPlay(e,this._side),e.fill();break;case"pause":this.drawPause(e,this._side),e.fill();break;case"waiting":switch(this._lastSymbolName){case"replay":case"ended":case"play":this.drawPlay(e,(1-i)*this._side),e.fill();break;case"pause":this.drawPause(e,(1-i)*this._side),e.fill()}}},drawPlay:function(e,a){var t=(1-Math.SQRT1_2)*a;e.beginPath(),e.moveTo(t+a,0),e.lineTo(t-a,-a),e.lineTo(t-a,a),e.closePath()},drawPause:function(e,a){var t=.75*a,i=2*a;e.beginPath(),e.rect(-a,-a,t,i),e.rect(a-t,-a,t,i),e.closePath()},drawLabel:function(e){var a=this._ctx.measureText(e).width;this._ctx.fillText(e,-.5*a,this._baselineShift,a)}},PlayToggleSymbol);

}).call(this,require("underscore"))

},{"app/control/Globals":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/control/Globals.js","app/view/base/CanvasView":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/base/CanvasView.js","color":"color","underscore":"underscore","utils/canvas/CanvasHelper":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/canvas/CanvasHelper.js","utils/canvas/bitmap/desaturate":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/canvas/bitmap/desaturate.js","utils/canvas/bitmap/getAverageRGB":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/canvas/bitmap/getAverageRGB.js","utils/canvas/bitmap/multiply":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/canvas/bitmap/multiply.js","utils/canvas/bitmap/stackBlurRGB":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/canvas/bitmap/stackBlurRGB.js","utils/ease/fn/easeInQuad":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/ease/fn/easeInQuad.js","utils/ease/fn/easeOutQuad":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/ease/fn/easeOutQuad.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/component/SelectableListView.js":[function(require,module,exports){
"use strict";var View=require("app/view/base/View"),Container=require("backbone.babysitter"),DefaultSelectableRenderer=require("app/view/render/DefaultSelectableRenderer"),ClickableRenderer=require("app/view/render/ClickableRenderer"),SelectableListView=View.extend({cidPrefix:"selectableList",tagName:"ul",className:"list selectable",renderer:DefaultSelectableRenderer,initialize:function(e){this._enabled=!0,this._childrenInvalid=!0,e.renderer&&(this.renderer=e.renderer),this.showEmpty=!!e.showEmpty,this.itemViews=new Container,this.listenTo(this.collection,"add remove reset",this._onCollectionChange)},remove:function(){return this.removeChildren(),View.prototype.remove.apply(this,arguments),this},_onCollectionChange:function(e){this._childrenInvalid=!0,this.render()},render:function(){return this._childrenInvalid&&(this._childrenInvalid=!1,this.createChildren()),this},setEnabled:function(e){this._enabled!==e&&(this._enabled=e,this.el.classList.toggle("disabled",!this._enabled))},createChildren:function(){var e,i;this.removeChildren(),this.el.innerHTML="",this.collection.length&&(e=document.createDocumentFragment(),this.showEmpty&&(i=this.createEmptyView(),e.appendChild(i.render().el)),this.collection.each(function(t,n,r){i=this.createItemView(t,n),e.appendChild(i.render().el)},this),this.el.appendChild(e))},createItemView:function(e,i){var t=new this.renderer({model:e});return this.itemViews.add(t),this.listenTo(t,"renderer:click",this.onItemViewClick),t},removeChildren:function(){this.itemViews.each(this.removeItemView,this)},removeItemView:function(e){return this.stopListening(e),this.itemViews.remove(e),e.remove(),e},onItemViewClick:function(e){this.collection.selected!==e&&this._enabled&&this.trigger("view:select:one",e)},createEmptyView:function(){var e=new SelectableListView.EmptyRenderer({model:this.collection});return this.itemViews.add(e),this.listenTo(e,"renderer:click",function(){this._enabled&&this.trigger("view:select:none")}),e}},{EmptyRenderer:ClickableRenderer.extend({tagName:"li",className:"list-item empty-item",initialize:function(e){this.listenTo(this.model,"selected deselected",this.renderClassList),this.renderClassList()},render:function(){return this.el.innerHTML='<a href="#clear"><b> </b></a>',this.renderClassList(),this},renderClassList:function(){this.el.classList.toggle("selected",-1===this.model.selectedIndex)}})});module.exports=SelectableListView;

},{"app/view/base/View":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/base/View.js","app/view/render/ClickableRenderer":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/ClickableRenderer.js","app/view/render/DefaultSelectableRenderer":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/DefaultSelectableRenderer.js","backbone.babysitter":"backbone.babysitter"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/helper/createColorStyleSheet.js":[function(require,module,exports){
(function (_){
"use strict";var Color=require("color"),Globals=require("app/control/Globals"),bundles=require("app/model/collection/BundleCollection");function insertCSSRule(o,r,e){var l="";for(var t in e)l+=t+":"+e[t]+";";o.insertRule(r+"{"+l+"}",o.cssRules.length)}function selfAndDescendant(o,r){return o+" "+r+", "+o+r}var rootStyles=["color","background","background-color"];function initRootStyles(o,r,e,l,t,s,n){var i,c,u,a;insertCSSRule(o,r,i=_.pick(e,rootStyles)),(i={}).color=s.rgb().string(),insertCSSRule(o,r+" a",i),insertCSSRule(o,r+" .color-ln",i),(i={}).color=Color(l).mix(t,.5).rgb().string(),i["border-color"]=Color(l).mix(t,.3).rgb().string(),insertCSSRule(o,r+" .color-fg05",i),u=l.rgb().string(),a=t.rgb().string(),c=r+" .color-reverse",insertCSSRule(o,r+" .color-fg",i={color:u}),insertCSSRule(o,r+" .color-bg",i={"background-color":a}),i={color:a},insertCSSRule(o,selfAndDescendant(c,".color-fg"),i),i={"background-color":u},insertCSSRule(o,selfAndDescendant(c,".color-bg"),i),insertCSSRule(o,r+" .color-stroke",i={stroke:u}),insertCSSRule(o,r+" .color-fill",i={fill:a}),i={stroke:a},insertCSSRule(o,selfAndDescendant(c,".color-stroke"),i),i={fill:u},insertCSSRule(o,selfAndDescendant(c,".color-fill"),i)}var carouselStyles=["box-shadow","border","border-radius"];function initCarouselStyles(o,r,e,l,t,s,n){var i=_.pick(e,carouselStyles);insertCSSRule(o,r+" .media-item .content",i),(i={})["background-color"]=Color(t).mix(l,.05).rgb().string(),insertCSSRule(o,r+" .media-item .color-bg09",i),(i={}).color=t.rgb().string(),i["background-color"]=Color(t).mix(l,.05).rgb().string(),"border-radius"in e&&(i["border-radius"]=e["border-radius"]),insertCSSRule(o,r+" .media-item .placeholder",i),(i={})["background-color"]=t.rgb().string(),insertCSSRule(o,r+" .image-item img",i),insertCSSRule(o,r+" .sequence-item .sequence-step",i),(i={})["text-decoration-color"]=Color(l).mix(t,.7).rgb().string(),insertCSSRule(o,r+" .empty-item A",i)}module.exports=function(){var o,r,e,l,t;o=Globals.DEFAULT_COLORS,r=new Color(Globals.DEFAULT_COLORS.color),e=new Color(Globals.DEFAULT_COLORS["background-color"]),l=new Color(Globals.DEFAULT_COLORS["link-color"]),t=r.luminosity()>e.luminosity();var s=document.createElement("style");s.id="colors",s.type="text/css",document.head.appendChild(s),initRootStyles(s.sheet,".app",o,r,e,l,t),initCarouselStyles(s.sheet,".carousel",o,r,e,l,t),bundles.each(function(n){o=n.attrs(),r=n.colors.fgColor,e=n.colors.bgColor,l=n.colors.lnColor,t=n.colors.hasDarkBg,initRootStyles(s.sheet,".app."+n.get("domid"),o,r,e,l,t),initCarouselStyles(s.sheet,".carousel."+n.get("domid"),o,r,e,l,t)})};

}).call(this,require("underscore"))

},{"app/control/Globals":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/control/Globals.js","app/model/collection/BundleCollection":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/collection/BundleCollection.js","color":"color","underscore":"underscore"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/promise/_loadImageAsObjectURL.js":[function(require,module,exports){
"use strict";window.XMLHttpRequest&&window.URL&&window.Blob?module.exports=function(o,e){return new Promise(function(t,n){var r=new XMLHttpRequest;r.open("GET",o,!0),r.responseType="blob";var s=function(e){var t=new Error((e.target.status>0?"http_"+r.statusText.replace(/\s/g,"_"):e.type+"_event").toUpperCase());return t.logMessage="_loadImageAsObjectURL::"+e.type+" [reject]",t.infoCode=e.target.status,t.infoSrc=o,t.logEvent=e,t};e&&(r.onprogress=function(o){e(o.loaded/o.total,r)}),r.onload=function(o){200==r.status?t(URL.createObjectURL(r.response)):n(s(o))},r.onabort=function(o){t(void 0)},r.onerror=function(o){n(s(o))},r.ontimeout=r.onerror,r.onloadend=function(o){r.onabort=r.ontimeout=r.onerror=void 0,r.onload=r.onloadend=void 0,e&&(r.onprogress=void 0)},r.send()})}:module.exports=function(o,e){return Promise.resolve(o)};

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/promise/_whenImageLoads.js":[function(require,module,exports){
"use strict";module.exports=function(e,r){return new Promise(function(n,o){if(e instanceof window.HTMLImageElement)if(e.complete&&(e.src.length>0||r))n(e);else{var t={load:function(r){a(),n(e)},error:function(r){var n=new Error("Loading failed ("+r.type+" event)");n.infoCode=-1,n.infoSrc=e.src,n.logEvent=r,n.logMessage="_whenImageLoads::"+r.type+" [reject]",a(),o(n)}};t.abort=t.error;var a=function(){for(var r in t)t.hasOwnProperty(r)&&e.removeEventListener(r,t[r],!1)};for(var i in t)t.hasOwnProperty(i)&&e.addEventListener(i,t[i],!1)}else o("Error: not an HTMLImageElement")})};

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/promise/whenDefaultImageLoads.js":[function(require,module,exports){
(function (_){
"use strict";var _whenImageLoads=require("app/view/promise/_whenImageLoads"),_loadImageAsObjectURL=require("app/view/promise/_loadImageAsObjectURL");module.exports=function(e){return new Promise(function(t,a){var n=e.model.get("source");if(n.has("prefetched"))e.defaultImage.src=n.get("prefetched"),_whenImageLoads(e.defaultImage).then(function(a){t(e)});else{e.mediaState="pending";var r=n.get("original"),o=function(t,a){e.updateMediaProgress(t,r)};o=_.throttle(o,100,{leading:!0,trailing:!1}),_loadImageAsObjectURL(r,o).then(function(t){return/^blob\:.*/.test(t)&&n.set("prefetched",t),e.defaultImage.src=t,e.defaultImage}).then(_whenImageLoads).then(function(a){e.on("view:removed",function(){var e=n.get("prefetched");e&&/^blob\:/.test(e)&&(n.unset("prefetched",{silent:!0}),URL.revokeObjectURL(e))}),t(e)},function(e){a(e)})}})};

}).call(this,require("underscore"))

},{"app/view/promise/_loadImageAsObjectURL":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/promise/_loadImageAsObjectURL.js","app/view/promise/_whenImageLoads":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/promise/_whenImageLoads.js","underscore":"underscore"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/promise/whenScrollingEnds.js":[function(require,module,exports){
"use strict";var ViewError=require("app/view/base/ViewError"),whenViewIsAttached=require("app/view/promise/whenViewIsAttached");function whenScrollingEnds(e){return new Promise(function(r,n){var i=e.parentView;if(null===i)console.error("%s::whenScrollingEnds [%s] (sync)",e.cid,"rejected",e.attached),n(new ViewError(e,new Error("whenScrollingEnds: view has no parent")));else if(i.scrolling){var o=function(){i.off("view:scrollend",w),i.off("view:remove",s)},w=function(){o(),r(e)},s=function(){o(),n(new ViewError(e,new Error("whenScrollingEnds: view was removed")))};i.on("view:scrollend",w),i.on("view:remove",s)}else r(e)})}module.exports=function(e){return Promise.resolve(e).then(whenViewIsAttached).then(whenScrollingEnds)};

},{"app/view/base/ViewError":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/base/ViewError.js","app/view/promise/whenViewIsAttached":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/promise/whenViewIsAttached.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/promise/whenSelectionDistanceIs.js":[function(require,module,exports){
"use strict";var ViewError=require("app/view/base/ViewError");module.exports=function(e,n){return new Promise(function(o,r){var i=e.model,t=i.collection,c=function(e){return Math.abs(t.indexOf(i)-t.selectedIndex)<=n};if(c())o(e);else{var s=function(){t.off("select:one select:none",f),e.off("view:removed",w)},f=function(n){c()&&(s(),o(e))},w=function(e){s(),r(new ViewError(e,new Error("whenSelectionDistanceIs: view was removed")))};t.on("select:one select:none",f),e.on("view:removed",w)}})};

},{"app/view/base/ViewError":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/base/ViewError.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/promise/whenSelectionIsContiguous.js":[function(require,module,exports){
"use strict";var whenSelectionDistanceIs=require("app/view/promise/whenSelectionDistanceIs");module.exports=function(e){return whenSelectionDistanceIs(e,1)};

},{"app/view/promise/whenSelectionDistanceIs":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/promise/whenSelectionDistanceIs.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/promise/whenViewIsAttached.js":[function(require,module,exports){
"use strict";module.exports=function(t){return new Promise(function(e,n){t.attached?e(t):t.on("view:attached",function(t){e(t)})})};

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/promise/whenViewIsRendered.js":[function(require,module,exports){
"use strict";module.exports=function(e){return new Promise(function(n,t){e.invalidated?e.once("view:render:after",function(e,t){n(e)}):n(e)})};

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/CarouselRenderer.js":[function(require,module,exports){
(function (_){
"use strict";var View=require("app/view/base/View"),getBoxEdgeStyles=require("utils/css/getBoxEdgeStyles"),CarouselRenderer=View.extend({cidPrefix:"carouselRenderer",tagName:"div",className:"carousel-item",template:_.template('<div class="content sizing"><%= name %></div>'),properties:{content:{get:function(){return this._content||(this._content=this.el.querySelector(".content"))}},sizing:{get:function(){return this._sizing||(this._sizing=this.el.querySelector(".sizing"))}}},initialize:function(t){if(void 0!==this.model.attr("@classname"))for(var e=this.model.attr("@classname").split(" "),i=0;i<e.length;i++)this.el.classList.add(e[i]);t.parentView&&(this.parentView=t.parentView),this.metrics={},this.metrics.content={},this.createChildren(),this.setEnabled(!!t.enabled)},createChildren:function(){this.el.innerHTML=this.template(this.model.toJSON())},getSizingEl:function(){return this._sizing||(this._sizing=this.el.querySelector(".sizing"))},getContentEl:function(){return this._content||(this._content=this.el.querySelector(".content"))},measure:function(){var t=this.getSizingEl();return this.metrics=getBoxEdgeStyles(this.el,this.metrics),this.metrics.content=getBoxEdgeStyles(this.getContentEl(),this.metrics.content),t.style.maxWidth="",t.style.maxHeight="",this.metrics.content.x=t.offsetLeft+t.clientLeft,this.metrics.content.y=t.offsetTop+t.clientTop,this.metrics.content.width=t.clientWidth,this.metrics.content.height=t.clientHeight,this},render:function(){return this.measure(),this},getSelectionDistance:function(){return Math.abs(this.model.collection.indexOf(this.model)-this.model.collection.selectedIndex)}});module.exports=CarouselRenderer;

}).call(this,require("underscore"))

},{"app/view/base/View":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/base/View.js","underscore":"underscore","utils/css/getBoxEdgeStyles":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/css/getBoxEdgeStyles.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/ClickableRenderer.js":[function(require,module,exports){
"use strict";var LabelRenderer=require("app/view/render/LabelRenderer"),ClickableRenderer=LabelRenderer.extend({cidPrefix:"clickableRenderer",events:{"click .label":function(e){e.defaultPrevented||(e.preventDefault(),this.trigger("renderer:click",this.model,e))},"click a":function(e){e.defaultPrevented||e.preventDefault()}}});module.exports=ClickableRenderer;

},{"app/view/render/LabelRenderer":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/LabelRenderer.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/DefaultSelectableRenderer.hbs":[function(require,module,exports){
"use strict";var HandlebarsCompiler=require("hbsfy/runtime");module.exports=HandlebarsCompiler.template({compiler:[7,">= 4.0.0"],main:function(a,e,l,n,s){var r,t,i=null!=e?e:a.nullContext||{},u=l.helperMissing;return'<a href="#'+a.escapeExpression("function"==typeof(t=null!=(t=l.domid||(null!=e?e.domid:e))?t:u)?t.call(i,{name:"domid",hash:{},data:s}):t)+'"><span class="label">'+(null!=(r="function"==typeof(t=null!=(t=l.name||(null!=e?e.name:e))?t:u)?t.call(i,{name:"name",hash:{},data:s}):t)?r:"")+"</span></a>"},useData:!0});

},{"hbsfy/runtime":"hbsfy/runtime"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/DefaultSelectableRenderer.js":[function(require,module,exports){
"use strict";var ClickableRenderer=require("app/view/render/ClickableRenderer"),DefaultSelectableRenderer=ClickableRenderer.extend({tagName:"li",className:"list-item",template:require("./DefaultSelectableRenderer.hbs"),initialize:function(e){this.listenTo(this.model,"selected deselected",this._renderClassList),this._renderClassList()},render:function(){return this.el.innerHTML=this.template(this.model.toJSON()),this._renderClassList(),this},_renderClassList:function(){this.el.classList.toggle("selected",this.model.selected)}});module.exports=DefaultSelectableRenderer;

},{"./DefaultSelectableRenderer.hbs":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/DefaultSelectableRenderer.hbs","app/view/render/ClickableRenderer":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/ClickableRenderer.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/DotNavigationRenderer.hbs":[function(require,module,exports){
"use strict";var HandlebarsCompiler=require("hbsfy/runtime");module.exports=HandlebarsCompiler.template({compiler:[7,">= 4.0.0"],main:function(a,e,l,n,s){var r,t=null!=e?e:a.nullContext||{},i=l.helperMissing,m=a.escapeExpression;return'<span class="label">'+m("function"==typeof(r=null!=(r=l.name||(null!=e?e.name:e))?r:i)?r.call(t,{name:"name",hash:{},data:s}):r)+'</span><a href="#'+m("function"==typeof(r=null!=(r=l.domid||(null!=e?e.domid:e))?r:i)?r.call(t,{name:"domid",hash:{},data:s}):r)+'"><b> </b></a>'},useData:!0});

},{"hbsfy/runtime":"hbsfy/runtime"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/DotNavigationRenderer.js":[function(require,module,exports){
"use strict";var View=require("app/view/base/View"),viewTemplate=require("./DotNavigationRenderer.hbs"),DotNavigationRenderer=View.extend({cidPrefix:"dotRenderer",tagName:"li",className:"list-item",template:viewTemplate,events:{click:function(e){e.defaultPrevented||(e.preventDefault(),this.trigger("renderer:click",this.model,e))},"click a":function(e){e.defaultPrevented||e.preventDefault()}},initialize:function(e){this.listenTo(this.model,"selected deselected",this.renderClassList),this.renderClassList()},render:function(){return this.el.innerHTML=this.template(this.model.toJSON()),this.renderClassList(),this},renderClassList:function(){this.el.classList.toggle("selected",this.model.selected)}});module.exports=DotNavigationRenderer;

},{"./DotNavigationRenderer.hbs":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/DotNavigationRenderer.hbs","app/view/base/View":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/base/View.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/ImageRenderer.hbs":[function(require,module,exports){
"use strict";var HandlebarsCompiler=require("hbsfy/runtime");module.exports=HandlebarsCompiler.template({compiler:[7,">= 4.0.0"],main:function(e,l,n,a,t){var i,s=null!=l?l:e.nullContext||{},r=n.helperMissing,d=e.escapeExpression;return'<div class="placeholder sizing"></div>\n<img class="content media-border default" alt="'+d("function"==typeof(i=null!=(i=n.text||(null!=l?l.text:l))?i:r)?i.call(s,{name:"text",hash:{},data:t}):i)+'" longdesc="#desc_m'+d("function"==typeof(i=null!=(i=n.id||(null!=l?l.id:l))?i:r)?i.call(s,{name:"id",hash:{},data:t}):i)+'" />\n'},useData:!0});

},{"hbsfy/runtime":"hbsfy/runtime"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/ImageRenderer.js":[function(require,module,exports){
"use strict";var MediaRenderer=require("./MediaRenderer"),viewTemplate=require("./ImageRenderer.hbs"),ImageRenderer=MediaRenderer.extend({cidPrefix:"imageRenderer",className:MediaRenderer.prototype.className+" image-item",template:viewTemplate,initialize:function(e){MediaRenderer.prototype.initialize.apply(this,arguments)},createChildren:function(){MediaRenderer.prototype.createChildren.apply(this,arguments),this.placeholder=this.el.querySelector(".placeholder")},render:function(){MediaRenderer.prototype.render.apply(this,arguments);var e=this.getDefaultImage();this.metrics.media.width&&e.setAttribute("width",this.metrics.media.width),this.metrics.media.height&&e.setAttribute("height",this.metrics.media.height);var t=this.getContentEl();return t.style.left=this.metrics.content.x+"px",t.style.top=this.metrics.content.y+"px",this},initializeAsync:function(){return MediaRenderer.prototype.initializeAsync.apply(this,arguments)}});module.exports=ImageRenderer;

},{"./ImageRenderer.hbs":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/ImageRenderer.hbs","./MediaRenderer":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/MediaRenderer.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/LabelRenderer.js":[function(require,module,exports){
"use strict";var View=require("app/view/base/View"),LabelRenderer=View.extend({cidPrefix:"labelRenderer",properties:{label:{get:function(){return this._label||(this._label=this.el.querySelector(".label"))}}}});module.exports=LabelRenderer;

},{"app/view/base/View":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/base/View.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/MediaRenderer.js":[function(require,module,exports){
(function (_){
"use strict";var lpad=require("underscore.string/lpad"),MediaItem=require("app/model/item/MediaItem"),CarouselRenderer=require("app/view/render/CarouselRenderer"),MediaRenderer=CarouselRenderer.extend({cidPrefix:"mediaRenderer",className:CarouselRenderer.prototype.className+" media-item",model:MediaItem,properties:{defaultImage:{get:function(){return this._defaultImage||(this._defaultImage=this.el.querySelector("img.default"))}},mediaState:{get:function(){return this._mediaState},set:function(e){this._setMediaState(e)}}},initialize:function(e){CarouselRenderer.prototype.initialize.apply(this,arguments),this.metrics.media={},this.mediaState="idle",this.initializeAsync().then(this.whenInitialized).catch(this.whenInitializeError.bind(this))},initializeAsync:function(){return Promise.resolve(this).then(MediaRenderer.whenSelectionIsContiguous).then(MediaRenderer.whenScrollingEnds).then(MediaRenderer.whenDefaultImageLoads)},whenInitialized:function(e){return e.mediaState="ready",e.placeholder.removeAttribute("data-progress"),e},whenInitializeError:function(e){e instanceof CarouselRenderer.ViewError||(e instanceof Error&&console.error(e.stack),this.placeholder.removeAttribute("data-progress"),this.mediaState="error")},updateMediaProgress:function(e,t){_.isNumber(e)&&this.placeholder.setAttribute("data-progress",lpad(Math.floor(100*e),2,"0"))},getDefaultImage:function(){return this.defaultImage},createChildren:function(){this.el.innerHTML=this.template(this.model.toJSON())},measure:function(){var e,t,i,r,s,n,a,d,o,h,m,c;return CarouselRenderer.prototype.measure.apply(this,arguments),s=(c=this.metrics.content).x,n=c.y,i=c.width,r=c.height,i-=h=c.paddingLeft+c.paddingRight+c.borderLeftWidth+c.borderRightWidth,r-=m=c.paddingTop+c.paddingBottom+c.borderTopWidth+c.borderBottomWidth,e=this.model.get("source").get("w"),t=this.model.get("source").get("h"),e<i&&t<r?(o=1,a=e,d=t,this.metrics.fitDirection="both"):i/r<e/t?(o=(a=i)/e,d=Math.round(o*t),this.metrics.fitDirection="width"):(o=(d=r)/t,a=Math.round(o*e),this.metrics.fitDirection="height"),this.metrics.content.x=s,this.metrics.content.y=n,this.metrics.content.width=a+h,this.metrics.content.height=d+m,this.metrics.media.x=s+c.paddingLeft+c.borderLeftWidth,this.metrics.media.y=n+c.paddingTop+c.borderTopWidth,this.metrics.media.width=a,this.metrics.media.height=d,this.metrics.media.scale=o,this},render:function(){this.measure();var e=this.getSizingEl();return e.style.maxWidth=this.metrics.content.width+"px",e.style.maxHeight=this.metrics.content.height+"px",this.el.setAttribute("data-fit-dir",this.metrics.fitDirection),this},_mediaStateEnum:["idle","pending","ready","error"],_setMediaState:function(e){if(-1===this._mediaStateEnum.indexOf(e))throw new Error("Argument "+e+" invalid. Must be one of: "+this._mediaStateEnum.join(", "));this._mediaState!==e&&(this._mediaState&&this.el.classList.remove(this._mediaState),this.el.classList.add(e),this._mediaState=e,this.trigger("media:"+e))}},{LOG_TO_SCREEN:!0,whenSelectionDistanceIs:require("app/view/promise/whenSelectionDistanceIs"),whenSelectionIsContiguous:require("app/view/promise/whenSelectionIsContiguous"),whenScrollingEnds:require("app/view/promise/whenScrollingEnds"),whenDefaultImageLoads:require("app/view/promise/whenDefaultImageLoads")});module.exports=MediaRenderer;

}).call(this,require("underscore"))

},{"app/model/item/MediaItem":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/model/item/MediaItem.js","app/view/promise/whenDefaultImageLoads":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/promise/whenDefaultImageLoads.js","app/view/promise/whenScrollingEnds":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/promise/whenScrollingEnds.js","app/view/promise/whenSelectionDistanceIs":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/promise/whenSelectionDistanceIs.js","app/view/promise/whenSelectionIsContiguous":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/promise/whenSelectionIsContiguous.js","app/view/render/CarouselRenderer":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/CarouselRenderer.js","underscore":"underscore","underscore.string/lpad":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/underscore.string/lpad.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/PlayableRenderer.js":[function(require,module,exports){
(function (_){
"use strict";var MediaRenderer=require("app/view/render/MediaRenderer"),prefixedProperty=require("utils/prefixedProperty"),prefixedEvent=require("utils/prefixedEvent"),visibilityStateProp=prefixedProperty("visibilityState",document),visibilityChangeEvent=prefixedEvent("visibilitychange",document,"hidden"),PlayableRenderer=MediaRenderer.extend({cidPrefix:"playableRenderer",className:MediaRenderer.prototype.className+" playable-item",properties:{mediaPaused:{get:function(){return this._isMediaPaused()}},mediaWaiting:{get:function(){return this._isMediaWaiting()}},playbackRequested:{get:function(){return this._playbackRequested},set:function(e){this._setPlaybackRequested(e)}},overlay:{get:function(){return this._overlay||(this._overlay=this.el.querySelector(".overlay"))}},playToggleHitarea:{get:function(){return this._playToggleHitarea||(this._playToggleHitarea=this.el.querySelector(".play-toggle-hitarea"))}}},initialize:function(e){this._playToggleSymbol={},_.bindAll(this,"_onPlaybackToggle","_onVisibilityChange"),MediaRenderer.prototype.initialize.apply(this,arguments),this._setPlaybackRequested(this._playbackRequested)},setEnabled:function(e){MediaRenderer.prototype.setEnabled.apply(this,arguments),this._validatePlayback()},listenToSelection:function(){if("initialized"!=this._viewPhase)throw new Error(this.cid+"::listenToSelection called while "+this._viewPhase);this.listenTo(this.model,"selected",this._onModelSelected),this.listenTo(this.model,"deselected",this._onModelDeselected),this.model.selected&&this._onModelSelected()},_onModelSelected:function(){this.cid,this._playbackRequested,this._toggleEvent,this.listenTo(this,"view:parentChange",this._onParentChange),this.parentView&&this._onParentChange(this,this.parentView,null),this._playToggleSymbol.paused=!this.enabled,this._listenWhileSelected(),this._validatePlayback()},_onModelDeselected:function(){this.cid,this._playbackRequested,this._toggleEvent,this.stopListening(this,"view:parentChange",this._onParentChange),this.parentView&&this._onParentChange(this,null,this.parentView),this._playToggleSymbol.paused=!0,this._stopListeningWhileSelected(),this._validatePlayback(!1)},_onParentChange:function(e,t,i){i&&this.stopListening(i,"view:scrollstart view:scrollend",this._onScrollChange),t&&this.listenTo(t,"view:scrollstart view:scrollend",this._onScrollChange)},_onScrollChange:function(){if(null===this.parentView)throw new Error(this.cid+"::_onScrollChange parentView is null");this._validatePlayback()},_onVisibilityChange:function(e){this._validatePlayback()},_listenWhileSelected:function(){this.listenTo(this,"view:removed",this._stopListeningWhileSelected),document.addEventListener(visibilityChangeEvent,this._onVisibilityChange,!1),this.playToggleHitarea.addEventListener(this._toggleEvent,this._onPlaybackToggle,!1)},_stopListeningWhileSelected:function(){this.stopListening(this,"view:removed",this._stopListeningWhileSelected),document.removeEventListener(visibilityChangeEvent,this._onVisibilityChange,!1),this.playToggleHitarea.removeEventListener(this._toggleEvent,this._onPlaybackToggle,!1)},_toggleEvent:MediaRenderer.CLICK_EVENT,_onPlaybackToggle:function(e){!this.enabled||e.defaultPrevented||e.button||(e.preventDefault(),this.playbackRequested=!this.playbackRequested)},_playbackCount:0,_playbackRequested:null,_setPlaybackRequested:function(e){this._playbackRequested=e;var t=this.content.classList;t.toggle("playing",!0===e),t.toggle("paused",!1===e),t.toggle("requested",!0===e||!1===e),this._renderPlaybackState(),this._validatePlayback()},_togglePlayback:function(e){_.isBoolean(e)&&e!==this._isMediaPaused()||((e=this._isMediaPaused())?this._playMedia():this._pauseMedia())},_canResumePlayback:function(){return!(!(this.enabled&&this.model.selected&&this.playbackRequested&&"ready"===this.mediaState&&this.attached&&null!==this.parentView)||this.parentView.scrolling||"hidden"==document[visibilityStateProp])},_validatePlayback:function(e){0===arguments.length||e?this._togglePlayback(this._canResumePlayback()):this._togglePlayback(!1),this._playToggleSymbol.paused=!(this.attached&&this.enabled&&this.model.selected)},_renderPlaybackState:function(){if(this.attached){this.progressMeter&&(this.progressMeter.stalled=this._isMediaWaiting());var e=!this.parentView.scrolling&&this._isMediaWaiting();this.playbackRequested?e?this._setPlayToggleSymbol("waiting"):this._setPlayToggleSymbol("play"):this.content.classList.contains("started")?this._setPlayToggleSymbol("pause"):this._setPlayToggleSymbol("play");var t=this.content.classList;t.toggle("playing",this.playbackRequested),t.toggle("paused",!this.playbackRequested),t.toggle("waiting",e)}},_setPlayToggleSymbol:function(e){this._playToggleSymbol.symbolName=e,"ready"===this.mediaState&&this._playToggleSymbol.renderNow()},_isWaiting:!1,_isMediaWaiting:function(){return this._isWaiting},_toggleWaiting:function(e){0===arguments.length&&(e=!this._isWaiting),this._isWaiting!==e&&(this._isWaiting=e,this._renderPlaybackState())},_isMediaPaused:function(){return console.warn("%s::_isMediaPaused Not implemented",this.cid),!0},_playMedia:function(){console.warn("%s::_playMedia Not implemented",this.cid)},_pauseMedia:function(){console.warn("%s::_pauseMedia Not implemented",this.cid)},updateOverlay:function(e,t,i){}});window.ga&&(PlayableRenderer=function(e){var t=require("underscore.string/dasherize");return e.extend({initialize:function(){var t=e.prototype.initialize.apply(this,arguments);return this._gaEventSuffix=this.playbackRequested?"-autoplay":"",t},_onPlaybackToggle:function(i){var a=e.prototype._onPlaybackToggle.apply(this,arguments);return window.ga?window.ga("send",{hitType:"event",eventCategory:t(this.cidPrefix),eventAction:(this.playbackRequested?"play":"pause")+this._gaEventSuffix,eventLabel:this.model.get("text")}):console.warn("%s::_onPlaybackToggle window.ga is %s",this.cid,window.ga),a}})}(PlayableRenderer)),module.exports=PlayableRenderer;

}).call(this,require("underscore"))

},{"app/view/render/MediaRenderer":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/MediaRenderer.js","underscore":"underscore","underscore.string/dasherize":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/underscore.string/dasherize.js","utils/prefixedEvent":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/prefixedEvent.js","utils/prefixedProperty":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/prefixedProperty.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/SequenceRenderer.hbs":[function(require,module,exports){
"use strict";var HandlebarsCompiler=require("hbsfy/runtime");module.exports=HandlebarsCompiler.template({compiler:[7,">= 4.0.0"],main:function(e,t,n,s,a){var l,i=null!=t?t:e.nullContext||{},c=n.helperMissing,d=e.escapeExpression;return'<div class="placeholder sizing"></div>\n<div class="content">\n\t<div class="media-border content-size"></div>\n\t<div class="controls content-size">\n\t\t<canvas class="progress-meter"></canvas>\n\t</div>\n\t<div class="sequence media-size">\n\t\t<img class="sequence-step current default" alt="'+d("function"==typeof(l=null!=(l=n.text||(null!=t?t.text:t))?l:c)?l.call(i,{name:"text",hash:{},data:a}):l)+'" longdesc="#desc_m'+d("function"==typeof(l=null!=(l=n.id||(null!=t?t.id:t))?l:c)?l.call(i,{name:"id",hash:{},data:a}):l)+'" />\n\t</div>\n\t<div class="overlay media-size play-toggle-hitarea">\n\t\t<canvas class="play-toggle"/>\n\t</div>\n</div>\n'},useData:!0});

},{"hbsfy/runtime":"hbsfy/runtime"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/SequenceRenderer.js":[function(require,module,exports){
(function (_){
"use strict";var Container=require("backbone.babysitter"),View=require("app/view/base/View"),PlayableRenderer=require("app/view/render/PlayableRenderer"),Globals=require("app/control/Globals"),ProgressMeter=require("app/view/component/CanvasProgressMeter"),PlayToggleSymbol=require("app/view/component/PlayToggleSymbol"),Timer=require("utils/Timer"),_whenImageLoads=require("app/view/promise/_whenImageLoads"),_loadImageAsObjectURL=require("app/view/promise/_loadImageAsObjectURL"),errorTemplate=require("../template/ErrorBlock.hbs"),MIN_STEP_INTERVAL=2*Globals.TRANSITION_DURATION+Globals.TRANSITION_DELAY_INTERVAL,DEFAULT_STEP_INTERVAL=6*Globals.TRANSITION_DURATION+Globals.TRANSITION_DELAY_INTERVAL,PrefetechedSourceRenderer=View.extend({cidPrefix:"sequenceStepRenderer",className:"sequence-step",tagName:"img",properties:{ready:{get:function(){return this._ready}}},initialize:function(e){!this.el.hasAttribute("alt")&&this.el.setAttribute("alt",this.model.get("src")),this.model.has("prefetched")?this._renderPrefetched():this.listenTo(this.model,"change:prefetched",this._renderPrefetched),this.listenTo(this.model,"selected deselected",this._renderSelection),this._renderSelection()},_renderSelection:function(){this.el.classList.toggle("current",!!this.model.selected)},_renderPrefetched:function(){var e=this.model.get("prefetched");e!==this.el.src&&(this.el.src=e),_whenImageLoads(this.el).then(function(e){this.requestAnimationFrame(function(e){this._setReady(!0)})}.bind(this),function(e){throw e instanceof Error||(e=new Error("cannot load prefetched url")),e}.bind(this))},_ready:!1,_setReady:function(e){this._ready!==e&&(this._ready=!!e,this.trigger("renderer:ready",this))},render:function(){return this.cid,this}}),SourceErrorRenderer=View.extend({className:"sequence-step error",cidPrefix:"sourceErrorRenderer",template:errorTemplate,ready:!0,initialize:function(e){this.listenTo(this.model,"selected deselected",function(){this.el.classList.toggle("current",!!this.model.selected)})},render:function(){return this.el.classList.toggle("current",!!this.model.selected),this.el.innerHTML=this.template(this.model.get("error")),this}}),SequenceStepRenderer=PrefetechedSourceRenderer,SequenceRenderer=PlayableRenderer.extend({cidPrefix:"sequenceRenderer",className:PlayableRenderer.prototype.className+" sequence-item",template:require("./SequenceRenderer.hbs"),initialize:function(e){this.sources=this.model.get("sources"),PlayableRenderer.prototype.initialize.apply(this,arguments)},createChildren:function(){PlayableRenderer.prototype.createChildren.apply(this,arguments),this.placeholder=this.el.querySelector(".placeholder"),this.sequence=this.content.querySelector(".sequence");var e,t=this.model.attrs();e=_.pick(t,"box-shadow","border","border-radius"),_.extend(this.content.querySelector(".media-border").style,e),e=_.pick(t,"border-radius"),_.extend(this.sequence.style,e),_.extend(this.placeholder.style,e),this.sources.select(this.model.get("source")),this.itemViews=new Container,this.itemViews.add(new SequenceStepRenderer({el:this.getDefaultImage(),model:this.model.get("source")}))},render:function(){var e,t,r,s,i;PlayableRenderer.prototype.render.apply(this,arguments);var n,o,a=this.content;for(s=this.metrics.media.width+"px",i=this.metrics.media.height+"px",e=this.el.querySelectorAll(".media-size"),r=0;r<e.length;r++)(t=e.item(r)).style.width=s,t.style.height=i;return a.style.width=s,a.style.height=i,n=this.metrics.content.x+"px",o=this.metrics.content.y+"px",a.style.left=n,a.style.top=o,(t=this.el.querySelector(".controls")).style.width=this.metrics.content.width+"px",t.style.height=this.metrics.content.height+"px",this},initializePlayable:function(){this.content.classList.add("started"),PlayableRenderer.whenSelectionDistanceIs(this,0).then(this._preloadAllItems,function(e){return e instanceof View.ViewError?void 0:e}),this._sequenceInterval=Math.max(parseInt(this.model.attr("@sequence-interval")),MIN_STEP_INTERVAL)||DEFAULT_STEP_INTERVAL,this.timer=new Timer,this.listenTo(this,"view:removed",function(){this.timer.stop(),this.stopListening(this.timer)}),this.listenTo(this.timer,{start:this._onTimerStart,resume:this._onTimerResume,pause:this._onTimerPause,end:this._onTimerEnd}),this._playToggleSymbol=new PlayToggleSymbol(_.extend({el:this.el.querySelector(".play-toggle")},this._playToggleSymbol||{})),this._sourceProgressByIdx=this.sources.map(function(){return 0}),this._sourceProgressByIdx[0]=1,this.progressMeter=new ProgressMeter({el:this.el.querySelector(".progress-meter"),color:this.model.attr("color"),values:{available:this._sourceProgressByIdx.concat()},maxValues:{amount:this.sources.length,available:this.sources.length},labelFn:function(){return!1===this.playbackRequested?Globals.PAUSE_CHAR:this.sources.selectedIndex+1+"/"+this.sources.length}.bind(this)})},initializeAsync:function(){return PlayableRenderer.prototype.initializeAsync.apply(this,arguments).then(function(e){return e.whenAttached()}).then(function(e){return e.initializePlayable(),e.listenToSelection(),e})},whenInitialized:function(e){var t=PlayableRenderer.prototype.whenInitialized.apply(this,arguments);return e._validatePlayback(),t},_preloadAllItems:function(e){return e.once("view:remove",function(){var t={silent:!0};e.sources.forEach(function(e,r,s){var i=e.get("prefetched");i&&(e.set("progress",0,t),e.unset("prefetched",t),/^blob\:/.test(i)&&URL.revokeObjectURL(i))})}),e.sources.reduce(function(e,t,r,s){return e.then(function(e){if("disposed"===e._viewPhase)return e;if(t.has("prefetched"))return e._updateItemProgress(1,r),e;var s=function(t,s){e._updateItemProgress(s,r)};return e.listenTo(t,"change:progress",s),e.once("view:remove",function(e){e.stopListening(t,"change:progress",s)}),e.cid,t.get("original"),t.get("mime"),_loadImageAsObjectURL(t.get("original"),function(r,s){"disposed"===e._viewPhase?s.abort():t.set("progress",r)}).then(function(r){return t.set({progress:r?1:0,prefetched:r}),e},function(r){return t.set({progress:0,error:r}),e})})},Promise.resolve(e))},_updateItemProgress:function(e,t){this._sourceProgressByIdx[t]=e,this.progressMeter&&this.progressMeter.valueTo("available",this._sourceProgressByIdx,300)},_playbackRequested:!0,_paused:!0,_isMediaPaused:function(){return this._paused},_playMedia:function(){this._paused&&(this._paused=!1,this._isMediaWaiting()||(this.timer.status===Timer.PAUSED?this.timer.start():this.timer.start(this._sequenceInterval)))},_pauseMedia:function(){this._paused||(this._paused=!0,this.timer.status===Timer.STARTED&&this.timer.pause())},_onTimerStart:function(e){var t;t=-1===this.sources.selectedIndex?this.model.get("source"):this.sources.followingOrFirst(),this.sources.select(t),this.progressMeter.valueTo("amount",this.sources.selectedIndex+1,e),this.content.classList.toggle("playback-error",t.has("error"))},_onTimerResume:function(e){this.progressMeter.valueTo("amount",this.sources.selectedIndex+1,e)},_onTimerPause:function(e){this.progressMeter.valueTo("amount",this.progressMeter.getRenderedValue("amount"),0)},_onTimerEnd:function(){var e,t,r=function(e){return this.setImmediate(function(){this.mediaPaused||this.timer.start(this._sequenceInterval)}),e}.bind(this);e=this.sources.followingOrFirst(),t=this._getItemView(e),e.has("error")?r():e.has("prefetched")?_whenImageLoads(t.el).then(r,r):(this._toggleWaiting(!0),this.listenToOnce(e,"change:prefetched change:error",function(e){this._toggleWaiting(!1),_whenImageLoads(t.el).then(r,r)}))},_getItemView:function(e){var t=this.itemViews.findByModel(e);return t||(t=new(e.has("error")?SourceErrorRenderer:SequenceStepRenderer)({model:e}),this.itemViews.add(t),this.sequence.appendChild(t.render().el)),t}});module.exports=SequenceRenderer;

}).call(this,require("underscore"))

},{"../template/ErrorBlock.hbs":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/template/ErrorBlock.hbs","./SequenceRenderer.hbs":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/SequenceRenderer.hbs","app/control/Globals":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/control/Globals.js","app/view/base/View":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/base/View.js","app/view/component/CanvasProgressMeter":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/component/CanvasProgressMeter.js","app/view/component/PlayToggleSymbol":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/component/PlayToggleSymbol.js","app/view/promise/_loadImageAsObjectURL":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/promise/_loadImageAsObjectURL.js","app/view/promise/_whenImageLoads":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/promise/_whenImageLoads.js","app/view/render/PlayableRenderer":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/PlayableRenderer.js","backbone.babysitter":"backbone.babysitter","underscore":"underscore","utils/Timer":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/Timer.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/VideoRenderer.hbs":[function(require,module,exports){
"use strict";var HandlebarsCompiler=require("hbsfy/runtime"),partial$0=require("../template/svg/FullscreenSymbol.hbs");HandlebarsCompiler.registerPartial("../template/svg/FullscreenSymbol.hbs",partial$0),module.exports=HandlebarsCompiler.template({compiler:[7,">= 4.0.0"],main:function(e,t,a,l,s){var n,i;return'<div class="placeholder sizing"></div>\n<div class="content media-border">\n\t<div class="controls content-size">\n\t\t<canvas class="progress-meter"></canvas>\n\t</div>\n\t<div class="crop-box media-size">\n\t\t<video width="240" height="180" muted playsinline></video>\n\t\t<img class="poster default" alt="'+e.escapeExpression("function"==typeof(i=null!=(i=a.text||(null!=t?t.text:t))?i:a.helperMissing)?i.call(null!=t?t:e.nullContext||{},{name:"text",hash:{},data:s}):i)+'" width="240" height="180" />\n\t</div>\n\t<div class="overlay media-size play-toggle-hitarea">\n\t\t\t<canvas class="play-toggle"></canvas>\n\t\t<a class="fullscreen-toggle" href="javascript:(void 0)">\n'+(null!=(n=e.invokePartial(l["../template/svg/FullscreenSymbol.hbs"],t,{name:"../template/svg/FullscreenSymbol.hbs",data:s,indent:"\t\t\t",helpers:a,partials:l,decorators:e.decorators}))?n:"")+"\t\t</a>\n\t</div>\n</div>\n"},usePartial:!0,useData:!0});

},{"../template/svg/FullscreenSymbol.hbs":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/template/svg/FullscreenSymbol.hbs","hbsfy/runtime":"hbsfy/runtime"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/VideoRenderer.js":[function(require,module,exports){
(function (_){
"use strict";var Globals=require("app/control/Globals"),PlayableRenderer=require("app/view/render/PlayableRenderer"),ProgressMeter=require("app/view/component/CanvasProgressMeter"),PlayToggleSymbol=require("app/view/component/PlayToggleSymbol"),prefixedEvent=require("utils/prefixedEvent"),fullscreenChangeEvent=prefixedEvent("fullscreenchange",document),formatTimecode=function(e){return isNaN(e)?"":e>=3600?(e/3600|0)+"H":e>=60?(e/60|0)+"M":(0|e)+"S"},VIDEO_CROP_PX=Globals.VIDEO_CROP_PX,SYNC_TIMEOUT_MS=1200,SYNC_THRESHOLD_MS=100,VideoRenderer=PlayableRenderer.extend({cidPrefix:"videoRenderer",className:PlayableRenderer.prototype.className+" video-item",template:require("./VideoRenderer.hbs"),properties:{fullscreenToggle:{get:function(){return this._fullscreenToggle||(this._fullscreenToggle=this.el.querySelector(".fullscreen-toggle"))}}},initialize:function(e){PlayableRenderer.prototype.initialize.apply(this,arguments),_.bindAll(this,"_updatePlaybackState","_updateCurrTimeValue","_updateBufferedValue","_onMediaError","_onMediaEnded","_onFullscreenChange","_onFullscreenToggle"),_.bindAll(this,"_playbackTimeoutFn_playing","_playbackTimeoutFn_waiting")},createChildren:function(){PlayableRenderer.prototype.createChildren.apply(this,arguments),this.placeholder=this.el.querySelector(".placeholder"),this.video=this.content.querySelector("video"),this.video.setAttribute("preload","none"),this.video.controlList&&this.video.controlList.add("nodownload"),this.video.loop=void 0!==this.model.attr("@video-loop"),this.video.src=this.findPlayableSource(this.video)},measure:function(){PlayableRenderer.prototype.measure.apply(this,arguments),this.metrics.media.height+=2*VIDEO_CROP_PX,this.metrics.content.height+=2*VIDEO_CROP_PX},render:function(){var e,t,i,a,r;PlayableRenderer.prototype.render.apply(this,arguments);var n,s,o=this.defaultImage,l=this.content;for(a=this.metrics.media.width+"px",r=this.metrics.media.height+"px",e=this.el.querySelectorAll(".media-size"),i=0;i<e.length;i++)(t=e.item(i)).style.width=a,t.style.height=r;return l.style.width=a,l.style.height=this.metrics.media.height+VIDEO_CROP_PX+"px",n=this.metrics.content.x+"px",s=this.metrics.content.y+"px",l.style.left=n,l.style.top=s,(t=this.el.querySelector(".controls")).style.width=this.metrics.content.width+"px",t.style.height=this.metrics.content.height+"px",this.video.setAttribute("width",this.metrics.media.width),this.video.setAttribute("height",this.metrics.media.height-2*VIDEO_CROP_PX),o.setAttribute("width",this.metrics.media.width),o.setAttribute("height",this.metrics.media.height-2*VIDEO_CROP_PX),this},initializeAsync:function(){return Promise.resolve(this).then(PlayableRenderer.whenSelectionIsContiguous).then(PlayableRenderer.whenScrollingEnds).then(PlayableRenderer.whenViewIsAttached).then(function(e){return Promise.all([PlayableRenderer.whenDefaultImageLoads(e),e.whenVideoHasMetadata(e)]).then(function(){return e})}).then(function(e){return e.initializePlayable(),e.listenToSelection(),e})},initializePlayable:function(){PlayableRenderer.whenSelectionDistanceIs(this,0).then(function(e){return e.video.setAttribute("preload","auto"),e.video.preload="auto",e}).catch(function(e){e instanceof PlayableRenderer.ViewError?(e.view.cid,e.message):console.warn(e)}),this._playToggleSymbol=new PlayToggleSymbol(_.extend({el:this.el.querySelector(".play-toggle")},this._playToggleSymbol||{})),this.progressMeter=new ProgressMeter({el:this.el.querySelector(".progress-meter"),color:this.model.attr("color"),maxValues:{amount:this.video.duration,available:this.video.duration},labelFn:function(e,t){return!this._started||this.video.ended||isNaN(e)?formatTimecode(t):this.playbackRequested?formatTimecode(t-e):Globals.PAUSE_CHAR}.bind(this)}),this._renderPlaybackState(),this.addMediaListeners()},whenVideoHasMetadata:function(e){return new Promise(function(t,i){var a=e.video,r={loadedmetadata:function(i){i&&l(),t(e)},abort:function(t){t&&l(),i(new PlayableRenderer.ViewError(e,new Error("whenVideoHasMetadata: view was removed")))},error:function(e){var t;e&&l(),a.error?(t=new Error(_.invert(MediaError)[a.error.code])).infoCode=a.error.code:t=new Error("Unspecified error"),t.infoSrc=a.src,t.logMessage="whenVideoHasMetadata: "+t.name+" "+t.infoSrc,t.logEvent=e,i(t)}};if(a.error)r.error();else if(a.readyState>=HTMLMediaElement.HAVE_METADATA)r.loadedmetadata();else{var n=a.querySelectorAll("source"),s=n.length>0?n.item(n.length-1):a,o=s===a,l=function(){for(var e in s.removeEventListener("error",r.error,o),r)"error"!==e&&r.hasOwnProperty(e)&&a.removeEventListener(e,r[e],!1)};for(var d in s.addEventListener("error",r.error,o),r)"error"!==d&&r.hasOwnProperty(d)&&a.addEventListener(d,r[d],!1);a.setAttribute("preload","metadata"),a.preload="metadata"}})},findPlayableSource:function(e){var t=this.model.get("sources").find(function(t){return/^video\//.test(t.get("mime"))&&""!=e.canPlayType(t.get("mime"))});return t?t.get("original"):""},_playbackRequested:!1,_isMediaPaused:function(){return this.video.paused},_playMedia:function(){this.video.readyState>=HTMLMediaElement.HAVE_CURRENT_DATA&&0==this.video.seekable.length?(console.warn(this.cid,"WTF! got video data, but cannot seek, calling load()"),_.isFunction(this.video.load)&&this.video.load()):this.video.ended&&(this.video.currentTime=this.video.seekable.start(0)),this.video.readyState<HTMLMediaElement.HAVE_ENOUGH_DATA?(this.video.networkState==HTMLMediaElement.NETWORK_IDLE&&this.video.load(),this._toggleWaiting(!0)):this.video.play()},_pauseMedia:function(){this.video.pause()},_listenWhileSelected:function(){PlayableRenderer.prototype._listenWhileSelected.apply(this,arguments),this.fullscreenToggle.addEventListener(this._toggleEvent,this._onFullscreenToggle,!1)},_stopListeningWhileSelected:function(){PlayableRenderer.prototype._stopListeningWhileSelected.apply(this,arguments),this.fullscreenToggle.removeEventListener(this._toggleEvent,this._onFullscreenToggle,!1)},addMediaListeners:function(){this.addListeners(this.video,this.updatePlaybackEvents,this._updatePlaybackState),this.addListeners(this.video,this.updateBufferedEvents,this._updateBufferedValue),this.addListeners(this.video,this.updateCurrTimeEvents,this._updateCurrTimeValue),this.video.addEventListener("ended",this._onMediaEnded,!1),this.video.addEventListener("error",this._onMediaError,!0),this.on("view:removed",this.removeMediaListeners,this)},removeMediaListeners:function(){this.off("view:removed",this.removeMediaListeners,this),this.removeListeners(this.video,this.updatePlaybackEvents,this._updatePlaybackState),this.removeListeners(this.video,this.updateBufferedEvents,this._updateBufferedValue),this.removeListeners(this.video,this.updateCurrTimeEvents,this._updateCurrTimeValue),this.video.removeEventListener("ended",this._onMediaEnded,!1),this.video.removeEventListener("error",this._onMediaError,!0)},_onMediaError:function(e){this.removeMediaListeners(),this.removeSelectionListeners(),this._started=!1,this.content.classList.remove("started"),this.mediaState="error",this.playbackRequested=!1,this._exitFullscreen()},_onMediaEnded:function(e){this.playbackRequested=!1,this._exitFullscreen()},_exitFullscreen:function(){this.video.webkitDisplayingFullscreen&&this.video.webkitExitFullscreen(),document.fullscreenElement===this.video&&this.video.exitFullscreen()},updateCurrTimeEvents:"playing waiting pause timeupdate seeked",_updateCurrTimeValue:function(e){this.video.played.length&&this.content.classList.add("started"),this.progressMeter&&this.progressMeter.valueTo("amount",this.video.currentTime,0)},updatePlaybackEvents:"timeupdate playing pause waiting canplaythrough seeked",_isPlaybackWaiting:!1,_playbackStartTS:-1,_playbackStartTC:-1,_updatePlaybackState:function(e){if(window.clearTimeout(this._playbackTimeoutID),this._playbackTimeoutID=-1,this.playbackRequested)switch("timeupdate"!==e.type&&(this._playbackStartTS=e.timeStamp,this._playbackStartTC=this.video.currentTime),e.type){case"timeupdate":SYNC_THRESHOLD_MS<Math.abs(e.timeStamp-this._playbackStartTS-1e3*(this.video.currentTime-this._playbackStartTC))?(this._playbackStartTS=e.timeStamp,this._playbackStartTC=this.video.currentTime,this._playbackTimeoutID=window.setTimeout(this._playbackTimeoutFn_waiting,SYNC_TIMEOUT_MS),this._toggleWaiting(!0)):(this._playbackTimeoutID=window.setTimeout(this._playbackTimeoutFn_playing,SYNC_TIMEOUT_MS),this._toggleWaiting(!1));break;case"playing":this._playbackStartTS=e.timeStamp,this._playbackStartTC=this.video.currentTime,this._playbackTimeoutID=window.setTimeout(this._playbackTimeoutFn_playing,SYNC_TIMEOUT_MS),this._toggleWaiting(!1);break;case"pause":this._toggleWaiting(this.playbackRequested);break;case"canplaythrough":this._toggleWaiting(!1),this._validatePlayback();break;case"waiting":this.video.seeking||(this.video.readyState<HTMLMediaElement.HAVE_ENOUGH_DATA&&this.video.pause(),this._toggleWaiting(!0));break;default:this._toggleWaiting(!1)}else this._toggleWaiting(!1)},_playbackTimeoutID:-1,_playbackTimeoutFn_playing:function(){this._playbackTimeoutID=-1,this._toggleWaiting(!0)},_playbackTimeoutFn_waiting:function(){SYNC_THRESHOLD_MS<1e3*(this.video.currentTime-this._playbackStartTC)?this._playbackTimeoutID=window.setTimeout(this._playbackTimeoutFn_waiting,SYNC_TIMEOUT_MS):(this._playbackStartTS+=SYNC_TIMEOUT_MS,this._playbackStartTC=this.video.currentTime,this._playbackTimeoutID=window.setTimeout(this._playbackTimeoutFn_playing,SYNC_TIMEOUT_MS),this._toggleWaiting(!1))},_renderPlaybackState:function(){this.content.classList.toggle("ended",this.video.ended),PlayableRenderer.prototype._renderPlaybackState.apply(this,arguments)},_setPlayToggleSymbol:function(e){return PlayableRenderer.prototype._setPlayToggleSymbol.call(this,this.video.ended?"ended":e)},updateBufferedEvents:"progress canplay canplaythrough play playing",_updateBufferedValue:function(e){var t=this.video.buffered;t.length>0&&(this._bufferedValue=t.end(t.length-1),this.progressMeter&&this.video.readyState>=HTMLMediaElement.HAVE_CURRENT_DATA&&this.progressMeter.valueTo("available",this._bufferedValue,300))},_onFullscreenToggle:function(e){if(!e.defaultPrevented&&!e.button&&this.model.selected){e.preventDefault();try{document.hasOwnProperty("fullscreenElement")&&document.fullscreenElement!==this.video?(document.addEventListener(fullscreenChangeEvent,this._onFullscreenChange,!1),this.video.requestFullscreen()):this.video.webkitSupportsFullscreen&&!this.video.webkitDisplayingFullscreen&&(this.video.addEventListener("webkitbeginfullscreen",this._onFullscreenChange,!1),this.video.webkitEnterFullScreen())}catch(e){this.video.controls=!1,console.error(e)}}},_onFullscreenChange:function(e){switch(e.type){case fullscreenChangeEvent:var t=document.fullscreenElement===this.video;this.video.controls=t,t||document.removeEventListener(fullscreenChangeEvent,this._onFullscreenChange,!1);break;case"webkitbeginfullscreen":this.video.controls=!0,this.video.removeEventListener("webkitbeginfullscreen",this._onFullscreenChange,!1),this.video.addEventListener("webkitendfullscreen",this._onFullscreenChange,!1);break;case"webkitendfullscreen":this.video.removeEventListener("webkitendfullscreen",this._onFullscreenChange,!1),this.video.controls=!1}}});module.exports=VideoRenderer;

}).call(this,require("underscore"))

},{"./VideoRenderer.hbs":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/VideoRenderer.hbs","app/control/Globals":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/control/Globals.js","app/view/component/CanvasProgressMeter":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/component/CanvasProgressMeter.js","app/view/component/PlayToggleSymbol":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/component/PlayToggleSymbol.js","app/view/render/PlayableRenderer":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/render/PlayableRenderer.js","underscore":"underscore","utils/prefixedEvent":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/prefixedEvent.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/template/Carousel.EmptyRenderer.Bundle.hbs":[function(require,module,exports){
"use strict";var HandlebarsCompiler=require("hbsfy/runtime");module.exports=HandlebarsCompiler.template({compiler:[7,">= 4.0.0"],main:function(e,n,l,a,i){var s,t,d=null!=n?n:e.nullContext||{},r=l.helperMissing;return'<div id="desc_b'+e.escapeExpression("function"==typeof(t=null!=(t=l.id||(null!=n?n.id:n))?t:r)?t.call(d,{name:"id",hash:{},data:i}):t)+'" class="content sizing mdown">'+(null!=(s="function"==typeof(t=null!=(t=l.desc||(null!=n?n.desc:n))?t:r)?t.call(d,{name:"desc",hash:{},data:i}):t)?s:"")+"</div>\n"},useData:!0});

},{"hbsfy/runtime":"hbsfy/runtime"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/template/CollectionStack.Media.hbs":[function(require,module,exports){
"use strict";var HandlebarsCompiler=require("hbsfy/runtime");module.exports=HandlebarsCompiler.template({compiler:[7,">= 4.0.0"],main:function(n,l,e,a,u){var i,s,t=null!=l?l:n.nullContext||{},r=e.helperMissing;return'<div id="desc_m'+n.escapeExpression("function"==typeof(s=null!=(s=e.id||(null!=l?l.id:l))?s:r)?s.call(t,{name:"id",hash:{},data:u}):s)+'" class="content sizing"><p>'+(null!=(i="function"==typeof(s=null!=(s=e.name||(null!=l?l.name:l))?s:r)?s.call(t,{name:"name",hash:{},data:u}):s)?i:"")+"</p>"+(null!=(i="function"==typeof(s=null!=(s=e.sub||(null!=l?l.sub:l))?s:r)?s.call(t,{name:"sub",hash:{},data:u}):s)?i:"")+"</div>\n"},useData:!0});

},{"hbsfy/runtime":"hbsfy/runtime"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/template/ErrorBlock.hbs":[function(require,module,exports){
"use strict";var HandlebarsCompiler=require("hbsfy/runtime");module.exports=HandlebarsCompiler.template({1:function(e,n,l,a,r){var o;return"\t\t<p><code>"+e.escapeExpression("function"==typeof(o=null!=(o=l.infoSrc||(null!=n?n.infoSrc:n))?o:l.helperMissing)?o.call(null!=n?n:e.nullContext||{},{name:"infoSrc",hash:{},data:r}):o)+"</code></p>\n"},compiler:[7,">= 4.0.0"],main:function(e,n,l,a,r){var o,s,t=null!=n?n:e.nullContext||{},i=l.helperMissing,c=e.escapeExpression;return'<div class="error-title color-fg color-reverse">'+c("function"==typeof(s=null!=(s=l.name||(null!=n?n.name:n))?s:i)?s.call(t,{name:"name",hash:{},data:r}):s)+'</div>\n<div class="error-message color-fg">\n\t<p><strong>'+c("function"==typeof(s=null!=(s=l.name||(null!=n?n.name:n))?s:i)?s.call(t,{name:"name",hash:{},data:r}):s)+"</strong> <code>"+c("function"==typeof(s=null!=(s=l.message||(null!=n?n.message:n))?s:i)?s.call(t,{name:"message",hash:{},data:r}):s)+"</code></p>\n"+(null!=(o=l.if.call(t,null!=n?n.infoSrc:n,{name:"if",hash:{},fn:e.program(1,r,0),inverse:e.noop,data:r}))?o:"")+"</div>\n"},useData:!0});

},{"hbsfy/runtime":"hbsfy/runtime"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/template/_helpers.js":[function(require,module,exports){
"use strict";var Handlebars=require("hbsfy/runtime"),Color=require("color"),Globals=require("app/control/Globals"),helpers={add:function(r,n){return r+n},subtract:function(r,n){return r-n},divide:function(r,n){return r/n},multiply:function(r,n){return r*n},floor:function(r){return Math.floor(r)},ceil:function(r){return Math.ceil(r)},round:function(r){return Math.round(r)},global:function(r){return Globals[r]},is:function(r,n,e){return r===n?e.fn(this):e.inverse(this)},isnot:function(r,n,e){return r!==n?e.fn(this):e.inverse(this)},isany:function(r){var n=0,e=arguments.length-2,t=arguments[e+1];do{if(r===arguments[++n])return t.fn(this)}while(n<e);return t.inverse(this)},contains:function(r,n,e){return-1!==r.indexOf(n)?e.fn(this):e.inverse(this)},ignore:function(){return""},mix:function(r,n,e){return new Color(r).mix(new Color(n),e).rgb().string()},lighten:function(r,n){return new Color(r).lighten(n).rgb().string()},darken:function(r,n){return new Color(r).darken(n).rgb().string()}};for(var helper in helpers)helpers.hasOwnProperty(helper)&&Handlebars.registerHelper(helper,helpers[helper]);

},{"app/control/Globals":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/control/Globals.js","color":"color","hbsfy/runtime":"hbsfy/runtime"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/view/template/svg/FullscreenSymbol.hbs":[function(require,module,exports){
"use strict";var HandlebarsCompiler=require("hbsfy/runtime");module.exports=HandlebarsCompiler.template({compiler:[7,">= 4.0.0"],main:function(e,s,t,l,r){return'<svg class="fullscreen-symbol" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" preserveAspectRatio="xMidYMid meet" viewBox="-21 -21 42 42">\n\t<path id="fullscreen-shadow" d="M-5,5 L-20,20 M-7,20 L-20,20 L-20,7 M5,-5 L20,-20 M7,-20 L20,-20 L20,-7" class="bg-color-stroke" style="fill:none" vector-effect="non-scaling-stroke" transform="translate(2 2)"/>\n\t<path id="fullscreen-path" d="M-5,5 L-20,20 M-7,20 L-20,20 L-20,7 M5,-5 L20,-20 M7,-20 L20,-20 L20,-7" class="color-stroke" style="fill:none" vector-effect="non-scaling-stroke" />\n</svg>\n'},useData:!0});

},{"hbsfy/runtime":"hbsfy/runtime"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/Timer.js":[function(require,module,exports){
(function (_){
"use strict";var Events=require("backbone").Events,idSeed=0,Timer=function(t){this._id=idSeed++,this._duration=0,this._status="initialized",this._start=0};_.extend(Timer.prototype,Events,{start:function(t){if(!_.isNumber(t)&&!this._duration)return this;if(this._timeout&&"started"===this._status)return this;var e="stopped"===this._status?"start":"resume";return this._duration=t||this._duration,this._timeout=window.setTimeout(end.bind(this),this._duration),this._start=_now(),this._status="started",this.trigger(e,this.getDuration()),this},pause:function(){return"started"!==this._status?this:(this._duration-=_now()-this._start,clear.call(this,!1),this._status="paused",this.trigger("pause",this.getDuration()),this)},stop:function(){return/started|paused/.test(this._status)?(clear.call(this,!0),this._status="stopped",this.trigger("stop"),this):this},getDuration:function(){return"started"===this._status?this._duration-(_now()-this._start):"paused"===this._status?this._duration:0},getStatus:function(){return this._status}});var _now=window.performance?window.performance.now.bind(window.performance):Date.now.bind(Date);function end(){clear.call(this),this._status="stopped",this.trigger("end")}function clear(t){window.clearTimeout(this._timeout),!0===t&&(this._duration=0)}Object.defineProperties(Timer.prototype,{duration:{enumerable:!0,get:function(){return this.getDuration()}},status:{enumerable:!0,get:function(){return this.getStatus()}}}),Object.defineProperties(Timer,{STOPPED:{enumerable:!0,value:"stopped"},STARTED:{enumerable:!0,value:"started"},PAUSED:{enumerable:!0,value:"paused"}}),module.exports=Timer;

}).call(this,require("underscore"))

},{"backbone":"backbone","underscore":"underscore"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/TransformHelper.js":[function(require,module,exports){
"use strict";var TransformItem=require("./TransformItem"),idSeed=0,cidSeed=100,slice=Array.prototype.slice;function TransformHelper(){this.id=idSeed++,this._items=[],this._itemsById={}}TransformHelper.prototype=Object.create({_get:function(t){return this.has(t)?this._itemsById[t.eid]:this._add(t)},_add:function(t){var i,e;return e=t.eid||t.cid||"elt"+cidSeed++,i=new TransformItem(t,e),this._itemsById[e]=i,this._items.push(i),i},_remove:function(t){if(this.has(t)){var i=this._itemsById[t.eid];this._items.splice(this._items.indexOf(i),1),i.destroy(),delete this._itemsById[t.eid]}},_invoke:function(t,i,e){var n,s,r,o,h,l,a,f=null;for(void 0!==e?f=slice.call(i,0,e):e=0,n=e,s=i.length,a=[];n<s;++n)if((h=i[n]).length)for(r=0,o=h.length;r<o;++r)l=this._get(h[r]),a.push(l[t].apply(l,f));else l=this._get(h),a.push(l[t].apply(l,f));return a},has:function(t){return t.eid&&void 0!==this._itemsById[t.eid]},getItems:function(){var t,i,e,n=[];for(t=0;t<arguments.length;++t)if((e=arguments[t]).length)for(i=0;i<e.length;++i)n.push(this._get(e[i]));else n.push(this._get(e));return n},get:function(t){return this._get(t)},add:function(){var t,i,e;for(t=0;t<arguments.length;++t)if((e=arguments[t]).length)for(i=0;i<e.length;++i)this._get(e[i]);else this._get(e)},remove:function(){var t,i,e;for(t=0;t<arguments.length;++t)if((e=arguments[t]).length)for(i=0;i<e.length;++i)this._remove(e[i]);else this._remove(e)},hasOffset:function(t){return this.has(t)?this._itemsById[t.eid].hasOffset:void 0},capture:function(){this._invoke("capture",arguments)},captureAll:function(){for(var t=0,i=this._items.length;t<i;t++)this._items[t].capture()},clearCapture:function(){this._invoke("clearCapture",arguments)},clearAllCaptures:function(){for(var t=0,i=this._items.length;t<i;t++)this._items[t].clearCapture()},offset:function(t,i){this._invoke("offset",arguments,2)},offsetAll:function(t,i){for(var e=0,n=this._items.length;e<n;e++)this._items[e].offset(t,i)},clearOffset:function(){this._invoke("clearOffset",arguments)},clearAllOffsets:function(){for(var t=0,i=this._items.length;t<i;t++)this._items[t].clearOffset()},runTransition:function(t){this._invoke("runTransition",arguments,1)},runAllTransitions:function(t){for(var i=0,e=this._items.length;i<e;i++)this._items[i].runTransition(t)},clearTransition:function(){this._invoke("clearTransition",arguments)},clearAllTransitions:function(){for(var t=0,i=this._items.length;t<i;t++)this._items[t].clearTransition()},stopTransition:function(){this._invoke("stopTransition",arguments)},stopAllTransitions:function(){for(var t=0,i=this._items.length;t<i;t++)this._items[t].stopTransition()},whenTransitionEnds:function(){var t=this._invoke("whenTransitionEnds",arguments);return 0!=t.length?Promise.all(t):Promise.resolve(null)},whenAllTransitionsEnd:function(){return 0!=this._items.length?Promise.all(this._items.map(function(t){return t.whenTransitionEnds()})):Promise.resolve(null)},promise:function(){return 0==arguments.length?this.whenAllTransitionsEnd():this.whenTransitionEnds.call(this,arguments)},validate:function(){for(var t=0,i=this._items.length;t<i;t++)this._items[t].validate()}},{items:{get:function(){return this._items}}}),module.exports=TransformHelper;

},{"./TransformItem":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/TransformItem.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/TransformItem.js":[function(require,module,exports){
(function (_){
"use strict";var prefixedProperty=require("utils/prefixedProperty"),prefixedStyleName=require("utils/prefixedStyleName"),prefixedEvent=require("utils/prefixedEvent"),transitionEnd=prefixedEvent("transitionend"),NO_TRANSITION_VALUE="none 0s step-start 0s",UNSET_TRANSITION={name:"unset",className:"tx-unset",property:"none",easing:"ease",delay:0,duration:0,cssText:"unset"},translateTemplate=function(t){return function(i){return t(i._renderedX,i._renderedY)}}(require("app/control/Globals").TRANSLATE_TEMPLATE),transitionTemplate=function(t){return t.property+" "+t.duration/1e3+"s "+t.easing+" "+t.delay/1e3+"s"},propDefaults={opacity:"1",visibility:"visible",transform:"matrix(1, 0, 0, 1, 0, 0)",transformStyle:"",transition:""},propKeys=Object.keys(propDefaults),propNames=propKeys.reduce(function(t,i){return t[i]=prefixedProperty(i),t},{}),styleNames=function(t){return propKeys.map(t).reduce(function(t,i){return t[i]=prefixedStyleName(i),t},{})}(require("utils/strings/camelToDashed")),resolveAll=function(t,i){return 0!=t.length&&(t.forEach(function(t,s,e){t.resolve(i),e[s]=null}),t.length=0),t},rejectAll=function(t,i){return 0!=t.length&&(t.forEach(function(t,s,e){t.reject(i),e[s]=null}),t.length=0),t},TransformItem=function(t,i){this.el=t,this.id=i,this.el.eid=i,this._onTransitionEnd=this._onTransitionEnd.bind(this),this.el.addEventListener(transitionEnd,this._onTransitionEnd,!1),this._captureInvalid=!1,this._capturedChanged=!1,this._capturedX=null,this._capturedY=null,this._currCapture={},this._lastCapture={},this._hasOffset=!1,this._offsetInvalid=!1,this._offsetX=null,this._offsetY=null,this._renderedX=null,this._renderedY=null,this._hasTransition=!1,this._transitionInvalid=!1,this._transitionRunning=!1,this._transition=_.extend({},UNSET_TRANSITION),this._promises=[],this._pendingPromises=[]};TransformItem.prototype=Object.create({destroy:function(){this.el.removeEventListener(transitionEnd,this._onTransitionEnd,!1),resolveAll(this._pendingPromises,this),resolveAll(this._promises,this)},capture:function(t){return t&&this.clearCapture(),this._validateCapture(),this},clearCapture:function(){return this._captureInvalid=!0,this},offset:function(t,i){return this._hasOffset=!0,this._offsetInvalid=!0,this._offsetX=t||0,this._offsetY=i||0,this},clearOffset:function(){return this._hasOffset&&(this._hasOffset=!1,this._offsetInvalid=!0,this._offsetX=null,this._offsetY=null),this},runTransition:function(t){if(!t)return this.clearTransition();var i=this._transitionValue,s=this._transition.name;return this._transition.property=styleNames.transform,this._transition=_.extend(this._transition,t),this._transitionValue=transitionTemplate(this._transition),this._transitionInvalid&&console.warn("tx[%s]::runTransition set over (%s:'%s' => %s:'%s')",this.id,s,i,this._transition.name,this._transitionValue),this._hasTransition=!0,this._transitionInvalid=!0,this},clearTransition:function(){return this._transition=_.extend(this._transition,UNSET_TRANSITION),this._transitionValue=NO_TRANSITION_VALUE,this._hasTransition=!1,this._transitionInvalid=!0,this},stopTransition:function(){return this._transition=_.extend(this._transition,UNSET_TRANSITION),this._transitionValue=NO_TRANSITION_VALUE,this._hasTransition=!1,this._transitionInvalid=!0,this},whenTransitionEnds:function(){var t,i;return this._transitionInvalid||this._transitionRunning?(t={},i=new Promise(function(i,s){t.resolve=i,t.reject=s}),(this._transitionInvalid?this._pendingPromises:this._promises).push(t)):i=Promise.resolve(this),i},validate:function(){if(this._ignoreEvent=!0,this._captureInvalid){var t=null!==this._renderedX?this._renderedX:this._capturedX,i=null!==this._renderedY?this._renderedY:this._capturedY;this._validateCapture(),this._validateOffset();var s=null!==this._renderedX?this._renderedX:this._capturedX,e=null!==this._renderedY?this._renderedY:this._capturedY;t===s&&i===e&&(this._hasTransition&&console.warn("tx[%s]::validate unchanged: last:[%i,%i] curr:[%i,%i]",this.el.id||this.id,t,i,s,e),this.clearTransition()),this._validateTransition()}else this._validateTransition(),this._validateOffset();return this._ignoreEvent=!1,this._capturedChanged=!1,this},_validateCapture:function(){if(this._captureInvalid){var t,i,s=null;if(this._hasOffset&&!this._offsetInvalid&&(""===(s=this._getCSSProp("transform"))&&console.error('tx[%s]::_capture valid offset (%i,$i) but transformValue=""',this.id,this._offsetX,this._offsetY),this._removeCSSProp("transform")),this._lastCapture=this._currCapture,this._currCapture=this._getComputedCSSProps(),this._currCapture.transform!==this._lastCapture.transform)(i=this._currCapture.transform.match(/(matrix|matrix3d)\(([^\)]+)\)/))?(t=i[2].split(","),"matrix"===i[1]?(this._capturedX=parseFloat(t[4]),this._capturedY=parseFloat(t[5])):(this._capturedX=parseFloat(t[12]),this._capturedY=parseFloat(t[13]))):(this._capturedX=0,this._capturedY=0),this._capturedChanged=!0;null!==s&&(this.id,this._setCSSProp("transform",s)),this._captureInvalid=!1}},_validateOffset:function(){if(this._offsetInvalid)if(this._offsetInvalid=!1,this._hasOffset){var t=this._offsetX+this._capturedX,i=this._offsetY+this._capturedY;t===this._renderedX&&i===this._renderedY||(this._renderedX=t,this._renderedY=i,this._setCSSProp("transform",translateTemplate(this)))}else this._renderedX=null,this._renderedY=null,this._removeCSSProp("transform")},_validateTransition:function(){if(this._transitionInvalid){this._transitionInvalid=!1;var t=this._promises;this._promises=this._pendingPromises,this._pendingPromises=resolveAll(t,this),this._transitionRunning=this._hasTransition,this._setCSSProp("transition",this._transitionValue),this._hasTransition||resolveAll(this._promises,this)}},_onTransitionEnd:function(t){this._ignoreEvent||this._transitionRunning&&this.el===t.target&&this._transition.property==t.propertyName&&(this._hasTransition=!1,this._transitionRunning=!1,this._removeCSSProp("transition"),resolveAll(this._promises,this))},_getCSSProp:function(t){return this.el.style[propNames[t]]},_setCSSProp:function(t,i){"transition"===t&&i==NO_TRANSITION_VALUE&&(i=""),null==i||""===i?this._removeCSSProp(t):this.el.style[propNames[t]]=i},_removeCSSProp:function(t){this.el.style[propNames[t]]=""},_getComputedCSSProps:function(){var t={},i=window.getComputedStyle(this.el);for(var s in propNames)t[s]=i[propNames[s]];return t}},{transition:{get:function(){return this._transition}},hasTransition:{get:function(){return this._hasTransition}},capturedChanged:{get:function(){return this._capturedChanged}},capturedX:{get:function(){return this._capturedX}},capturedY:{get:function(){return this._capturedY}},hasOffset:{get:function(){return this._hasOffset}},offsetX:{get:function(){return this._offsetX}},offsetY:{get:function(){return this._offsetY}}}),module.exports=TransformItem;

}).call(this,require("underscore"))

},{"app/control/Globals":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/control/Globals.js","underscore":"underscore","utils/prefixedEvent":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/prefixedEvent.js","utils/prefixedProperty":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/prefixedProperty.js","utils/prefixedStyleName":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/prefixedStyleName.js","utils/strings/camelToDashed":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/strings/camelToDashed.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/array/difference.js":[function(require,module,exports){
"use strict";module.exports=function(e,u,n){return e.reduce(function(e,n,r,t){return-1==u.indexOf(n)&&e.push(n),e},void 0!==n?n:[])};

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/canvas/CanvasHelper.js":[function(require,module,exports){
"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var PI2=2*Math.PI,splice=Array.prototype.splice,_mod=function(e,t){return(e%t+t)%t},setStyle=function(e,t){if("object"==_typeof(t))for(var o in t)switch(_typeof(e[o])){case"undefined":break;case"function":Array.isArray(t[o])?e[o].apply(e,t[o]):e[o].call(e,t[o]);break;default:e[o]=t[o]}},_drawShape=function(e,t,o){o.save(),t&&setStyle(o,t),e.apply(null,splice.call(arguments,2)),"strokeStyle"in t&&o.stroke(),"fillStyle"in t&&o.fill(),o.restore()};module.exports={setStyle:setStyle,vGuide:function(e,t){e.beginPath(),e.moveTo(t,0),e.lineTo(t,e.canvas.height)},drawVGuide:function(e,t,o){_drawShape(this.vGuide,t,e,o)},hGuide:function(e,t){e.beginPath(),e.moveTo(0,t),e.lineTo(e.canvas.width,t)},drawHGuide:function(e,t,o){_drawShape(this.hGuide,t,e,o)},crosshair:function(e,t,o,a){e.save(),e.translate(t,o),e.rotate(Math.PI/4),e.beginPath(),e.moveTo(0,-a),e.lineTo(0,a),e.moveTo(-a,0),e.lineTo(a,0),e.restore()},drawCrosshair:function(e,t,o,a,r){_drawShape(this.crosshair,t,e,o,a,r)},circle:function(e,t,o,a){e.beginPath(),e.arc(t,o,a,0,PI2)},drawCircle:function(e,t,o,a,r){_drawShape(this.circle,t,e,o,a,r)},square:function(e,t,o,a){a=2*Math.floor(a/2),e.beginPath(),e.rect(t-a,o-a,2*a,2*a)},drawSquare:function(e,t,o,a,r){_drawShape(this.square,t,e,o,a,r)},arrowhead:function(e,t,o,a,r){e.save(),e.translate(t,o),e.rotate(_mod(r,PI2)),e.translate(.5*a,0),e.beginPath(),e.moveTo(0,0),e.lineTo(-a*Math.SQRT2,a*Math.SQRT1_2),e.arcTo(0,0,-a*Math.SQRT2,-a*Math.SQRT1_2,a),e.lineTo(0,0),e.closePath(),e.restore()},drawArrowhead:function(e,t,o,a,r,n){_drawShape(this.arrowhead,t,e,o,a,r,n)},arrowhead2:function(e,t,o,a,r){e.save(),e.translate(t,o),e.rotate(_mod(r,PI2)),e.beginPath(),e.moveTo(-a,a*Math.SQRT1_2),e.lineTo(0,0),e.lineTo(-a,-a*Math.SQRT1_2),e.restore()},drawArrowhead2:function(e,t,o,a,r,n){_drawShape(this.arrowhead,t,e,o,a,r,n)},rect:function(e,t,o,a,r){"object"===_typeof(t)&&(r=t.height,a=t.width,o=t.top,t=t.left),e.beginPath(),e.rect(t,o,a,r)},drawRect:function(e,t,o,a,r,n){_drawShape(this.rect,t,e,o,a,r,n)},roundRect:function(e,t,o,a,r,n){a<2*n&&(n=a/2),r<2*n&&(n=r/2),e.beginPath(),e.moveTo(t+n,o),e.arcTo(t+a,o,t+a,o+r,n),e.arcTo(t+a,o+r,t,o+r,n),e.arcTo(t,o+r,t,o,n),e.arcTo(t,o,t+a,o,n),e.closePath()},drawRoundRect:function(e,t,o,a,r,n,i){_drawShape(this.roundRect,t,e,o,a,n,i)},quadRoundRect:function(e,t,o,a,r,n){e.beginPath(),e.moveTo(t,o+n),e.quadraticCurveTo(t,o,t+n,o),e.lineTo(t+a-n,o),e.quadraticCurveTo(t+a,o,t+a,o+n),e.lineTo(t+a,o+r-n),e.quadraticCurveTo(t+a,o+r,t+a-n,o+r),e.lineTo(t+n,o+r),e.quadraticCurveTo(t,o+r,t,o+r-n),e.closePath()},drawQuadRoundRect:function(e,t,o,a,r,n,i){_drawShape(this.quadRoundRect,t,e,o,a,n,i)}};

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/canvas/bitmap/BlurStack.js":[function(require,module,exports){
"use strict";module.exports=function(){this.r=0,this.g=0,this.b=0,this.a=0,this.next=null};

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/canvas/bitmap/desaturate.js":[function(require,module,exports){
"use strict";module.exports=function(t,n){var r,e,o,a,u,h,d=t.data;if(1===arguments.length)for(u=0,h=d.length;u<h;u+=4)d[u]=(299*d[u]+587*d[u+1]+144*d[u+2])/1e3;else if(2===arguments.length){if(0>=n>1)return console.warn("argument out of range (1-0)",n),t;for(u=0,h=d.length;u<h;u+=4)r=d[u],e=d[u+1],o=d[u+2],0===(a=Math.max(r,e,o))?(d[u]=Math.round(255*n),d[u+1]=Math.round(255*n),d[u+2]=Math.round(255*n)):(a=255*n/a,d[u]=Math.round(r*a),d[u+1]=Math.round(e*a),d[u+2]=Math.round(o*a))}return t};

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/canvas/bitmap/getAverageRGB.js":[function(require,module,exports){
"use strict";module.exports=function(r,t){var e,o=r.data,n=o.length,u=[0,0,0];for(e=0;e<n;e+=4)u[0]+=o[e],u[1]+=o[e+1],u[2]+=o[e+2];for(e=0;e<3;e++)u[e]=u[e]/(n/4)|0;return u};

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/canvas/bitmap/mul_table.js":[function(require,module,exports){
"use strict";module.exports=[512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,289,287,285,282,280,278,275,273,271,269,267,265,263,261,259];

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/canvas/bitmap/multiply.js":[function(require,module,exports){
"use strict";module.exports=function(t,r){for(var e=t.data,n=0;n<e.length;n+=4)e[n]*=r,e[n+1]*=r,e[n+2]*=r;return t};

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/canvas/bitmap/shg_table.js":[function(require,module,exports){
"use strict";module.exports=[9,11,12,13,13,14,14,15,15,15,15,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24];

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/canvas/bitmap/stackBlurRGB.js":[function(require,module,exports){
"use strict";function _typeof(r){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(r){return typeof r}:function(r){return r&&"function"==typeof Symbol&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r})(r)}var mul_table=require("./mul_table"),shg_table=require("./shg_table"),BlurStack=require("./BlurStack");module.exports=function(r,t){if("object"===_typeof(t)&&t.hasOwnProperty("radius")&&(t=t.radius),"number"!=typeof t||isNaN(t)||1>t)return r;var e,o,n,u,f,b,l,a,i,y,c,g,p,s,m,x,S,_,h,d,v=0|t,k=r.data,w=r.width,B=r.height,q=v+v+1,N=w-1,j=B-1,O=v+1,P=O*(O+1)/2,z=new BlurStack,A=z;for(n=1;n<q;n++)if(A=A.next=new BlurStack,n==O)var C=A;A.next=z;var D=null,E=null;l=b=0;var F=mul_table[v],G=shg_table[v];for(o=0;o<B;o++){for(s=m=x=a=i=y=0,c=O*(S=k[b]),g=O*(_=k[b+1]),p=O*(h=k[b+2]),a+=P*S,i+=P*_,y+=P*h,A=z,n=0;n<O;n++)A.r=S,A.g=_,A.b=h,A=A.next;for(n=1;n<O;n++)u=b+((N<n?N:n)<<2),a+=(A.r=S=k[u])*(d=O-n),i+=(A.g=_=k[u+1])*d,y+=(A.b=h=k[u+2])*d,s+=S,m+=_,x+=h,A=A.next;for(D=z,E=C,e=0;e<w;e++)k[b]=a*F>>G,k[b+1]=i*F>>G,k[b+2]=y*F>>G,a-=c,i-=g,y-=p,c-=D.r,g-=D.g,p-=D.b,u=l+((u=e+v+1)<N?u:N)<<2,a+=s+=D.r=k[u],i+=m+=D.g=k[u+1],y+=x+=D.b=k[u+2],D=D.next,c+=S=E.r,g+=_=E.g,p+=h=E.b,s-=S,m-=_,x-=h,E=E.next,b+=4;l+=w}for(e=0;e<w;e++){for(m=x=s=i=y=a=0,c=O*(S=k[b=e<<2]),g=O*(_=k[b+1]),p=O*(h=k[b+2]),a+=P*S,i+=P*_,y+=P*h,A=z,n=0;n<O;n++)A.r=S,A.g=_,A.b=h,A=A.next;for(f=w,n=1;n<=v;n++)b=f+e<<2,a+=(A.r=S=k[b])*(d=O-n),i+=(A.g=_=k[b+1])*d,y+=(A.b=h=k[b+2])*d,s+=S,m+=_,x+=h,A=A.next,n<j&&(f+=w);for(b=e,D=z,E=C,o=0;o<B;o++)k[u=b<<2]=a*F>>G,k[u+1]=i*F>>G,k[u+2]=y*F>>G,a-=c,i-=g,y-=p,c-=D.r,g-=D.g,p-=D.b,u=e+((u=o+O)<j?u:j)*w<<2,a+=s+=D.r=k[u],i+=m+=D.g=k[u+1],y+=x+=D.b=k[u+2],D=D.next,c+=S=E.r,g+=_=E.g,p+=h=E.b,s-=S,m-=_,x-=h,E=E.next,b+=w}return r};

},{"./BlurStack":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/canvas/bitmap/BlurStack.js","./mul_table":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/canvas/bitmap/mul_table.js","./shg_table":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/canvas/bitmap/shg_table.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/canvas/calcArcHConnector.js":[function(require,module,exports){
"use strict";module.exports=function(t,r,a,e,s,i,n){var u,h,M,f,o=e>t?1:-1,b=Math.abs(s-r),c=Math.abs(e-t),l=a+i;if(b<1&&(u=0,h=c),b>=l&&c>=l)M=l,u=a,h=a;else{if(M=Math.sqrt(b*i*2+b*a*2-b*b),a<(f=b*a/l)||M>c)return;var m=(l-b)/M;h=b*m+(u=M*a/l-f*m)}return n>0&&(n>1?n=Math.min(c-l,n):n*=c-l,u+=n,h+=n),[u*o+t,h*o+t,u,h]};

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/css/getBoxEdgeStyles.js":[function(require,module,exports){
"use strict";var CSS_BOX_PROPS=["boxSizing","position","objectFit"],CSS_EDGE_PROPS=["marginTop","marginBottom","marginLeft","marginRight","borderTopWidth","borderBottomWidth","borderLeftWidth","borderRightWidth","paddingTop","paddingBottom","paddingLeft","paddingRight"],CSS_POS_PROPS=["top","bottom","left","right"],CSS_SIZE_PROPS=["width","height","minWidth","minHeight","maxWidth","maxHeight"],CSS_ALL_PROPS=CSS_EDGE_PROPS.concat(CSS_SIZE_PROPS,CSS_POS_PROPS),cssDimensionRE=/^(-?[\d\.]+)(px|em|rem)$/;module.exports=function(t,e,S){var o,i,n,r,a,P;for(t instanceof HTMLElement&&(t=getComputedStyle(t)),e||(e={}),a=e.fontSize=parseFloat(t.fontSize),n=0,r=CSS_BOX_PROPS.length;n<r;n++)(i=CSS_BOX_PROPS[n])in t&&(e[i]=t[i]);var d=S?CSS_EDGE_PROPS:CSS_ALL_PROPS;for(n=0,r=d.length;n<r;n++)e["_"+(i=d[n])]=t[i],t[i]&&(o=cssDimensionRE.exec(t[i]))&&("px"===o[2]?e[i]=parseFloat(o[1]):"em"===o[2]?e[i]=parseFloat(o[1])*a:"rem"===o[2]?(P||(P=parseFloat(getComputedStyle(document.documentElement).fontSize)),e[i]=parseFloat(o[1])*P):(console.warn("Ignoring value",i,o[1],o[2]),e[i]=null));return e};

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/ease/fn/easeInQuad.js":[function(require,module,exports){
"use strict";module.exports=function(t,e,r,u,n){return u*(e/=n)*e+r};

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/ease/fn/easeOutQuad.js":[function(require,module,exports){
"use strict";module.exports=function(t,e,r,u){return-r*(t/=u)*(t-2)+e};

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/ease/fn/linear.js":[function(require,module,exports){
"use strict";var linear=function(r,e,n,t){return n*r/t+e};module.exports=linear;

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/geom/inflateRect.js":[function(require,module,exports){
"use strict";module.exports=function(t,h,o){2==arguments.length&&(o=h);var i={width:t.width+2*h,height:t.height+2*o};return i.width>=0?(i.left=t.left-h,i.right=i.left+i.width,i.x=i.left):(i.right=t.right+h,i.left=t.right-i.width,i.y=i.right),i.height>=0?(i.top=t.top-o,i.bottom=i.top+i.height,i.y=i.top):(i.bottom=t.bottom+o,i.top=t.bottom-i.height,i.y=i.bottom),i};

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/prefixedEvent.js":[function(require,module,exports){
"use strict";var lcPrefixes=[""].concat(require("./prefixes")),ucPrefixes=lcPrefixes.map(function(n){return""===n?n:n.charAt(0).toUpperCase()+n.substr(1)}),_solvers={},_cache={},_prefixedEvent=function(n,e,r){var t=/^[A-Z]/.test(n)?ucPrefixes:lcPrefixes;e||(e=document);for(var i=0;i<t.length;i++){if(r&&t[i]+r in e)return t[i]+n;if("on"+t[i]+n in e)return t[i]+n}return null};_solvers.transitionend=function(){var n,e=document.body.style,r={transition:"transitionend",WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd"};for(n in r)if(n in e)return r[n];return null},module.exports=function(n){return _cache.hasOwnProperty(n)||(_cache[n]=_solvers.hasOwnProperty(n)?_solvers[n]():_prefixedEvent.apply(null,arguments),null===_cache[n]?console.warn("Event '%s' not found",n):_cache[n]),_cache[n]};

},{"./prefixes":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/prefixes.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/prefixedProperty.js":[function(require,module,exports){
"use strict";var prefixes=require("./prefixes"),_prefixNum=prefixes.length,_cache={},_prefixedProperty=function(e,r){var i,t;if(e in r)return e;t=e[0].toUpperCase()+e.slice(1);for(var n=0;n<_prefixNum;n++)if((i=prefixes[n]+t)in r)return i;return console.error("Property '%s' not found",e),null};module.exports=function(e,r){return _cache[e]||(_cache[e]=_prefixedProperty(e,r||document.body.style))};

},{"./prefixes":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/prefixes.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/prefixedStyleName.js":[function(require,module,exports){
"use strict";var prefixes=require("./prefixes"),_prefixNum=prefixes.length,_cache={},_prefixedStyleName=function(e,r){var n;if(e in r)return e;for(var i=0;i<_prefixNum;i++)if((n="-"+prefixes[i]+"-"+e)in r)return n;return console.warn("CSS style '%s' not found",e),null};module.exports=function(e,r){return _cache[e]||(_cache[e]=_prefixedStyleName(e,r||document.body.style))};

},{"./prefixes":"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/prefixes.js"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/prefixes.js":[function(require,module,exports){
"use strict";module.exports=["webkit","moz","ms","o"];

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/promise/rejectAll.js":[function(require,module,exports){
"use strict";module.exports=function(t,e){return t.length>0&&(t.forEach(function(t,n,r){t.reject(e),r[n]=null}),t.length=0),t};

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/promise/resolveAll.js":[function(require,module,exports){
"use strict";module.exports=function(e,n){return 0!=e.length&&(e.forEach(function(e,t,l){e.resolve(n),l[t]=null}),e.length=0),e};

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/strings/camelToDashed.js":[function(require,module,exports){
"use strict";module.exports=function(e){return e.replace(/[A-Z]/g,function(e){return"-"+e.toLowerCase()})};

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/strings/stripTags.js":[function(require,module,exports){
"use strict";module.exports=function(e){return e.replace(/<[^>]+>/g,"")};

},{}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/utils/touch/SmoothPanRecognizer.js":[function(require,module,exports){
"use strict";var Hammer=require("hammerjs");function dirStr(t){return t==Hammer.DIRECTION_DOWN?"down":t==Hammer.DIRECTION_UP?"up":t==Hammer.DIRECTION_LEFT?"left":t==Hammer.DIRECTION_RIGHT?"right":""}function SmoothPan(){var t=Hammer.Pan.apply(this,arguments);return this.thresholdOffsetX=null,this.thresholdOffsetY=null,this.thresholdOffset=null,t}Hammer.inherit(SmoothPan,Hammer.Pan,{emit:function(t){var e=this.options.threshold,r=t.direction;return this.state==Hammer.STATE_BEGAN&&(this.thresholdOffsetX=r&Hammer.DIRECTION_HORIZONTAL?r&Hammer.DIRECTION_LEFT?e:-e:0,this.thresholdOffsetY=r&Hammer.DIRECTION_VERTICAL?r&Hammer.DIRECTION_UP?e:-e:0),t.thresholdOffsetX=this.thresholdOffsetX,t.thresholdOffsetY=this.thresholdOffsetY,t.thresholdDeltaX=t.deltaX+this.thresholdOffsetX,t.thresholdDeltaY=t.deltaY+this.thresholdOffsetY,this.pX=t.deltaX,this.pY=t.deltaY,(r=dirStr(r))&&this.manager.emit(this.options.event+r,t),Hammer.Recognizer.prototype.emit.apply(this,arguments)}}),module.exports=SmoothPan;

},{"hammerjs":"hammerjs"}],"/Users/pablo/Work/projects/folio/folio-workspace-assets/src/sass/variables.json":[function(require,module,exports){
module.exports={
	"video_crop_px": "0",
	"transform_type": "3d",
	"transitions": {
		"ease": "ease-in-out",
		"duration_ms": "350",
		"delay_interval_ms": "34",
		"min_delay_ms": "34"
	},
	"breakpoints": {
		"landscape": "'(orientation: landscape)'",
		"portrait": "'(orientation: portrait)'",
		"xsmall-stretch": "'not screen and (min-width: 460px), not screen and (min-height: 420px)'",
		"small-stretch": "'not screen and (min-width: 704px), not screen and (min-height: 540px)'",
		"default":"'only screen and (min-width: 704px) and (min-height: 540px)'",
		"medium-wide": "'only screen and (min-width: 1024px) and (max-width: 1223px) and (min-height: 420px)'",
		"medium-wide-stretch": "'only screen and (min-width: 1224px) and (min-height: 420px)'"
	},
	"default_colors": {
		"color": "hsl(47, 5%, 15%)",
		"background-color": "hsl(47, 5%, 95%)",
		"link-color": "hsl(10, 80%, 50%)"
	},
	"temp": {
		"collapse_offset": "360"
	},
	"_ignore": {
		"transitions": {
			"ease": "cubic-bezier(0.42, 0.0, 0.58, 1.0)",
			"duration_ms": "400",
			"delay_interval_ms": "134",
			"min_delay_ms": "34"
		},
		"default_colors": {
			"--link-color": "hsl(10, 80%, 50%)",
			"--alt-background-color": "unset"
		},
		"units": {
			"hu_px": "20",
			"vu_px": "12"
		},
		"breakpoints": {
			"medium-wide-stretch": "'only screen and (min-width: 1024px) and (min-height: 420px)'",
			"large-wide": "'only screen and (min-width: 1824px) and (min-height: 1024px)'",
			"mobile": "'not screen and (min-width: 704px), not screen and (min-height: 540px)'",
			"unsupported": "'not screen and (min-width: 704px)'",
			"unquoted": "only screen and (min-width: 1824px)",
			"unquoted_neg": "not screen and (min-width: 704px)",
			"quoted_combined": "'not screen and (min-width: 704px), not screen and (min-height: 540px)'",
			"array": [
				"only screen and (min-width: 704px)",
				"not screen and (min-width: 704px)",
				"not screen and (min-height: 540px)"
			]
		}
	}
}

},{}],"Backbone.Mutators":[function(require,module,exports){
!function(t,s,i){"use strict";"object"==typeof exports?module.exports=s(require("underscore"),require("backbone")):"function"==typeof define&&define.amd?define(["underscore","backbone"],function(i,o){return i=void 0===i?t._:i,o=void 0===o?t.Backbone:o,t.returnExportsGlobal=s(i,o,t)}):t.returnExportsGlobal=s(t._,t.Backbone)}(this,function(t,s,i,o){"use strict";s=s===o?i.Backbone:s,t=t===o?i._:t;var e=function(){},r=s.Model.prototype.get,n=s.Model.prototype.set,u=s.Model.prototype.toJSON;return e.prototype.mutators={},e.prototype.get=function(s){var i=this.mutators!==o;return!0===i&&!0===t.isFunction(this.mutators[s])?this.mutators[s].call(this):!0===i&&!0===t.isObject(this.mutators[s])&&!0===t.isFunction(this.mutators[s].get)?this.mutators[s].get.call(this):r.call(this,s)},e.prototype.set=function(s,i,e){var r=this.mutators!==o,u=null,a=null;return u=n.call(this,s,i,e),t.isObject(s)||null===s?(a=s,e=i):(a={})[s]=i,!0===r&&!0===t.isObject(this.mutators[s])&&(!0===t.isFunction(this.mutators[s].set)?u=this.mutators[s].set.call(this,s,a[s],e,t.bind(n,this)):t.isFunction(this.mutators[s])&&(u=this.mutators[s].call(this,s,a[s],e,t.bind(n,this)))),!0===r&&t.isObject(a)&&t.each(a,t.bind(function(s,i){if(!0===t.isObject(this.mutators[i])){var r=this.mutators[i];t.isFunction(r.set)&&(r=r.set),t.isFunction(r)&&((e===o||!0===t.isObject(e)&&!0!==e.silent&&e.mutators!==o&&!0!==e.mutators.silent)&&this.trigger("mutators:set:"+i),r.call(this,i,s,e,t.bind(n,this)))}},this)),u},e.prototype.toJSON=function(s){var i,o,e=u.call(this);return t.each(this.mutators,t.bind(function(r,n){!0===t.isObject(this.mutators[n])&&t.isFunction(this.mutators[n].get)?(i=this.isSaving?this.isSaving(s,r,n):t.has(s||{},"emulateHTTP"),o=this.mutators[n].transient,i&&o||(e[n]=t.bind(this.mutators[n].get,this)())):t.isFunction(this.mutators[n])&&(e[n]=t.bind(this.mutators[n],this)())},this)),e},e.prototype.escape=function(s){var i=this.get(s);return t.escape(null==i?"":""+i)},t.extend(s.Model.prototype,e.prototype),s.Mutators=e,e});

},{"backbone":"backbone","underscore":"underscore"}],"backbone.babysitter":[function(require,module,exports){
!function(i,e){if("function"==typeof define&&define.amd)define(["backbone","underscore"],function(i,t){return e(i,t)});else if("undefined"!=typeof exports){var t=require("backbone"),n=require("underscore");module.exports=e(t,n)}else e(i.Backbone,i._)}(this,function(i,e){"use strict";var t=i.ChildViewContainer;return i.ChildViewContainer=function(i,e){var t=function(i){this._views={},this._indexByModel={},this._indexByCustom={},this._updateLength(),e.each(i,this.add,this)};e.extend(t.prototype,{add:function(i,e){var t=i.cid;return this._views[t]=i,i.model&&(this._indexByModel[i.model.cid]=t),e&&(this._indexByCustom[e]=t),this._updateLength(),this},findByModel:function(i){return this.findByModelCid(i.cid)},findByModelCid:function(i){var e=this._indexByModel[i];return this.findByCid(e)},findByCustom:function(i){var e=this._indexByCustom[i];return this.findByCid(e)},findByIndex:function(i){return e.values(this._views)[i]},findByCid:function(i){return this._views[i]},remove:function(i){var t=i.cid;return i.model&&delete this._indexByModel[i.model.cid],e.any(this._indexByCustom,function(i,e){if(i===t)return delete this._indexByCustom[e],!0},this),delete this._views[t],this._updateLength(),this},call:function(i){this.apply(i,e.tail(arguments))},apply:function(i,t){e.each(this._views,function(n){e.isFunction(n[i])&&n[i].apply(n,t||[])})},_updateLength:function(){this.length=e.size(this._views)}});return e.each(["forEach","each","map","find","detect","filter","select","reject","every","all","some","any","include","contains","invoke","toArray","first","initial","rest","last","without","isEmpty","pluck","reduce"],function(i){t.prototype[i]=function(){var t=[e.values(this._views)].concat(e.toArray(arguments));return e[i].apply(e,t)}}),t}(0,e),i.ChildViewContainer.VERSION="0.1.11",i.ChildViewContainer.noConflict=function(){return i.ChildViewContainer=t,this},i.ChildViewContainer});

},{"backbone":"backbone","underscore":"underscore"}],"backbone.native":[function(require,module,exports){
(function(){"use strict";var e=/^([^.]+)?(?:\.([^.]+))?$/,t=Element.prototype.matchesSelector||null;t||["webkit","moz","o","ms"].forEach(function(e){var n=Element.prototype[e+"MatchesSelector"];n&&(t=n)});var n="backboneNativeKey"+Math.random(),r=1,o={},i=[];function a(e){e[n]||(e[n]=0===i.length?++r:i.pop());var t=e[n];return o[t]||(o[t]=[])}function s(e){var t=e[n];o[t]&&(o[t]=null,e[n]=null,i.push(t))}function c(n,r,o,i){"function"==typeof o&&(i=o,o=null);var s=e.exec(r);r=s[1]||null;var c=s[2]||null;if(r){var u=i,l=i;u=o?function(e){for(var r=e.target;r&&r!==n;r=r.parentElement)if(t.call(r,o)){var i=l.call(r,e,r);return!1===i&&(e.stopPropagation(),e.preventDefault()),i}}:function(e){var t=l.call(n,e,n);return!1===t&&(e.stopPropagation(),e.preventDefault()),t},n.addEventListener(r,u,!1),a(n).push({eventName:r,callback:i,handler:u,namespace:c,selector:o})}}function u(t,n,r,o){"function"==typeof r&&(o=r,r=null);var i=e.exec(n||"");n=i[1];var c=i[2],u=a(t)||[];n||c||r||o?(u.filter(function(e){return!(c&&e.namespace!==c||n&&e.eventName!==n||o&&e.callback!==o||r&&e.selector!==r)}).forEach(function(e){t.removeEventListener(e.eventName,e.handler,!1),u.splice(u.indexOf(e),1)}),0===u.length&&s(t)):(u.forEach(function(e){t.removeEventListener(e.eventName,e.handler,!1)}),s(t))}function l(e,t){if(t=t||document,!(this instanceof l))return new l(e,t);if(e)if("string"==typeof e)if(/^\s*</.test(e)){var n=document.createElement("div");n.innerHTML=e,this[0]=n.firstChild,n.removeChild(n.firstChild),this.length=1}else this[0]=t.querySelector(e),this.length=1;else this[0]=e,this.length=1;else this.length=0}if(l.prototype={hide:null,appendTo:null,find:null,attr:function(e){return Object.keys(e).forEach(function(t){switch(t){case"html":this[0].innerHTML=e[t];break;case"text":this[0].textContent=e[t];break;case"class":this[0].className=e[t];break;default:this[0].setAttribute(t,e[t])}},this),this},html:function(e){return this[0].innerHTML=e,this},remove:function(){var e=this[0];return e.parentElement&&e.parentElement.removeChild(e),function e(t){u(t);for(var n=0,r=t.childNodes.length;n<r;n++)t.childNodes[n].nodeType!==Node.TEXT_NODE&&e(t.childNodes[n])}(e),this},on:function(e,t,n){return c(this[0],e,t,n),this},off:function(e,t,n){return u(this[0],e,t,n),this},bind:function(e,t){return this.on(e,t)},unbind:function(e,t){return this.off(e,t)},delegate:function(e,t,n){return this.on(t,e,n)},undelegate:function(e,t,n){return this.off(t,e,n)}},l.ajax=function(e){var t=(e=e||{}).type||"GET",n=e.url,r=void 0===e.processData||!!e.processData,o=e.data;if(r&&"object"==typeof o){var i=Object.keys(o).map(function(e){return encodeURIComponent(e)+"="+encodeURIComponent(o[e])});o=i.join("&")}!o||"GET"!==t&&"HEAD"!==t||(n+=(-1===n.indexOf("?")?"?":"&")+o,o=void 0);var a=new XMLHttpRequest;return a.open(t,n,!0),e.contentType&&a.setRequestHeader("Content-Type",e.contentType),e.beforeSend&&e.beforeSend(a),a.onload=function(){var t=!1,n=a.responseText;if("json"===e.dataType)try{n=JSON.parse(n)}catch(e){t=!0}!t&&a.status>=200&&a.status<300?e.success&&e.success(n,a.statusText,a):e.error&&e.error(a)}.bind(this),a.onerror=a.onabort=function(){e.error&&e.error(a)},a.send(o),a},l.on=c,l.off=u,"undefined"!=typeof exports)return module.exports=l;var f=this,h=f.Backbone?f.Backbone.Native:null,d=f.$;f.Backbone&&(f.Backbone.Native=l),f.$=l,l.noConflict=function(e){return f.$=d,e&&(f.Backbone.Native=h),l},f.Backbone&&(f.Backbone.setDomLibrary?f.Backbone.setDomLibrary(l):f.Backbone.$=l)}).call(this);

},{}],"backbone":[function(require,module,exports){
!function(t,e){if("function"==typeof define&&define.amd)define(["underscore","jquery","exports"],function(i,n,s){t.Backbone=e(t,s,i,n)});else if("undefined"!=typeof exports){var i=require("underscore");e(t,exports,i)}else t.Backbone=e(t,{},t._,t.jQuery||t.Zepto||t.ender||t.$)}(this,function(t,e,i,n){var s=t.Backbone,r=[],a=r.slice;e.VERSION="1.1.2",e.$=n,e.noConflict=function(){return t.Backbone=s,this},e.emulateHTTP=!1,e.emulateJSON=!1;var o=e.Events={on:function(t,e,i){return c(this,"on",t,[e,i])&&e?(this._events||(this._events={}),(this._events[t]||(this._events[t]=[])).push({callback:e,context:i,ctx:i||this}),this):this},once:function(t,e,n){if(!c(this,"once",t,[e,n])||!e)return this;var s=this,r=i.once(function(){s.off(t,r),e.apply(this,arguments)});return r._callback=e,this.on(t,r,n)},off:function(t,e,n){var s,r,a,o,h,u,l,d;if(!this._events||!c(this,"off",t,[e,n]))return this;if(!t&&!e&&!n)return this._events=void 0,this;for(h=0,u=(o=t?[t]:i.keys(this._events)).length;h<u;h++)if(t=o[h],a=this._events[t]){if(this._events[t]=s=[],e||n)for(l=0,d=a.length;l<d;l++)r=a[l],(e&&e!==r.callback&&e!==r.callback._callback||n&&n!==r.context)&&s.push(r);s.length||delete this._events[t]}return this},trigger:function(t){if(!this._events)return this;var e=a.call(arguments,1);if(!c(this,"trigger",t,e))return this;var i=this._events[t],n=this._events.all;return i&&u(i,e),n&&u(n,arguments),this},stopListening:function(t,e,n){var s=this._listeningTo;if(!s)return this;var r=!e&&!n;for(var a in n||"object"!=typeof e||(n=this),t&&((s={})[t._listenId]=t),s)(t=s[a]).off(e,n,this),(r||i.isEmpty(t._events))&&delete this._listeningTo[a];return this}},h=/\s+/,c=function(t,e,i,n){if(!i)return!0;if("object"==typeof i){for(var s in i)t[e].apply(t,[s,i[s]].concat(n));return!1}if(h.test(i)){for(var r=i.split(h),a=0,o=r.length;a<o;a++)t[e].apply(t,[r[a]].concat(n));return!1}return!0},u=function(t,e){var i,n=-1,s=t.length,r=e[0],a=e[1],o=e[2];switch(e.length){case 0:for(;++n<s;)(i=t[n]).callback.call(i.ctx);return;case 1:for(;++n<s;)(i=t[n]).callback.call(i.ctx,r);return;case 2:for(;++n<s;)(i=t[n]).callback.call(i.ctx,r,a);return;case 3:for(;++n<s;)(i=t[n]).callback.call(i.ctx,r,a,o);return;default:for(;++n<s;)(i=t[n]).callback.apply(i.ctx,e);return}};i.each({listenTo:"on",listenToOnce:"once"},function(t,e){o[e]=function(e,n,s){return(this._listeningTo||(this._listeningTo={}))[e._listenId||(e._listenId=i.uniqueId("l"))]=e,s||"object"!=typeof n||(s=this),e[t](n,s,this),this}}),o.bind=o.on,o.unbind=o.off,i.extend(e,o);var l=e.Model=function(t,e){var n=t||{};e||(e={}),this.cid=i.uniqueId("c"),this.attributes={},e.collection&&(this.collection=e.collection),e.parse&&(n=this.parse(n,e)||{}),n=i.defaults({},n,i.result(this,"defaults")),this.set(n,e),this.changed={},this.initialize.apply(this,arguments)};i.extend(l.prototype,o,{changed:null,validationError:null,idAttribute:"id",initialize:function(){},toJSON:function(t){return i.clone(this.attributes)},sync:function(){return e.sync.apply(this,arguments)},get:function(t){return this.attributes[t]},escape:function(t){return i.escape(this.get(t))},has:function(t){return null!=this.get(t)},set:function(t,e,n){var s,r,a,o,h,c,u,l;if(null==t)return this;if("object"==typeof t?(r=t,n=e):(r={})[t]=e,n||(n={}),!this._validate(r,n))return!1;for(s in a=n.unset,h=n.silent,o=[],c=this._changing,this._changing=!0,c||(this._previousAttributes=i.clone(this.attributes),this.changed={}),l=this.attributes,u=this._previousAttributes,this.idAttribute in r&&(this.id=r[this.idAttribute]),r)e=r[s],i.isEqual(l[s],e)||o.push(s),i.isEqual(u[s],e)?delete this.changed[s]:this.changed[s]=e,a?delete l[s]:l[s]=e;if(!h){o.length&&(this._pending=n);for(var d=0,f=o.length;d<f;d++)this.trigger("change:"+o[d],this,l[o[d]],n)}if(c)return this;if(!h)for(;this._pending;)n=this._pending,this._pending=!1,this.trigger("change",this,n);return this._pending=!1,this._changing=!1,this},unset:function(t,e){return this.set(t,void 0,i.extend({},e,{unset:!0}))},clear:function(t){var e={};for(var n in this.attributes)e[n]=void 0;return this.set(e,i.extend({},t,{unset:!0}))},hasChanged:function(t){return null==t?!i.isEmpty(this.changed):i.has(this.changed,t)},changedAttributes:function(t){if(!t)return!!this.hasChanged()&&i.clone(this.changed);var e,n=!1,s=this._changing?this._previousAttributes:this.attributes;for(var r in t)i.isEqual(s[r],e=t[r])||((n||(n={}))[r]=e);return n},previous:function(t){return null!=t&&this._previousAttributes?this._previousAttributes[t]:null},previousAttributes:function(){return i.clone(this._previousAttributes)},fetch:function(t){void 0===(t=t?i.clone(t):{}).parse&&(t.parse=!0);var e=this,n=t.success;return t.success=function(i){if(!e.set(e.parse(i,t),t))return!1;n&&n(e,i,t),e.trigger("sync",e,i,t)},R(this,t),this.sync("read",this,t)},save:function(t,e,n){var s,r,a,o=this.attributes;if(null==t||"object"==typeof t?(s=t,n=e):(s={})[t]=e,n=i.extend({validate:!0},n),s&&!n.wait){if(!this.set(s,n))return!1}else if(!this._validate(s,n))return!1;s&&n.wait&&(this.attributes=i.extend({},o,s)),void 0===n.parse&&(n.parse=!0);var h=this,c=n.success;return n.success=function(t){h.attributes=o;var e=h.parse(t,n);if(n.wait&&(e=i.extend(s||{},e)),i.isObject(e)&&!h.set(e,n))return!1;c&&c(h,t,n),h.trigger("sync",h,t,n)},R(this,n),"patch"===(r=this.isNew()?"create":n.patch?"patch":"update")&&(n.attrs=s),a=this.sync(r,this,n),s&&n.wait&&(this.attributes=o),a},destroy:function(t){t=t?i.clone(t):{};var e=this,n=t.success,s=function(){e.trigger("destroy",e,e.collection,t)};if(t.success=function(i){(t.wait||e.isNew())&&s(),n&&n(e,i,t),e.isNew()||e.trigger("sync",e,i,t)},this.isNew())return t.success(),!1;R(this,t);var r=this.sync("delete",this,t);return t.wait||s(),r},url:function(){var t=i.result(this,"urlRoot")||i.result(this.collection,"url")||N();return this.isNew()?t:t.replace(/([^\/])$/,"$1/")+encodeURIComponent(this.id)},parse:function(t,e){return t},clone:function(){return new this.constructor(this.attributes)},isNew:function(){return!this.has(this.idAttribute)},isValid:function(t){return this._validate({},i.extend(t||{},{validate:!0}))},_validate:function(t,e){if(!e.validate||!this.validate)return!0;t=i.extend({},this.attributes,t);var n=this.validationError=this.validate(t,e)||null;return!n||(this.trigger("invalid",this,n,i.extend(e,{validationError:n})),!1)}});i.each(["keys","values","pairs","invert","pick","omit"],function(t){l.prototype[t]=function(){var e=a.call(arguments);return e.unshift(this.attributes),i[t].apply(i,e)}});var d=e.Collection=function(t,e){e||(e={}),e.model&&(this.model=e.model),void 0!==e.comparator&&(this.comparator=e.comparator),this._reset(),this.initialize.apply(this,arguments),t&&this.reset(t,i.extend({silent:!0},e))},f={add:!0,remove:!0,merge:!0},p={add:!0,remove:!1};i.extend(d.prototype,o,{model:l,initialize:function(){},toJSON:function(t){return this.map(function(e){return e.toJSON(t)})},sync:function(){return e.sync.apply(this,arguments)},add:function(t,e){return this.set(t,i.extend({merge:!1},e,p))},remove:function(t,e){var n,s,r,a,o=!i.isArray(t);for(e||(e={}),n=0,s=(t=o?[t]:i.clone(t)).length;n<s;n++)(a=t[n]=this.get(t[n]))&&(delete this._byId[a.id],delete this._byId[a.cid],r=this.indexOf(a),this.models.splice(r,1),this.length--,e.silent||(e.index=r,a.trigger("remove",a,this,e)),this._removeReference(a,e));return o?t[0]:t},set:function(t,e){(e=i.defaults({},e,f)).parse&&(t=this.parse(t,e));var n,s,r,a,o,h,c,u=!i.isArray(t);t=u?t?[t]:[]:i.clone(t);var d=e.at,p=this.model,g=this.comparator&&null==d&&!1!==e.sort,v=i.isString(this.comparator)?this.comparator:null,m=[],y=[],_={},b=e.add,w=e.merge,x=e.remove,E=!(g||!b||!x)&&[];for(n=0,s=t.length;n<s;n++){if(r=(o=t[n]||{})instanceof l?a=o:o[p.prototype.idAttribute||"id"],h=this.get(r))x&&(_[h.cid]=!0),w&&(o=o===a?a.attributes:o,e.parse&&(o=h.parse(o,e)),h.set(o,e),g&&!c&&h.hasChanged(v)&&(c=!0)),t[n]=h;else if(b){if(!(a=t[n]=this._prepareModel(o,e)))continue;m.push(a),this._addReference(a,e)}a=h||a,!E||!a.isNew()&&_[a.id]||E.push(a),_[a.id]=!0}if(x){for(n=0,s=this.length;n<s;++n)_[(a=this.models[n]).cid]||y.push(a);y.length&&this.remove(y,e)}if(m.length||E&&E.length)if(g&&(c=!0),this.length+=m.length,null!=d)for(n=0,s=m.length;n<s;n++)this.models.splice(d+n,0,m[n]);else{E&&(this.models.length=0);var k=E||m;for(n=0,s=k.length;n<s;n++)this.models.push(k[n])}if(c&&this.sort({silent:!0}),!e.silent){for(n=0,s=m.length;n<s;n++)(a=m[n]).trigger("add",a,this,e);(c||E&&E.length)&&this.trigger("sort",this,e)}return u?t[0]:t},reset:function(t,e){e||(e={});for(var n=0,s=this.models.length;n<s;n++)this._removeReference(this.models[n],e);return e.previousModels=this.models,this._reset(),t=this.add(t,i.extend({silent:!0},e)),e.silent||this.trigger("reset",this,e),t},push:function(t,e){return this.add(t,i.extend({at:this.length},e))},pop:function(t){var e=this.at(this.length-1);return this.remove(e,t),e},unshift:function(t,e){return this.add(t,i.extend({at:0},e))},shift:function(t){var e=this.at(0);return this.remove(e,t),e},slice:function(){return a.apply(this.models,arguments)},get:function(t){if(null!=t)return this._byId[t]||this._byId[t.id]||this._byId[t.cid]},at:function(t){return this.models[t]},where:function(t,e){return i.isEmpty(t)?e?void 0:[]:this[e?"find":"filter"](function(e){for(var i in t)if(t[i]!==e.get(i))return!1;return!0})},findWhere:function(t){return this.where(t,!0)},sort:function(t){if(!this.comparator)throw new Error("Cannot sort a set without a comparator");return t||(t={}),i.isString(this.comparator)||1===this.comparator.length?this.models=this.sortBy(this.comparator,this):this.models.sort(i.bind(this.comparator,this)),t.silent||this.trigger("sort",this,t),this},pluck:function(t){return i.invoke(this.models,"get",t)},fetch:function(t){void 0===(t=t?i.clone(t):{}).parse&&(t.parse=!0);var e=t.success,n=this;return t.success=function(i){var s=t.reset?"reset":"set";n[s](i,t),e&&e(n,i,t),n.trigger("sync",n,i,t)},R(this,t),this.sync("read",this,t)},create:function(t,e){if(e=e?i.clone(e):{},!(t=this._prepareModel(t,e)))return!1;e.wait||this.add(t,e);var n=this,s=e.success;return e.success=function(t,i){e.wait&&n.add(t,e),s&&s(t,i,e)},t.save(null,e),t},parse:function(t,e){return t},clone:function(){return new this.constructor(this.models)},_reset:function(){this.length=0,this.models=[],this._byId={}},_prepareModel:function(t,e){if(t instanceof l)return t;(e=e?i.clone(e):{}).collection=this;var n=new this.model(t,e);return n.validationError?(this.trigger("invalid",this,n.validationError,e),!1):n},_addReference:function(t,e){this._byId[t.cid]=t,null!=t.id&&(this._byId[t.id]=t),t.collection||(t.collection=this),t.on("all",this._onModelEvent,this)},_removeReference:function(t,e){this===t.collection&&delete t.collection,t.off("all",this._onModelEvent,this)},_onModelEvent:function(t,e,i,n){("add"!==t&&"remove"!==t||i===this)&&("destroy"===t&&this.remove(e,n),e&&t==="change:"+e.idAttribute&&(delete this._byId[e.previous(e.idAttribute)],null!=e.id&&(this._byId[e.id]=e)),this.trigger.apply(this,arguments))}});i.each(["forEach","each","map","collect","reduce","foldl","inject","reduceRight","foldr","find","detect","filter","select","reject","every","all","some","any","include","contains","invoke","max","min","toArray","size","first","head","take","initial","rest","tail","drop","last","without","difference","indexOf","shuffle","lastIndexOf","isEmpty","chain","sample"],function(t){d.prototype[t]=function(){var e=a.call(arguments);return e.unshift(this.models),i[t].apply(i,e)}});i.each(["groupBy","countBy","sortBy","indexBy"],function(t){d.prototype[t]=function(e,n){var s=i.isFunction(e)?e:function(t){return t.get(e)};return i[t](this.models,s,n)}});var g=e.View=function(t){this.cid=i.uniqueId("view"),t||(t={}),i.extend(this,i.pick(t,m)),this._ensureElement(),this.initialize.apply(this,arguments),this.delegateEvents()},v=/^(\S+)\s*(.*)$/,m=["model","collection","el","id","attributes","className","tagName","events"];i.extend(g.prototype,o,{tagName:"div",$:function(t){return this.$el.find(t)},initialize:function(){},render:function(){return this},remove:function(){return this.$el.remove(),this.stopListening(),this},setElement:function(t,i){return this.$el&&this.undelegateEvents(),this.$el=t instanceof e.$?t:e.$(t),this.el=this.$el[0],!1!==i&&this.delegateEvents(),this},delegateEvents:function(t){if(!t&&!(t=i.result(this,"events")))return this;for(var e in this.undelegateEvents(),t){var n=t[e];if(i.isFunction(n)||(n=this[t[e]]),n){var s=e.match(v),r=s[1],a=s[2];n=i.bind(n,this),r+=".delegateEvents"+this.cid,""===a?this.$el.on(r,n):this.$el.on(r,a,n)}}return this},undelegateEvents:function(){return this.$el.off(".delegateEvents"+this.cid),this},_ensureElement:function(){if(this.el)this.setElement(i.result(this,"el"),!1);else{var t=i.extend({},i.result(this,"attributes"));this.id&&(t.id=i.result(this,"id")),this.className&&(t.class=i.result(this,"className"));var n=e.$("<"+i.result(this,"tagName")+">").attr(t);this.setElement(n,!1)}}}),e.sync=function(t,n,s){var r=_[t];i.defaults(s||(s={}),{emulateHTTP:e.emulateHTTP,emulateJSON:e.emulateJSON});var a={type:r,dataType:"json"};if(s.url||(a.url=i.result(n,"url")||N()),null!=s.data||!n||"create"!==t&&"update"!==t&&"patch"!==t||(a.contentType="application/json",a.data=JSON.stringify(s.attrs||n.toJSON(s))),s.emulateJSON&&(a.contentType="application/x-www-form-urlencoded",a.data=a.data?{model:a.data}:{}),s.emulateHTTP&&("PUT"===r||"DELETE"===r||"PATCH"===r)){a.type="POST",s.emulateJSON&&(a.data._method=r);var o=s.beforeSend;s.beforeSend=function(t){if(t.setRequestHeader("X-HTTP-Method-Override",r),o)return o.apply(this,arguments)}}"GET"===a.type||s.emulateJSON||(a.processData=!1),"PATCH"===a.type&&y&&(a.xhr=function(){return new ActiveXObject("Microsoft.XMLHTTP")});var h=s.xhr=e.ajax(i.extend(a,s));return n.trigger("request",n,h,s),h};var y=!("undefined"==typeof window||!window.ActiveXObject||window.XMLHttpRequest&&(new XMLHttpRequest).dispatchEvent),_={create:"POST",update:"PUT",patch:"PATCH",delete:"DELETE",read:"GET"};e.ajax=function(){return e.$.ajax.apply(e.$,arguments)};var b=e.Router=function(t){t||(t={}),t.routes&&(this.routes=t.routes),this._bindRoutes(),this.initialize.apply(this,arguments)},w=/\((.*?)\)/g,x=/(\(\?)?:\w+/g,E=/\*\w+/g,k=/[\-{}\[\]+?.,\\\^$|#\s]/g;i.extend(b.prototype,o,{initialize:function(){},route:function(t,n,s){i.isRegExp(t)||(t=this._routeToRegExp(t)),i.isFunction(n)&&(s=n,n=""),s||(s=this[n]);var r=this;return e.history.route(t,function(i){var a=r._extractParameters(t,i);r.execute(s,a),r.trigger.apply(r,["route:"+n].concat(a)),r.trigger("route",n,a),e.history.trigger("route",r,n,a)}),this},execute:function(t,e){t&&t.apply(this,e)},navigate:function(t,i){return e.history.navigate(t,i),this},_bindRoutes:function(){if(this.routes){this.routes=i.result(this,"routes");for(var t,e=i.keys(this.routes);null!=(t=e.pop());)this.route(t,this.routes[t])}},_routeToRegExp:function(t){return t=t.replace(k,"\\$&").replace(w,"(?:$1)?").replace(x,function(t,e){return e?t:"([^/?]+)"}).replace(E,"([^?]*?)"),new RegExp("^"+t+"(?:\\?([\\s\\S]*))?$")},_extractParameters:function(t,e){var n=t.exec(e).slice(1);return i.map(n,function(t,e){return e===n.length-1?t||null:t?decodeURIComponent(t):null})}});var T=e.History=function(){this.handlers=[],i.bindAll(this,"checkUrl"),"undefined"!=typeof window&&(this.location=window.location,this.history=window.history)},$=/^[#\/]|\s+$/g,S=/^\/+|\/+$/g,H=/msie [\w.]+/,A=/\/$/,I=/#.*$/;T.started=!1,i.extend(T.prototype,o,{interval:50,atRoot:function(){return this.location.pathname.replace(/[^\/]$/,"$&/")===this.root},getHash:function(t){var e=(t||this).location.href.match(/#(.*)$/);return e?e[1]:""},getFragment:function(t,e){if(null==t)if(this._hasPushState||!this._wantsHashChange||e){t=decodeURI(this.location.pathname+this.location.search);var i=this.root.replace(A,"");t.indexOf(i)||(t=t.slice(i.length))}else t=this.getHash();return t.replace($,"")},start:function(t){if(T.started)throw new Error("Backbone.history has already been started");T.started=!0,this.options=i.extend({root:"/"},this.options,t),this.root=this.options.root,this._wantsHashChange=!1!==this.options.hashChange,this._wantsPushState=!!this.options.pushState,this._hasPushState=!!(this.options.pushState&&this.history&&this.history.pushState);var n=this.getFragment(),s=document.documentMode,r=H.exec(navigator.userAgent.toLowerCase())&&(!s||s<=7);if(this.root=("/"+this.root+"/").replace(S,"/"),r&&this._wantsHashChange){var a=e.$('<iframe src="javascript:0" tabindex="-1">');this.iframe=a.hide().appendTo("body")[0].contentWindow,this.navigate(n)}this._hasPushState?e.$(window).on("popstate",this.checkUrl):this._wantsHashChange&&"onhashchange"in window&&!r?e.$(window).on("hashchange",this.checkUrl):this._wantsHashChange&&(this._checkUrlInterval=setInterval(this.checkUrl,this.interval)),this.fragment=n;var o=this.location;if(this._wantsHashChange&&this._wantsPushState){if(!this._hasPushState&&!this.atRoot())return this.fragment=this.getFragment(null,!0),this.location.replace(this.root+"#"+this.fragment),!0;this._hasPushState&&this.atRoot()&&o.hash&&(this.fragment=this.getHash().replace($,""),this.history.replaceState({},document.title,this.root+this.fragment))}if(!this.options.silent)return this.loadUrl()},stop:function(){e.$(window).off("popstate",this.checkUrl).off("hashchange",this.checkUrl),this._checkUrlInterval&&clearInterval(this._checkUrlInterval),T.started=!1},route:function(t,e){this.handlers.unshift({route:t,callback:e})},checkUrl:function(t){var e=this.getFragment();if(e===this.fragment&&this.iframe&&(e=this.getFragment(this.getHash(this.iframe))),e===this.fragment)return!1;this.iframe&&this.navigate(e),this.loadUrl()},loadUrl:function(t){return t=this.fragment=this.getFragment(t),i.any(this.handlers,function(e){if(e.route.test(t))return e.callback(t),!0})},navigate:function(t,e){if(!T.started)return!1;e&&!0!==e||(e={trigger:!!e});var i=this.root+(t=this.getFragment(t||""));if(t=t.replace(I,""),this.fragment!==t){if(this.fragment=t,""===t&&"/"!==i&&(i=i.slice(0,-1)),this._hasPushState)this.history[e.replace?"replaceState":"pushState"]({},document.title,i);else{if(!this._wantsHashChange)return this.location.assign(i);this._updateHash(this.location,t,e.replace),this.iframe&&t!==this.getFragment(this.getHash(this.iframe))&&(e.replace||this.iframe.document.open().close(),this._updateHash(this.iframe.location,t,e.replace))}return e.trigger?this.loadUrl(t):void 0}},_updateHash:function(t,e,i){if(i){var n=t.href.replace(/(javascript:|#).*$/,"");t.replace(n+"#"+e)}else t.hash="#"+e}}),e.history=new T;l.extend=d.extend=b.extend=g.extend=T.extend=function(t,e){var n,s=this;n=t&&i.has(t,"constructor")?t.constructor:function(){return s.apply(this,arguments)},i.extend(n,s,e);var r=function(){this.constructor=n};return r.prototype=s.prototype,n.prototype=new r,t&&i.extend(n.prototype,t),n.__super__=s.prototype,n};var N=function(){throw new Error('A "url" property or function must be specified')},R=function(t,e){var i=e.error;e.error=function(n){i&&i(t,n,e),t.trigger("error",t,n,e)}};return e});

},{"underscore":"underscore"}],"classlist-polyfill":[function(require,module,exports){
"document"in window.self&&("classList"in document.createElement("_")&&(!document.createElementNS||"classList"in document.createElementNS("http://www.w3.org/2000/svg","g"))||function(t){"use strict";if("Element"in t){var e=t.Element.prototype,n=Object,i=String.prototype.trim||function(){return this.replace(/^\s+|\s+$/g,"")},s=Array.prototype.indexOf||function(t){for(var e=0,n=this.length;e<n;e++)if(e in this&&this[e]===t)return e;return-1},r=function(t,e){this.name=t,this.code=DOMException[t],this.message=e},o=function(t,e){if(""===e)throw new r("SYNTAX_ERR","An invalid or illegal string was specified");if(/\s/.test(e))throw new r("INVALID_CHARACTER_ERR","String contains an invalid character");return s.call(t,e)},c=function(t){for(var e=i.call(t.getAttribute("class")||""),n=e?e.split(/\s+/):[],s=0,r=n.length;s<r;s++)this.push(n[s]);this._updateClassName=function(){t.setAttribute("class",this.toString())}},a=c.prototype=[],l=function(){return new c(this)};if(r.prototype=Error.prototype,a.item=function(t){return this[t]||null},a.contains=function(t){return-1!==o(this,t+="")},a.add=function(){var t,e=arguments,n=0,i=e.length,s=!1;do{t=e[n]+"",-1===o(this,t)&&(this.push(t),s=!0)}while(++n<i);s&&this._updateClassName()},a.remove=function(){var t,e,n=arguments,i=0,s=n.length,r=!1;do{for(t=n[i]+"",e=o(this,t);-1!==e;)this.splice(e,1),r=!0,e=o(this,t)}while(++i<s);r&&this._updateClassName()},a.toggle=function(t,e){t+="";var n=this.contains(t),i=n?!0!==e&&"remove":!1!==e&&"add";return i&&this[i](t),!0===e||!1===e?e:!n},a.toString=function(){return this.join(" ")},n.defineProperty){var u={get:l,enumerable:!0,configurable:!0};try{n.defineProperty(e,"classList",u)}catch(t){void 0!==t.number&&-2146823252!==t.number||(u.enumerable=!1,n.defineProperty(e,"classList",u))}}else n.prototype.__defineGetter__&&e.__defineGetter__("classList",l)}}(window.self),function(){"use strict";var t=document.createElement("_");if(t.classList.add("c1","c2"),!t.classList.contains("c2")){var e=function(t){var e=DOMTokenList.prototype[t];DOMTokenList.prototype[t]=function(t){var n,i=arguments.length;for(n=0;n<i;n++)t=arguments[n],e.call(this,t)}};e("add"),e("remove")}if(t.classList.toggle("c3",!1),t.classList.contains("c3")){var n=DOMTokenList.prototype.toggle;DOMTokenList.prototype.toggle=function(t,e){return 1 in arguments&&!this.contains(t)==!e?e:n.call(this,t)}}t=null}());

},{}],"color":[function(require,module,exports){
"use strict";var colorString=require("color-string"),convert=require("color-convert"),_slice=[].slice,skippedModels=["keyword","gray","hex"],hashedModelKeys={};Object.keys(convert).forEach(function(r){hashedModelKeys[_slice.call(convert[r].labels).sort().join("")]=r});var limiters={};function Color(r,t){if(!(this instanceof Color))return new Color(r,t);if(t&&t in skippedModels&&(t=null),t&&!(t in convert))throw new Error("Unknown model: "+t);var o,e;if(r)if(r instanceof Color)this.model=r.model,this.color=r.color.slice(),this.valpha=r.valpha;else if("string"==typeof r){var n=colorString.get(r);if(null===n)throw new Error("Unable to parse color from string: "+r);this.model=n.model,e=convert[this.model].channels,this.color=n.value.slice(0,e),this.valpha="number"==typeof n.value[e]?n.value[e]:1}else if(r.length){this.model=t||"rgb",e=convert[this.model].channels;var a=_slice.call(r,0,e);this.color=zeroArray(a,e),this.valpha="number"==typeof r[e]?r[e]:1}else if("number"==typeof r)r&=16777215,this.model="rgb",this.color=[r>>16&255,r>>8&255,255&r],this.valpha=1;else{this.valpha=1;var l=Object.keys(r);"alpha"in r&&(l.splice(l.indexOf("alpha"),1),this.valpha="number"==typeof r.alpha?r.alpha:0);var i=l.sort().join("");if(!(i in hashedModelKeys))throw new Error("Unable to parse color from object: "+JSON.stringify(r));this.model=hashedModelKeys[i];var s=convert[this.model].labels,h=[];for(o=0;o<s.length;o++)h.push(r[s[o]]);this.color=zeroArray(h)}else this.model="rgb",this.color=[0,0,0],this.valpha=1;if(limiters[this.model])for(e=convert[this.model].channels,o=0;o<e;o++){var c=limiters[this.model][o];c&&(this.color[o]=c(this.color[o]))}this.valpha=Math.max(0,Math.min(1,this.valpha)),Object.freeze&&Object.freeze(this)}function roundTo(r,t){return Number(r.toFixed(t))}function roundToPlace(r){return function(t){return roundTo(t,r)}}function getset(r,t,o){return(r=Array.isArray(r)?r:[r]).forEach(function(r){(limiters[r]||(limiters[r]=[]))[t]=o}),r=r[0],function(e){var n;return arguments.length?(o&&(e=o(e)),(n=this[r]()).color[t]=e,n):(n=this[r]().color[t],o&&(n=o(n)),n)}}function maxfn(r){return function(t){return Math.max(0,Math.min(r,t))}}function assertArray(r){return Array.isArray(r)?r:[r]}function zeroArray(r,t){for(var o=0;o<t;o++)"number"!=typeof r[o]&&(r[o]=0);return r}Color.prototype={toString:function(){return this.string()},toJSON:function(){return this[this.model]()},string:function(r){var t=this.model in colorString.to?this:this.rgb(),o=1===(t=t.round("number"==typeof r?r:1)).valpha?t.color:t.color.concat(this.valpha);return colorString.to[t.model](o)},percentString:function(r){var t=this.rgb().round("number"==typeof r?r:1),o=1===t.valpha?t.color:t.color.concat(this.valpha);return colorString.to.rgb.percent(o)},array:function(){return 1===this.valpha?this.color.slice():this.color.concat(this.valpha)},object:function(){for(var r={},t=convert[this.model].channels,o=convert[this.model].labels,e=0;e<t;e++)r[o[e]]=this.color[e];return 1!==this.valpha&&(r.alpha=this.valpha),r},unitArray:function(){var r=this.rgb().color;return r[0]/=255,r[1]/=255,r[2]/=255,1!==this.valpha&&r.push(this.valpha),r},unitObject:function(){var r=this.rgb().object();return r.r/=255,r.g/=255,r.b/=255,1!==this.valpha&&(r.alpha=this.valpha),r},round:function(r){return r=Math.max(r||0,0),new Color(this.color.map(roundToPlace(r)).concat(this.valpha),this.model)},alpha:function(r){return arguments.length?new Color(this.color.concat(Math.max(0,Math.min(1,r))),this.model):this.valpha},red:getset("rgb",0,maxfn(255)),green:getset("rgb",1,maxfn(255)),blue:getset("rgb",2,maxfn(255)),hue:getset(["hsl","hsv","hsl","hwb","hcg"],0,function(r){return(r%360+360)%360}),saturationl:getset("hsl",1,maxfn(100)),lightness:getset("hsl",2,maxfn(100)),saturationv:getset("hsv",1,maxfn(100)),value:getset("hsv",2,maxfn(100)),chroma:getset("hcg",1,maxfn(100)),gray:getset("hcg",2,maxfn(100)),white:getset("hwb",1,maxfn(100)),wblack:getset("hwb",2,maxfn(100)),cyan:getset("cmyk",0,maxfn(100)),magenta:getset("cmyk",1,maxfn(100)),yellow:getset("cmyk",2,maxfn(100)),black:getset("cmyk",3,maxfn(100)),x:getset("xyz",0,maxfn(100)),y:getset("xyz",1,maxfn(100)),z:getset("xyz",2,maxfn(100)),l:getset("lab",0,maxfn(100)),a:getset("lab",1),b:getset("lab",2),keyword:function(r){return arguments.length?new Color(r):convert[this.model].keyword(this.color)},hex:function(r){return arguments.length?new Color(r):colorString.to.hex(this.rgb().round().color)},rgbNumber:function(){var r=this.rgb().color;return(255&r[0])<<16|(255&r[1])<<8|255&r[2]},luminosity:function(){for(var r=this.rgb().color,t=[],o=0;o<r.length;o++){var e=r[o]/255;t[o]=e<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)}return.2126*t[0]+.7152*t[1]+.0722*t[2]},contrast:function(r){var t=this.luminosity(),o=r.luminosity();return t>o?(t+.05)/(o+.05):(o+.05)/(t+.05)},level:function(r){var t=this.contrast(r);return t>=7.1?"AAA":t>=4.5?"AA":""},isDark:function(){var r=this.rgb().color;return(299*r[0]+587*r[1]+114*r[2])/1e3<128},isLight:function(){return!this.isDark()},negate:function(){for(var r=this.rgb(),t=0;t<3;t++)r.color[t]=255-r.color[t];return r},lighten:function(r){var t=this.hsl();return t.color[2]+=t.color[2]*r,t},darken:function(r){var t=this.hsl();return t.color[2]-=t.color[2]*r,t},saturate:function(r){var t=this.hsl();return t.color[1]+=t.color[1]*r,t},desaturate:function(r){var t=this.hsl();return t.color[1]-=t.color[1]*r,t},whiten:function(r){var t=this.hwb();return t.color[1]+=t.color[1]*r,t},blacken:function(r){var t=this.hwb();return t.color[2]+=t.color[2]*r,t},grayscale:function(){var r=this.rgb().color,t=.3*r[0]+.59*r[1]+.11*r[2];return Color.rgb(t,t,t)},fade:function(r){return this.alpha(this.valpha-this.valpha*r)},opaquer:function(r){return this.alpha(this.valpha+this.valpha*r)},rotate:function(r){var t=this.hsl(),o=t.color[0];return o=(o=(o+r)%360)<0?360+o:o,t.color[0]=o,t},mix:function(r,t){var o=r.rgb(),e=this.rgb(),n=void 0===t?.5:t,a=2*n-1,l=o.alpha()-e.alpha(),i=((a*l==-1?a:(a+l)/(1+a*l))+1)/2,s=1-i;return Color.rgb(i*o.red()+s*e.red(),i*o.green()+s*e.green(),i*o.blue()+s*e.blue(),o.alpha()*n+e.alpha()*(1-n))}},Object.keys(convert).forEach(function(r){if(-1===skippedModels.indexOf(r)){var t=convert[r].channels;Color.prototype[r]=function(){if(this.model===r)return new Color(this);if(arguments.length)return new Color(arguments,r);var o="number"==typeof arguments[t]?t:this.valpha;return new Color(assertArray(convert[this.model][r].raw(this.color)).concat(o),r)},Color[r]=function(o){return"number"==typeof o&&(o=zeroArray(_slice.call(arguments),t)),new Color(o,r)}}}),module.exports=Color;

},{"color-convert":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/color-convert/index.js","color-string":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/color-string/index.js"}],"es6-promise/auto":[function(require,module,exports){
"use strict";module.exports=require("./").polyfill();

},{"./":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/es6-promise/dist/es6-promise.js"}],"fullscreen-polyfill":[function(require,module,exports){
"use strict";!function(e){var n,l,r={w3:{enabled:"fullscreenEnabled",element:"fullscreenElement",request:"requestFullscreen",exit:"exitFullscreen",events:{change:"fullscreenchange",error:"fullscreenerror"}},webkit:{enabled:"webkitIsFullScreen",element:"webkitCurrentFullScreenElement",request:"webkitRequestFullScreen",exit:"webkitCancelFullScreen",events:{change:"webkitfullscreenchange",error:"webkitfullscreenerror"}},moz:{enabled:"mozFullScreenEnabled",element:"mozFullScreenElement",request:"mozRequestFullScreen",exit:"mozCancelFullScreen",events:{change:"mozfullscreenchange",error:"mozfullscreenerror"}},ms:{enabled:"msFullscreenEnabled",element:"msFullscreenElement",request:"msRequestFullscreen",exit:"msExitFullscreen",events:{change:"MSFullscreenChange",error:"MSFullscreenError"}}},t=r.w3;for(l in r)if(r[l].enabled in e){n=r[l];break}function s(n,l,r){var t=e.createEvent("Event");t.initEvent(n,!0,!1),r.type,l.dispatchEvent(t)}t.enabled in e||!n||(e.addEventListener(n.events.change,function(l){e[t.enabled]=e[n.enabled],e[t.element]=e[n.element],s(t.events.change,l.target,l)},!1),e.addEventListener(n.events.error,function(e){s(t.events.error,e.target,e)},!1),e[t.enabled]=e[n.enabled],e[t.element]=e[n.element],e[t.exit]=e[n.exit],Element.prototype[t.request]=function(){return this[n.request].apply(this,arguments)})}(document);

},{}],"hammerjs":[function(require,module,exports){
!function(t,e,i,n){"use strict";var r,s=["","webkit","Moz","MS","ms","o"],o=e.createElement("div"),a="function",h=Math.round,u=Math.abs,c=Date.now;function l(t,e,i){return setTimeout(T(t,i),e)}function p(t,e,i){return!!Array.isArray(t)&&(f(t,i[e],i),!0)}function f(t,e,i){var r;if(t)if(t.forEach)t.forEach(e,i);else if(t.length!==n)for(r=0;r<t.length;)e.call(i,t[r],r,t),r++;else for(r in t)t.hasOwnProperty(r)&&e.call(i,t[r],r,t)}function d(e,i,n){var r="DEPRECATED METHOD: "+i+"\n"+n+" AT \n";return function(){var i=new Error("get-stack-trace"),n=i&&i.stack?i.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",s=t.console&&(t.console.warn||t.console.log);return s&&s.call(t.console,r,n),e.apply(this,arguments)}}r="function"!=typeof Object.assign?function(t){if(t===n||null===t)throw new TypeError("Cannot convert undefined or null to object");for(var e=Object(t),i=1;i<arguments.length;i++){var r=arguments[i];if(r!==n&&null!==r)for(var s in r)r.hasOwnProperty(s)&&(e[s]=r[s])}return e}:Object.assign;var v=d(function(t,e,i){for(var r=Object.keys(e),s=0;s<r.length;)(!i||i&&t[r[s]]===n)&&(t[r[s]]=e[r[s]]),s++;return t},"extend","Use `assign`."),m=d(function(t,e){return v(t,e,!0)},"merge","Use `assign`.");function g(t,e,i){var n,s=e.prototype;(n=t.prototype=Object.create(s)).constructor=t,n._super=s,i&&r(n,i)}function T(t,e){return function(){return t.apply(e,arguments)}}function y(t,e){return typeof t==a?t.apply(e&&e[0]||n,e):t}function E(t,e){return t===n?e:t}function I(t,e,i){f(S(e),function(e){t.addEventListener(e,i,!1)})}function A(t,e,i){f(S(e),function(e){t.removeEventListener(e,i,!1)})}function _(t,e){for(;t;){if(t==e)return!0;t=t.parentNode}return!1}function C(t,e){return t.indexOf(e)>-1}function S(t){return t.trim().split(/\s+/g)}function b(t,e,i){if(t.indexOf&&!i)return t.indexOf(e);for(var n=0;n<t.length;){if(i&&t[n][i]==e||!i&&t[n]===e)return n;n++}return-1}function P(t){return Array.prototype.slice.call(t,0)}function D(t,e,i){for(var n=[],r=[],s=0;s<t.length;){var o=e?t[s][e]:t[s];b(r,o)<0&&n.push(t[s]),r[s]=o,s++}return i&&(n=e?n.sort(function(t,i){return t[e]>i[e]}):n.sort()),n}function x(t,e){for(var i,r,o=e[0].toUpperCase()+e.slice(1),a=0;a<s.length;){if((r=(i=s[a])?i+o:e)in t)return r;a++}return n}var w=1;function O(e){var i=e.ownerDocument||e;return i.defaultView||i.parentWindow||t}var R="ontouchstart"in t,M=x(t,"PointerEvent")!==n,z=R&&/mobile|tablet|ip(ad|hone|od)|android/i.test(navigator.userAgent),N=25,X=1,Y=2,F=4,W=8,q=1,k=2,H=4,L=8,U=16,V=k|H,j=L|U,G=V|j,Z=["x","y"],B=["clientX","clientY"];function $(t,e){var i=this;this.manager=t,this.callback=e,this.element=t.element,this.target=t.options.inputTarget,this.domHandler=function(e){y(t.options.enable,[t])&&i.handler(e)},this.init()}function J(t,e,i){var r=i.pointers.length,s=i.changedPointers.length,o=e&X&&r-s==0,a=e&(F|W)&&r-s==0;i.isFirst=!!o,i.isFinal=!!a,o&&(t.session={}),i.eventType=e,function(t,e){var i=t.session,r=e.pointers,s=r.length;i.firstInput||(i.firstInput=K(e));s>1&&!i.firstMultiple?i.firstMultiple=K(e):1===s&&(i.firstMultiple=!1);var o=i.firstInput,a=i.firstMultiple,h=a?a.center:o.center,l=e.center=Q(r);e.timeStamp=c(),e.deltaTime=e.timeStamp-o.timeStamp,e.angle=nt(h,l),e.distance=it(h,l),function(t,e){var i=e.center,n=t.offsetDelta||{},r=t.prevDelta||{},s=t.prevInput||{};e.eventType!==X&&s.eventType!==F||(r=t.prevDelta={x:s.deltaX||0,y:s.deltaY||0},n=t.offsetDelta={x:i.x,y:i.y});e.deltaX=r.x+(i.x-n.x),e.deltaY=r.y+(i.y-n.y)}(i,e),e.offsetDirection=et(e.deltaX,e.deltaY);var p=tt(e.deltaTime,e.deltaX,e.deltaY);e.overallVelocityX=p.x,e.overallVelocityY=p.y,e.overallVelocity=u(p.x)>u(p.y)?p.x:p.y,e.scale=a?(f=a.pointers,d=r,it(d[0],d[1],B)/it(f[0],f[1],B)):1,e.rotation=a?function(t,e){return nt(e[1],e[0],B)+nt(t[1],t[0],B)}(a.pointers,r):0,e.maxPointers=i.prevInput?e.pointers.length>i.prevInput.maxPointers?e.pointers.length:i.prevInput.maxPointers:e.pointers.length,function(t,e){var i,r,s,o,a=t.lastInterval||e,h=e.timeStamp-a.timeStamp;if(e.eventType!=W&&(h>N||a.velocity===n)){var c=e.deltaX-a.deltaX,l=e.deltaY-a.deltaY,p=tt(h,c,l);r=p.x,s=p.y,i=u(p.x)>u(p.y)?p.x:p.y,o=et(c,l),t.lastInterval=e}else i=a.velocity,r=a.velocityX,s=a.velocityY,o=a.direction;e.velocity=i,e.velocityX=r,e.velocityY=s,e.direction=o}(i,e);var f,d;var v=t.element;_(e.srcEvent.target,v)&&(v=e.srcEvent.target);e.target=v}(t,i),t.emit("hammer.input",i),t.recognize(i),t.session.prevInput=i}function K(t){for(var e=[],i=0;i<t.pointers.length;)e[i]={clientX:h(t.pointers[i].clientX),clientY:h(t.pointers[i].clientY)},i++;return{timeStamp:c(),pointers:e,center:Q(e),deltaX:t.deltaX,deltaY:t.deltaY}}function Q(t){var e=t.length;if(1===e)return{x:h(t[0].clientX),y:h(t[0].clientY)};for(var i=0,n=0,r=0;r<e;)i+=t[r].clientX,n+=t[r].clientY,r++;return{x:h(i/e),y:h(n/e)}}function tt(t,e,i){return{x:e/t||0,y:i/t||0}}function et(t,e){return t===e?q:u(t)>=u(e)?t<0?k:H:e<0?L:U}function it(t,e,i){i||(i=Z);var n=e[i[0]]-t[i[0]],r=e[i[1]]-t[i[1]];return Math.sqrt(n*n+r*r)}function nt(t,e,i){i||(i=Z);var n=e[i[0]]-t[i[0]],r=e[i[1]]-t[i[1]];return 180*Math.atan2(r,n)/Math.PI}$.prototype={handler:function(){},init:function(){this.evEl&&I(this.element,this.evEl,this.domHandler),this.evTarget&&I(this.target,this.evTarget,this.domHandler),this.evWin&&I(O(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&A(this.element,this.evEl,this.domHandler),this.evTarget&&A(this.target,this.evTarget,this.domHandler),this.evWin&&A(O(this.element),this.evWin,this.domHandler)}};var rt={mousedown:X,mousemove:Y,mouseup:F},st="mousedown",ot="mousemove mouseup";function at(){this.evEl=st,this.evWin=ot,this.pressed=!1,$.apply(this,arguments)}g(at,$,{handler:function(t){var e=rt[t.type];e&X&&0===t.button&&(this.pressed=!0),e&Y&&1!==t.which&&(e=F),this.pressed&&(e&F&&(this.pressed=!1),this.callback(this.manager,e,{pointers:[t],changedPointers:[t],pointerType:"mouse",srcEvent:t}))}});var ht={pointerdown:X,pointermove:Y,pointerup:F,pointercancel:W,pointerout:W},ut={2:"touch",3:"pen",4:"mouse",5:"kinect"},ct="pointerdown",lt="pointermove pointerup pointercancel";function pt(){this.evEl=ct,this.evWin=lt,$.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}t.MSPointerEvent&&!t.PointerEvent&&(ct="MSPointerDown",lt="MSPointerMove MSPointerUp MSPointerCancel"),g(pt,$,{handler:function(t){var e=this.store,i=!1,n=t.type.toLowerCase().replace("ms",""),r=ht[n],s=ut[t.pointerType]||t.pointerType,o="touch"==s,a=b(e,t.pointerId,"pointerId");r&X&&(0===t.button||o)?a<0&&(e.push(t),a=e.length-1):r&(F|W)&&(i=!0),a<0||(e[a]=t,this.callback(this.manager,r,{pointers:e,changedPointers:[t],pointerType:s,srcEvent:t}),i&&e.splice(a,1))}});var ft={touchstart:X,touchmove:Y,touchend:F,touchcancel:W},dt="touchstart",vt="touchstart touchmove touchend touchcancel";function mt(){this.evTarget=dt,this.evWin=vt,this.started=!1,$.apply(this,arguments)}g(mt,$,{handler:function(t){var e=ft[t.type];if(e===X&&(this.started=!0),this.started){var i=function(t,e){var i=P(t.touches),n=P(t.changedTouches);e&(F|W)&&(i=D(i.concat(n),"identifier",!0));return[i,n]}.call(this,t,e);e&(F|W)&&i[0].length-i[1].length==0&&(this.started=!1),this.callback(this.manager,e,{pointers:i[0],changedPointers:i[1],pointerType:"touch",srcEvent:t})}}});var gt={touchstart:X,touchmove:Y,touchend:F,touchcancel:W},Tt="touchstart touchmove touchend touchcancel";function yt(){this.evTarget=Tt,this.targetIds={},$.apply(this,arguments)}g(yt,$,{handler:function(t){var e=gt[t.type],i=function(t,e){var i=P(t.touches),n=this.targetIds;if(e&(X|Y)&&1===i.length)return n[i[0].identifier]=!0,[i,i];var r,s,o=P(t.changedTouches),a=[],h=this.target;if(s=i.filter(function(t){return _(t.target,h)}),e===X)for(r=0;r<s.length;)n[s[r].identifier]=!0,r++;r=0;for(;r<o.length;)n[o[r].identifier]&&a.push(o[r]),e&(F|W)&&delete n[o[r].identifier],r++;if(!a.length)return;return[D(s.concat(a),"identifier",!0),a]}.call(this,t,e);i&&this.callback(this.manager,e,{pointers:i[0],changedPointers:i[1],pointerType:"touch",srcEvent:t})}});var Et=2500,It=25;function At(){$.apply(this,arguments);var t=T(this.handler,this);this.touch=new yt(this.manager,t),this.mouse=new at(this.manager,t),this.primaryTouch=null,this.lastTouches=[]}function _t(t){var e=t.changedPointers[0];if(e.identifier===this.primaryTouch){var i={x:e.clientX,y:e.clientY};this.lastTouches.push(i);var n=this.lastTouches;setTimeout(function(){var t=n.indexOf(i);t>-1&&n.splice(t,1)},Et)}}g(At,$,{handler:function(t,e,i){var n="touch"==i.pointerType,r="mouse"==i.pointerType;if(!(r&&i.sourceCapabilities&&i.sourceCapabilities.firesTouchEvents)){if(n)(function(t,e){t&X?(this.primaryTouch=e.changedPointers[0].identifier,_t.call(this,e)):t&(F|W)&&_t.call(this,e)}).call(this,e,i);else if(r&&function(t){for(var e=t.srcEvent.clientX,i=t.srcEvent.clientY,n=0;n<this.lastTouches.length;n++){var r=this.lastTouches[n],s=Math.abs(e-r.x),o=Math.abs(i-r.y);if(s<=It&&o<=It)return!0}return!1}.call(this,i))return;this.callback(t,e,i)}},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var Ct=x(o.style,"touchAction"),St=Ct!==n,bt="auto",Pt="manipulation",Dt="none",xt="pan-x",wt="pan-y",Ot=function(){if(!St)return!1;var e={},i=t.CSS&&t.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach(function(n){e[n]=!i||t.CSS.supports("touch-action",n)}),e}();function Rt(t,e){this.manager=t,this.set(e)}Rt.prototype={set:function(t){"compute"==t&&(t=this.compute()),St&&this.manager.element.style&&Ot[t]&&(this.manager.element.style[Ct]=t),this.actions=t.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var t=[];return f(this.manager.recognizers,function(e){y(e.options.enable,[e])&&(t=t.concat(e.getTouchAction()))}),function(t){if(C(t,Dt))return Dt;var e=C(t,xt),i=C(t,wt);if(e&&i)return Dt;if(e||i)return e?xt:wt;if(C(t,Pt))return Pt;return bt}(t.join(" "))},preventDefaults:function(t){var e=t.srcEvent,i=t.offsetDirection;if(this.manager.session.prevented)e.preventDefault();else{var n=this.actions,r=C(n,Dt)&&!Ot[Dt],s=C(n,wt)&&!Ot[wt],o=C(n,xt)&&!Ot[xt];if(r){var a=1===t.pointers.length,h=t.distance<2,u=t.deltaTime<250;if(a&&h&&u)return}if(!o||!s)return r||s&&i&V||o&&i&j?this.preventSrc(e):void 0}},preventSrc:function(t){this.manager.session.prevented=!0,t.preventDefault()}};var Mt=1,zt=2,Nt=4,Xt=8,Yt=Xt,Ft=16;function Wt(t){this.options=r({},this.defaults,t||{}),this.id=w++,this.manager=null,this.options.enable=E(this.options.enable,!0),this.state=Mt,this.simultaneous={},this.requireFail=[]}function qt(t){return t&Ft?"cancel":t&Xt?"end":t&Nt?"move":t&zt?"start":""}function kt(t){return t==U?"down":t==L?"up":t==k?"left":t==H?"right":""}function Ht(t,e){var i=e.manager;return i?i.get(t):t}function Lt(){Wt.apply(this,arguments)}function Ut(){Lt.apply(this,arguments),this.pX=null,this.pY=null}function Vt(){Lt.apply(this,arguments)}function jt(){Wt.apply(this,arguments),this._timer=null,this._input=null}function Gt(){Lt.apply(this,arguments)}function Zt(){Lt.apply(this,arguments)}function Bt(){Wt.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function $t(t,e){return(e=e||{}).recognizers=E(e.recognizers,$t.defaults.preset),new Jt(t,e)}Wt.prototype={defaults:{},set:function(t){return r(this.options,t),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(t){if(p(t,"recognizeWith",this))return this;var e=this.simultaneous;return e[(t=Ht(t,this)).id]||(e[t.id]=t,t.recognizeWith(this)),this},dropRecognizeWith:function(t){return p(t,"dropRecognizeWith",this)?this:(t=Ht(t,this),delete this.simultaneous[t.id],this)},requireFailure:function(t){if(p(t,"requireFailure",this))return this;var e=this.requireFail;return-1===b(e,t=Ht(t,this))&&(e.push(t),t.requireFailure(this)),this},dropRequireFailure:function(t){if(p(t,"dropRequireFailure",this))return this;t=Ht(t,this);var e=b(this.requireFail,t);return e>-1&&this.requireFail.splice(e,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(t){return!!this.simultaneous[t.id]},emit:function(t){var e=this,i=this.state;function n(i){e.manager.emit(i,t)}i<Xt&&n(e.options.event+qt(i)),n(e.options.event),t.additionalEvent&&n(t.additionalEvent),i>=Xt&&n(e.options.event+qt(i))},tryEmit:function(t){if(this.canEmit())return this.emit(t);this.state=32},canEmit:function(){for(var t=0;t<this.requireFail.length;){if(!(this.requireFail[t].state&(32|Mt)))return!1;t++}return!0},recognize:function(t){var e=r({},t);if(!y(this.options.enable,[this,e]))return this.reset(),void(this.state=32);this.state&(Yt|Ft|32)&&(this.state=Mt),this.state=this.process(e),this.state&(zt|Nt|Xt|Ft)&&this.tryEmit(e)},process:function(t){},getTouchAction:function(){},reset:function(){}},g(Lt,Wt,{defaults:{pointers:1},attrTest:function(t){var e=this.options.pointers;return 0===e||t.pointers.length===e},process:function(t){var e=this.state,i=t.eventType,n=e&(zt|Nt),r=this.attrTest(t);return n&&(i&W||!r)?e|Ft:n||r?i&F?e|Xt:e&zt?e|Nt:zt:32}}),g(Ut,Lt,{defaults:{event:"pan",threshold:10,pointers:1,direction:G},getTouchAction:function(){var t=this.options.direction,e=[];return t&V&&e.push(wt),t&j&&e.push(xt),e},directionTest:function(t){var e=this.options,i=!0,n=t.distance,r=t.direction,s=t.deltaX,o=t.deltaY;return r&e.direction||(e.direction&V?(r=0===s?q:s<0?k:H,i=s!=this.pX,n=Math.abs(t.deltaX)):(r=0===o?q:o<0?L:U,i=o!=this.pY,n=Math.abs(t.deltaY))),t.direction=r,i&&n>e.threshold&&r&e.direction},attrTest:function(t){return Lt.prototype.attrTest.call(this,t)&&(this.state&zt||!(this.state&zt)&&this.directionTest(t))},emit:function(t){this.pX=t.deltaX,this.pY=t.deltaY;var e=kt(t.direction);e&&(t.additionalEvent=this.options.event+e),this._super.emit.call(this,t)}}),g(Vt,Lt,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[Dt]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.scale-1)>this.options.threshold||this.state&zt)},emit:function(t){if(1!==t.scale){var e=t.scale<1?"in":"out";t.additionalEvent=this.options.event+e}this._super.emit.call(this,t)}}),g(jt,Wt,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return[bt]},process:function(t){var e=this.options,i=t.pointers.length===e.pointers,n=t.distance<e.threshold,r=t.deltaTime>e.time;if(this._input=t,!n||!i||t.eventType&(F|W)&&!r)this.reset();else if(t.eventType&X)this.reset(),this._timer=l(function(){this.state=Yt,this.tryEmit()},e.time,this);else if(t.eventType&F)return Yt;return 32},reset:function(){clearTimeout(this._timer)},emit:function(t){this.state===Yt&&(t&&t.eventType&F?this.manager.emit(this.options.event+"up",t):(this._input.timeStamp=c(),this.manager.emit(this.options.event,this._input)))}}),g(Gt,Lt,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[Dt]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.rotation)>this.options.threshold||this.state&zt)}}),g(Zt,Lt,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:V|j,pointers:1},getTouchAction:function(){return Ut.prototype.getTouchAction.call(this)},attrTest:function(t){var e,i=this.options.direction;return i&(V|j)?e=t.overallVelocity:i&V?e=t.overallVelocityX:i&j&&(e=t.overallVelocityY),this._super.attrTest.call(this,t)&&i&t.offsetDirection&&t.distance>this.options.threshold&&t.maxPointers==this.options.pointers&&u(e)>this.options.velocity&&t.eventType&F},emit:function(t){var e=kt(t.offsetDirection);e&&this.manager.emit(this.options.event+e,t),this.manager.emit(this.options.event,t)}}),g(Bt,Wt,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return[Pt]},process:function(t){var e=this.options,i=t.pointers.length===e.pointers,n=t.distance<e.threshold,r=t.deltaTime<e.time;if(this.reset(),t.eventType&X&&0===this.count)return this.failTimeout();if(n&&r&&i){if(t.eventType!=F)return this.failTimeout();var s=!this.pTime||t.timeStamp-this.pTime<e.interval,o=!this.pCenter||it(this.pCenter,t.center)<e.posThreshold;if(this.pTime=t.timeStamp,this.pCenter=t.center,o&&s?this.count+=1:this.count=1,this._input=t,0===this.count%e.taps)return this.hasRequireFailures()?(this._timer=l(function(){this.state=Yt,this.tryEmit()},e.interval,this),zt):Yt}return 32},failTimeout:function(){return this._timer=l(function(){this.state=32},this.options.interval,this),32},reset:function(){clearTimeout(this._timer)},emit:function(){this.state==Yt&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),$t.VERSION="2.0.7",$t.defaults={domEvents:!1,touchAction:"compute",enable:!0,inputTarget:null,inputClass:null,preset:[[Gt,{enable:!1}],[Vt,{enable:!1},["rotate"]],[Zt,{direction:V}],[Ut,{direction:V},["swipe"]],[Bt],[Bt,{event:"doubletap",taps:2},["tap"]],[jt]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};function Jt(t,e){var i;this.options=r({},$t.defaults,e||{}),this.options.inputTarget=this.options.inputTarget||t,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=t,this.input=new((i=this).options.inputClass||(M?pt:z?yt:R?At:at))(i,J),this.touchAction=new Rt(this,this.options.touchAction),Kt(this,!0),f(this.options.recognizers,function(t){var e=this.add(new t[0](t[1]));t[2]&&e.recognizeWith(t[2]),t[3]&&e.requireFailure(t[3])},this)}function Kt(t,e){var i,n=t.element;n.style&&(f(t.options.cssProps,function(r,s){i=x(n.style,s),e?(t.oldCssProps[i]=n.style[i],n.style[i]=r):n.style[i]=t.oldCssProps[i]||""}),e||(t.oldCssProps={}))}Jt.prototype={set:function(t){return r(this.options,t),t.touchAction&&this.touchAction.update(),t.inputTarget&&(this.input.destroy(),this.input.target=t.inputTarget,this.input.init()),this},stop:function(t){this.session.stopped=t?2:1},recognize:function(t){var e=this.session;if(!e.stopped){var i;this.touchAction.preventDefaults(t);var n=this.recognizers,r=e.curRecognizer;(!r||r&&r.state&Yt)&&(r=e.curRecognizer=null);for(var s=0;s<n.length;)i=n[s],2===e.stopped||r&&i!=r&&!i.canRecognizeWith(r)?i.reset():i.recognize(t),!r&&i.state&(zt|Nt|Xt)&&(r=e.curRecognizer=i),s++}},get:function(t){if(t instanceof Wt)return t;for(var e=this.recognizers,i=0;i<e.length;i++)if(e[i].options.event==t)return e[i];return null},add:function(t){if(p(t,"add",this))return this;var e=this.get(t.options.event);return e&&this.remove(e),this.recognizers.push(t),t.manager=this,this.touchAction.update(),t},remove:function(t){if(p(t,"remove",this))return this;if(t=this.get(t)){var e=this.recognizers,i=b(e,t);-1!==i&&(e.splice(i,1),this.touchAction.update())}return this},on:function(t,e){if(t!==n&&e!==n){var i=this.handlers;return f(S(t),function(t){i[t]=i[t]||[],i[t].push(e)}),this}},off:function(t,e){if(t!==n){var i=this.handlers;return f(S(t),function(t){e?i[t]&&i[t].splice(b(i[t],e),1):delete i[t]}),this}},emit:function(t,i){this.options.domEvents&&function(t,i){var n=e.createEvent("Event");n.initEvent(t,!0,!0),n.gesture=i,i.target.dispatchEvent(n)}(t,i);var n=this.handlers[t]&&this.handlers[t].slice();if(n&&n.length){i.type=t,i.preventDefault=function(){i.srcEvent.preventDefault()};for(var r=0;r<n.length;)n[r](i),r++}},destroy:function(){this.element&&Kt(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},r($t,{INPUT_START:X,INPUT_MOVE:Y,INPUT_END:F,INPUT_CANCEL:W,STATE_POSSIBLE:Mt,STATE_BEGAN:zt,STATE_CHANGED:Nt,STATE_ENDED:Xt,STATE_RECOGNIZED:Yt,STATE_CANCELLED:Ft,STATE_FAILED:32,DIRECTION_NONE:q,DIRECTION_LEFT:k,DIRECTION_RIGHT:H,DIRECTION_UP:L,DIRECTION_DOWN:U,DIRECTION_HORIZONTAL:V,DIRECTION_VERTICAL:j,DIRECTION_ALL:G,Manager:Jt,Input:$,TouchAction:Rt,TouchInput:yt,MouseInput:at,PointerEventInput:pt,TouchMouseInput:At,SingleTouchInput:mt,Recognizer:Wt,AttrRecognizer:Lt,Tap:Bt,Pan:Ut,Swipe:Zt,Pinch:Vt,Rotate:Gt,Press:jt,on:I,off:A,each:f,merge:m,extend:v,assign:r,inherit:g,bindFn:T,prefixed:x}),(void 0!==t?t:"undefined"!=typeof self?self:{}).Hammer=$t,"function"==typeof define&&define.amd?define(function(){return $t}):"undefined"!=typeof module&&module.exports?module.exports=$t:t.Hammer=$t}(window,document);

},{}],"hbsfy/runtime":[function(require,module,exports){
module.exports=require("handlebars/runtime").default;

},{"handlebars/runtime":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/handlebars/runtime.js"}],"matches-polyfill":[function(require,module,exports){
"use strict";!function(t){var e=["ms","moz","webkit","o"],o=-1;for(o=0;o<e.length&&!t.matches;++o)t.matches=t[e[o]+"MatchesSelector"];t.matches||console.warn("No native Element.prototype.matches found"),t.matches||(t.matches=function(t){for(var e=(this.parentNode||this.document).querySelectorAll(t),o=-1;e[++o]&&e[o]!=this;);return!!e[o]})}(window.Element.prototype);

},{}],"math-sign-polyfill":[function(require,module,exports){
"use strict";Math.sign||(Math.sign=function(t){return(t>0)-(t<0)||+t});

},{}],"mutation-observer":[function(require,module,exports){
var MutationObserver=window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver,WeakMap=window.WeakMap;if(void 0===WeakMap){var defineProperty=Object.defineProperty,counter=Date.now()%1e9;(WeakMap=function(){this.name="__st"+(1e9*Math.random()>>>0)+counter+++"__"}).prototype={set:function(e,t){var r=e[this.name];return r&&r[0]===e?r[1]=t:defineProperty(e,this.name,{value:[e,t],writable:!0}),this},get:function(e){var t;return(t=e[this.name])&&t[0]===e?t[1]:void 0},delete:function(e){var t=e[this.name];if(!t)return!1;var r=t[0]===e;return t[0]=t[1]=void 0,r},has:function(e){var t=e[this.name];return!!t&&t[0]===e}}}var registrationsTable=new WeakMap,setImmediate=window.msSetImmediate;if(!setImmediate){var setImmediateQueue=[],sentinel=String(Math.random());window.addEventListener("message",function(e){if(e.data===sentinel){var t=setImmediateQueue;setImmediateQueue=[],t.forEach(function(e){e()})}}),setImmediate=function(e){setImmediateQueue.push(e),window.postMessage(sentinel,"*")}}var isScheduled=!1,scheduledObservers=[];function scheduleCallback(e){scheduledObservers.push(e),isScheduled||(isScheduled=!0,setImmediate(dispatchCallbacks))}function wrapIfNeeded(e){return window.ShadowDOMPolyfill&&window.ShadowDOMPolyfill.wrapIfNeeded(e)||e}function dispatchCallbacks(){isScheduled=!1;var e=scheduledObservers;scheduledObservers=[],e.sort(function(e,t){return e.uid_-t.uid_});var t=!1;e.forEach(function(e){var r=e.takeRecords();removeTransientObserversFor(e),r.length&&(e.callback_(r,e),t=!0)}),t&&dispatchCallbacks()}function removeTransientObserversFor(e){e.nodes_.forEach(function(t){var r=registrationsTable.get(t);r&&r.forEach(function(t){t.observer===e&&t.removeTransientObservers()})})}function forEachAncestorAndObserverEnqueueRecord(e,t){for(var r=e;r;r=r.parentNode){var i=registrationsTable.get(r);if(i)for(var a=0;a<i.length;a++){var n=i[a],s=n.options;if(r===e||s.subtree){var o=t(s);o&&n.enqueue(o)}}}}var currentRecord,recordWithOldValue,uidCounter=0;function JsMutationObserver(e){this.callback_=e,this.nodes_=[],this.records_=[],this.uid_=++uidCounter}function MutationRecord(e,t){this.type=e,this.target=t,this.addedNodes=[],this.removedNodes=[],this.previousSibling=null,this.nextSibling=null,this.attributeName=null,this.attributeNamespace=null,this.oldValue=null}function copyMutationRecord(e){var t=new MutationRecord(e.type,e.target);return t.addedNodes=e.addedNodes.slice(),t.removedNodes=e.removedNodes.slice(),t.previousSibling=e.previousSibling,t.nextSibling=e.nextSibling,t.attributeName=e.attributeName,t.attributeNamespace=e.attributeNamespace,t.oldValue=e.oldValue,t}function getRecord(e,t){return currentRecord=new MutationRecord(e,t)}function getRecordWithOldValue(e){return recordWithOldValue||((recordWithOldValue=copyMutationRecord(currentRecord)).oldValue=e,recordWithOldValue)}function clearRecords(){currentRecord=recordWithOldValue=void 0}function recordRepresentsCurrentMutation(e){return e===recordWithOldValue||e===currentRecord}function selectRecord(e,t){return e===t?e:recordWithOldValue&&recordRepresentsCurrentMutation(e)?recordWithOldValue:null}function Registration(e,t,r){this.observer=e,this.target=t,this.options=r,this.transientObservedNodes=[]}JsMutationObserver.prototype={observe:function(e,t){if(e=wrapIfNeeded(e),!t.childList&&!t.attributes&&!t.characterData||t.attributeOldValue&&!t.attributes||t.attributeFilter&&t.attributeFilter.length&&!t.attributes||t.characterDataOldValue&&!t.characterData)throw new SyntaxError;var r,i=registrationsTable.get(e);i||registrationsTable.set(e,i=[]);for(var a=0;a<i.length;a++)if(i[a].observer===this){(r=i[a]).removeListeners(),r.options=t;break}r||(r=new Registration(this,e,t),i.push(r),this.nodes_.push(e)),r.addListeners()},disconnect:function(){this.nodes_.forEach(function(e){for(var t=registrationsTable.get(e),r=0;r<t.length;r++){var i=t[r];if(i.observer===this){i.removeListeners(),t.splice(r,1);break}}},this),this.records_=[]},takeRecords:function(){var e=this.records_;return this.records_=[],e}},Registration.prototype={enqueue:function(e){var t=this.observer.records_,r=t.length;if(t.length>0){var i=selectRecord(t[r-1],e);if(i)return void(t[r-1]=i)}else scheduleCallback(this.observer);t[r]=e},addListeners:function(){this.addListeners_(this.target)},addListeners_:function(e){var t=this.options;t.attributes&&e.addEventListener("DOMAttrModified",this,!0),t.characterData&&e.addEventListener("DOMCharacterDataModified",this,!0),t.childList&&e.addEventListener("DOMNodeInserted",this,!0),(t.childList||t.subtree)&&e.addEventListener("DOMNodeRemoved",this,!0)},removeListeners:function(){this.removeListeners_(this.target)},removeListeners_:function(e){var t=this.options;t.attributes&&e.removeEventListener("DOMAttrModified",this,!0),t.characterData&&e.removeEventListener("DOMCharacterDataModified",this,!0),t.childList&&e.removeEventListener("DOMNodeInserted",this,!0),(t.childList||t.subtree)&&e.removeEventListener("DOMNodeRemoved",this,!0)},addTransientObserver:function(e){if(e!==this.target){this.addListeners_(e),this.transientObservedNodes.push(e);var t=registrationsTable.get(e);t||registrationsTable.set(e,t=[]),t.push(this)}},removeTransientObservers:function(){var e=this.transientObservedNodes;this.transientObservedNodes=[],e.forEach(function(e){this.removeListeners_(e);for(var t=registrationsTable.get(e),r=0;r<t.length;r++)if(t[r]===this){t.splice(r,1);break}},this)},handleEvent:function(e){switch(e.stopImmediatePropagation(),e.type){case"DOMAttrModified":var t=e.attrName,r=e.relatedNode.namespaceURI,i=e.target;(n=new getRecord("attributes",i)).attributeName=t,n.attributeNamespace=r;var a=null;"undefined"!=typeof MutationEvent&&e.attrChange===MutationEvent.ADDITION||(a=e.prevValue),forEachAncestorAndObserverEnqueueRecord(i,function(e){if(e.attributes&&(!e.attributeFilter||!e.attributeFilter.length||-1!==e.attributeFilter.indexOf(t)||-1!==e.attributeFilter.indexOf(r)))return e.attributeOldValue?getRecordWithOldValue(a):n});break;case"DOMCharacterDataModified":var n=getRecord("characterData",i=e.target);a=e.prevValue;forEachAncestorAndObserverEnqueueRecord(i,function(e){if(e.characterData)return e.characterDataOldValue?getRecordWithOldValue(a):n});break;case"DOMNodeRemoved":this.addTransientObserver(e.target);case"DOMNodeInserted":i=e.relatedNode;var s,o,d=e.target;"DOMNodeInserted"===e.type?(s=[d],o=[]):(s=[],o=[d]);var u=d.previousSibling,c=d.nextSibling;(n=getRecord("childList",i)).addedNodes=s,n.removedNodes=o,n.previousSibling=u,n.nextSibling=c,forEachAncestorAndObserverEnqueueRecord(i,function(e){if(e.childList)return n})}clearRecords()}},MutationObserver||(MutationObserver=JsMutationObserver),module.exports=MutationObserver;

},{}],"raf-polyfill":[function(require,module,exports){
"use strict";!function(){var n,i=["ms","moz","webkit","o"],e=-1;for(e=0;e<i.length&&!window.requestAnimationFrame;++e)window.requestAnimationFrame=window[i[e]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[i[e]+"CancelAnimationFrame"]||window[i[e]+"CancelRequestAnimationFrame"];window.requestAnimationFrame||console.warn("No native window.requestAnimationFrame found"),window.requestAnimationFrame||(n=0,window.requestAnimationFrame=function(i,e){var o=(new Date).getTime(),a=Math.max(0,16-(o-n)),t=window.setTimeout(function(){i(o+a)},a);return n=o+a,t}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(n){window.clearTimeout(n)})}();

},{}],"setimmediate":[function(require,module,exports){
(function (process,global){
!function(e,t){"use strict";if(!e.setImmediate){var n,a,s,o,c,i=1,r={},f=!1,l=e.document,u=Object.getPrototypeOf&&Object.getPrototypeOf(e);u=u&&u.setTimeout?u:e,"[object process]"==={}.toString.call(e.process)?n=function(e){process.nextTick(function(){g(e)})}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((s=new MessageChannel).port1.onmessage=function(e){g(e.data)},n=function(e){s.port2.postMessage(e)}):l&&"onreadystatechange"in l.createElement("script")?(a=l.documentElement,n=function(e){var t=l.createElement("script");t.onreadystatechange=function(){g(e),t.onreadystatechange=null,a.removeChild(t),t=null},a.appendChild(t)}):n=function(e){setTimeout(g,0,e)}:(o="setImmediate$"+Math.random()+"$",c=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(o)&&g(+t.data.slice(o.length))},e.addEventListener?e.addEventListener("message",c,!1):e.attachEvent("onmessage",c),n=function(t){e.postMessage(o+t,"*")}),u.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),a=0;a<t.length;a++)t[a]=arguments[a+1];var s={callback:e,args:t};return r[i]=s,n(i),i++},u.clearImmediate=d}function d(e){delete r[e]}function g(e){if(f)setTimeout(g,0,e);else{var n=r[e];if(n){f=!0;try{!function(e){var n=e.callback,a=e.args;switch(a.length){case 0:n();break;case 1:n(a[0]);break;case 2:n(a[0],a[1]);break;case 3:n(a[0],a[1],a[2]);break;default:n.apply(t,a)}}(n)}finally{d(e),f=!1}}}}}("undefined"==typeof self?"undefined"==typeof global?this:global:self);

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":"/Users/pablo/Work/projects/folio/folio-workspace-assets/node_modules/process/browser.js"}],"underscore":[function(require,module,exports){
(function(){var n=this,r=n._,t=Array.prototype,e=Object.prototype,u=Function.prototype,i=t.push,o=t.slice,a=e.toString,c=e.hasOwnProperty,f=Array.isArray,l=Object.keys,s=u.bind,p=Object.create,h=function(){},v=function(n){return n instanceof v?n:this instanceof v?void(this._wrapped=n):new v(n)};"undefined"!=typeof exports?("undefined"!=typeof module&&module.exports&&(exports=module.exports=v),exports._=v):n._=v,v.VERSION="1.8.3";var y=function(n,r,t){if(void 0===r)return n;switch(null==t?3:t){case 1:return function(t){return n.call(r,t)};case 2:return function(t,e){return n.call(r,t,e)};case 3:return function(t,e,u){return n.call(r,t,e,u)};case 4:return function(t,e,u,i){return n.call(r,t,e,u,i)}}return function(){return n.apply(r,arguments)}},d=function(n,r,t){return null==n?v.identity:v.isFunction(n)?y(n,r,t):v.isObject(n)?v.matcher(n):v.property(n)};v.iteratee=function(n,r){return d(n,r,1/0)};var g=function(n,r){return function(t){var e=arguments.length;if(e<2||null==t)return t;for(var u=1;u<e;u++)for(var i=arguments[u],o=n(i),a=o.length,c=0;c<a;c++){var f=o[c];r&&void 0!==t[f]||(t[f]=i[f])}return t}},m=function(n){if(!v.isObject(n))return{};if(p)return p(n);h.prototype=n;var r=new h;return h.prototype=null,r},b=function(n){return function(r){return null==r?void 0:r[n]}},x=Math.pow(2,53)-1,_=b("length"),j=function(n){var r=_(n);return"number"==typeof r&&r>=0&&r<=x};function w(n){return function(r,t,e,u){t=y(t,u,4);var i=!j(r)&&v.keys(r),o=(i||r).length,a=n>0?0:o-1;return arguments.length<3&&(e=r[i?i[a]:a],a+=n),function(r,t,e,u,i,o){for(;i>=0&&i<o;i+=n){var a=u?u[i]:i;e=t(e,r[a],a,r)}return e}(r,t,e,i,a,o)}}v.each=v.forEach=function(n,r,t){var e,u;if(r=y(r,t),j(n))for(e=0,u=n.length;e<u;e++)r(n[e],e,n);else{var i=v.keys(n);for(e=0,u=i.length;e<u;e++)r(n[i[e]],i[e],n)}return n},v.map=v.collect=function(n,r,t){r=d(r,t);for(var e=!j(n)&&v.keys(n),u=(e||n).length,i=Array(u),o=0;o<u;o++){var a=e?e[o]:o;i[o]=r(n[a],a,n)}return i},v.reduce=v.foldl=v.inject=w(1),v.reduceRight=v.foldr=w(-1),v.find=v.detect=function(n,r,t){var e;if(void 0!==(e=j(n)?v.findIndex(n,r,t):v.findKey(n,r,t))&&-1!==e)return n[e]},v.filter=v.select=function(n,r,t){var e=[];return r=d(r,t),v.each(n,function(n,t,u){r(n,t,u)&&e.push(n)}),e},v.reject=function(n,r,t){return v.filter(n,v.negate(d(r)),t)},v.every=v.all=function(n,r,t){r=d(r,t);for(var e=!j(n)&&v.keys(n),u=(e||n).length,i=0;i<u;i++){var o=e?e[i]:i;if(!r(n[o],o,n))return!1}return!0},v.some=v.any=function(n,r,t){r=d(r,t);for(var e=!j(n)&&v.keys(n),u=(e||n).length,i=0;i<u;i++){var o=e?e[i]:i;if(r(n[o],o,n))return!0}return!1},v.contains=v.includes=v.include=function(n,r,t,e){return j(n)||(n=v.values(n)),("number"!=typeof t||e)&&(t=0),v.indexOf(n,r,t)>=0},v.invoke=function(n,r){var t=o.call(arguments,2),e=v.isFunction(r);return v.map(n,function(n){var u=e?r:n[r];return null==u?u:u.apply(n,t)})},v.pluck=function(n,r){return v.map(n,v.property(r))},v.where=function(n,r){return v.filter(n,v.matcher(r))},v.findWhere=function(n,r){return v.find(n,v.matcher(r))},v.max=function(n,r,t){var e,u,i=-1/0,o=-1/0;if(null==r&&null!=n)for(var a=0,c=(n=j(n)?n:v.values(n)).length;a<c;a++)(e=n[a])>i&&(i=e);else r=d(r,t),v.each(n,function(n,t,e){((u=r(n,t,e))>o||u===-1/0&&i===-1/0)&&(i=n,o=u)});return i},v.min=function(n,r,t){var e,u,i=1/0,o=1/0;if(null==r&&null!=n)for(var a=0,c=(n=j(n)?n:v.values(n)).length;a<c;a++)(e=n[a])<i&&(i=e);else r=d(r,t),v.each(n,function(n,t,e){((u=r(n,t,e))<o||u===1/0&&i===1/0)&&(i=n,o=u)});return i},v.shuffle=function(n){for(var r,t=j(n)?n:v.values(n),e=t.length,u=Array(e),i=0;i<e;i++)(r=v.random(0,i))!==i&&(u[i]=u[r]),u[r]=t[i];return u},v.sample=function(n,r,t){return null==r||t?(j(n)||(n=v.values(n)),n[v.random(n.length-1)]):v.shuffle(n).slice(0,Math.max(0,r))},v.sortBy=function(n,r,t){return r=d(r,t),v.pluck(v.map(n,function(n,t,e){return{value:n,index:t,criteria:r(n,t,e)}}).sort(function(n,r){var t=n.criteria,e=r.criteria;if(t!==e){if(t>e||void 0===t)return 1;if(t<e||void 0===e)return-1}return n.index-r.index}),"value")};var A=function(n){return function(r,t,e){var u={};return t=d(t,e),v.each(r,function(e,i){var o=t(e,i,r);n(u,e,o)}),u}};v.groupBy=A(function(n,r,t){v.has(n,t)?n[t].push(r):n[t]=[r]}),v.indexBy=A(function(n,r,t){n[t]=r}),v.countBy=A(function(n,r,t){v.has(n,t)?n[t]++:n[t]=1}),v.toArray=function(n){return n?v.isArray(n)?o.call(n):j(n)?v.map(n,v.identity):v.values(n):[]},v.size=function(n){return null==n?0:j(n)?n.length:v.keys(n).length},v.partition=function(n,r,t){r=d(r,t);var e=[],u=[];return v.each(n,function(n,t,i){(r(n,t,i)?e:u).push(n)}),[e,u]},v.first=v.head=v.take=function(n,r,t){if(null!=n)return null==r||t?n[0]:v.initial(n,n.length-r)},v.initial=function(n,r,t){return o.call(n,0,Math.max(0,n.length-(null==r||t?1:r)))},v.last=function(n,r,t){if(null!=n)return null==r||t?n[n.length-1]:v.rest(n,Math.max(0,n.length-r))},v.rest=v.tail=v.drop=function(n,r,t){return o.call(n,null==r||t?1:r)},v.compact=function(n){return v.filter(n,v.identity)};var O=function(n,r,t,e){for(var u=[],i=0,o=e||0,a=_(n);o<a;o++){var c=n[o];if(j(c)&&(v.isArray(c)||v.isArguments(c))){r||(c=O(c,r,t));var f=0,l=c.length;for(u.length+=l;f<l;)u[i++]=c[f++]}else t||(u[i++]=c)}return u};function k(n){return function(r,t,e){t=d(t,e);for(var u=_(r),i=n>0?0:u-1;i>=0&&i<u;i+=n)if(t(r[i],i,r))return i;return-1}}function F(n,r,t){return function(e,u,i){var a=0,c=_(e);if("number"==typeof i)n>0?a=i>=0?i:Math.max(i+c,a):c=i>=0?Math.min(i+1,c):i+c+1;else if(t&&i&&c)return e[i=t(e,u)]===u?i:-1;if(u!=u)return(i=r(o.call(e,a,c),v.isNaN))>=0?i+a:-1;for(i=n>0?a:c-1;i>=0&&i<c;i+=n)if(e[i]===u)return i;return-1}}v.flatten=function(n,r){return O(n,r,!1)},v.without=function(n){return v.difference(n,o.call(arguments,1))},v.uniq=v.unique=function(n,r,t,e){v.isBoolean(r)||(e=t,t=r,r=!1),null!=t&&(t=d(t,e));for(var u=[],i=[],o=0,a=_(n);o<a;o++){var c=n[o],f=t?t(c,o,n):c;r?(o&&i===f||u.push(c),i=f):t?v.contains(i,f)||(i.push(f),u.push(c)):v.contains(u,c)||u.push(c)}return u},v.union=function(){return v.uniq(O(arguments,!0,!0))},v.intersection=function(n){for(var r=[],t=arguments.length,e=0,u=_(n);e<u;e++){var i=n[e];if(!v.contains(r,i)){for(var o=1;o<t&&v.contains(arguments[o],i);o++);o===t&&r.push(i)}}return r},v.difference=function(n){var r=O(arguments,!0,!0,1);return v.filter(n,function(n){return!v.contains(r,n)})},v.zip=function(){return v.unzip(arguments)},v.unzip=function(n){for(var r=n&&v.max(n,_).length||0,t=Array(r),e=0;e<r;e++)t[e]=v.pluck(n,e);return t},v.object=function(n,r){for(var t={},e=0,u=_(n);e<u;e++)r?t[n[e]]=r[e]:t[n[e][0]]=n[e][1];return t},v.findIndex=k(1),v.findLastIndex=k(-1),v.sortedIndex=function(n,r,t,e){for(var u=(t=d(t,e,1))(r),i=0,o=_(n);i<o;){var a=Math.floor((i+o)/2);t(n[a])<u?i=a+1:o=a}return i},v.indexOf=F(1,v.findIndex,v.sortedIndex),v.lastIndexOf=F(-1,v.findLastIndex),v.range=function(n,r,t){null==r&&(r=n||0,n=0),t=t||1;for(var e=Math.max(Math.ceil((r-n)/t),0),u=Array(e),i=0;i<e;i++,n+=t)u[i]=n;return u};var S=function(n,r,t,e,u){if(!(e instanceof r))return n.apply(t,u);var i=m(n.prototype),o=n.apply(i,u);return v.isObject(o)?o:i};v.bind=function(n,r){if(s&&n.bind===s)return s.apply(n,o.call(arguments,1));if(!v.isFunction(n))throw new TypeError("Bind must be called on a function");var t=o.call(arguments,2),e=function(){return S(n,e,r,this,t.concat(o.call(arguments)))};return e},v.partial=function(n){var r=o.call(arguments,1),t=function(){for(var e=0,u=r.length,i=Array(u),o=0;o<u;o++)i[o]=r[o]===v?arguments[e++]:r[o];for(;e<arguments.length;)i.push(arguments[e++]);return S(n,t,this,this,i)};return t},v.bindAll=function(n){var r,t,e=arguments.length;if(e<=1)throw new Error("bindAll must be passed function names");for(r=1;r<e;r++)n[t=arguments[r]]=v.bind(n[t],n);return n},v.memoize=function(n,r){var t=function(e){var u=t.cache,i=""+(r?r.apply(this,arguments):e);return v.has(u,i)||(u[i]=n.apply(this,arguments)),u[i]};return t.cache={},t},v.delay=function(n,r){var t=o.call(arguments,2);return setTimeout(function(){return n.apply(null,t)},r)},v.defer=v.partial(v.delay,v,1),v.throttle=function(n,r,t){var e,u,i,o=null,a=0;t||(t={});var c=function(){a=!1===t.leading?0:v.now(),o=null,i=n.apply(e,u),o||(e=u=null)};return function(){var f=v.now();a||!1!==t.leading||(a=f);var l=r-(f-a);return e=this,u=arguments,l<=0||l>r?(o&&(clearTimeout(o),o=null),a=f,i=n.apply(e,u),o||(e=u=null)):o||!1===t.trailing||(o=setTimeout(c,l)),i}},v.debounce=function(n,r,t){var e,u,i,o,a,c=function(){var f=v.now()-o;f<r&&f>=0?e=setTimeout(c,r-f):(e=null,t||(a=n.apply(i,u),e||(i=u=null)))};return function(){i=this,u=arguments,o=v.now();var f=t&&!e;return e||(e=setTimeout(c,r)),f&&(a=n.apply(i,u),i=u=null),a}},v.wrap=function(n,r){return v.partial(r,n)},v.negate=function(n){return function(){return!n.apply(this,arguments)}},v.compose=function(){var n=arguments,r=n.length-1;return function(){for(var t=r,e=n[r].apply(this,arguments);t--;)e=n[t].call(this,e);return e}},v.after=function(n,r){return function(){if(--n<1)return r.apply(this,arguments)}},v.before=function(n,r){var t;return function(){return--n>0&&(t=r.apply(this,arguments)),n<=1&&(r=null),t}},v.once=v.partial(v.before,2);var E=!{toString:null}.propertyIsEnumerable("toString"),M=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"];function I(n,r){var t=M.length,u=n.constructor,i=v.isFunction(u)&&u.prototype||e,o="constructor";for(v.has(n,o)&&!v.contains(r,o)&&r.push(o);t--;)(o=M[t])in n&&n[o]!==i[o]&&!v.contains(r,o)&&r.push(o)}v.keys=function(n){if(!v.isObject(n))return[];if(l)return l(n);var r=[];for(var t in n)v.has(n,t)&&r.push(t);return E&&I(n,r),r},v.allKeys=function(n){if(!v.isObject(n))return[];var r=[];for(var t in n)r.push(t);return E&&I(n,r),r},v.values=function(n){for(var r=v.keys(n),t=r.length,e=Array(t),u=0;u<t;u++)e[u]=n[r[u]];return e},v.mapObject=function(n,r,t){r=d(r,t);for(var e,u=v.keys(n),i=u.length,o={},a=0;a<i;a++)o[e=u[a]]=r(n[e],e,n);return o},v.pairs=function(n){for(var r=v.keys(n),t=r.length,e=Array(t),u=0;u<t;u++)e[u]=[r[u],n[r[u]]];return e},v.invert=function(n){for(var r={},t=v.keys(n),e=0,u=t.length;e<u;e++)r[n[t[e]]]=t[e];return r},v.functions=v.methods=function(n){var r=[];for(var t in n)v.isFunction(n[t])&&r.push(t);return r.sort()},v.extend=g(v.allKeys),v.extendOwn=v.assign=g(v.keys),v.findKey=function(n,r,t){r=d(r,t);for(var e,u=v.keys(n),i=0,o=u.length;i<o;i++)if(r(n[e=u[i]],e,n))return e},v.pick=function(n,r,t){var e,u,i={},o=n;if(null==o)return i;v.isFunction(r)?(u=v.allKeys(o),e=y(r,t)):(u=O(arguments,!1,!1,1),e=function(n,r,t){return r in t},o=Object(o));for(var a=0,c=u.length;a<c;a++){var f=u[a],l=o[f];e(l,f,o)&&(i[f]=l)}return i},v.omit=function(n,r,t){if(v.isFunction(r))r=v.negate(r);else{var e=v.map(O(arguments,!1,!1,1),String);r=function(n,r){return!v.contains(e,r)}}return v.pick(n,r,t)},v.defaults=g(v.allKeys,!0),v.create=function(n,r){var t=m(n);return r&&v.extendOwn(t,r),t},v.clone=function(n){return v.isObject(n)?v.isArray(n)?n.slice():v.extend({},n):n},v.tap=function(n,r){return r(n),n},v.isMatch=function(n,r){var t=v.keys(r),e=t.length;if(null==n)return!e;for(var u=Object(n),i=0;i<e;i++){var o=t[i];if(r[o]!==u[o]||!(o in u))return!1}return!0};var N=function(n,r,t,e){if(n===r)return 0!==n||1/n==1/r;if(null==n||null==r)return n===r;n instanceof v&&(n=n._wrapped),r instanceof v&&(r=r._wrapped);var u=a.call(n);if(u!==a.call(r))return!1;switch(u){case"[object RegExp]":case"[object String]":return""+n==""+r;case"[object Number]":return+n!=+n?+r!=+r:0==+n?1/+n==1/r:+n==+r;case"[object Date]":case"[object Boolean]":return+n==+r}var i="[object Array]"===u;if(!i){if("object"!=typeof n||"object"!=typeof r)return!1;var o=n.constructor,c=r.constructor;if(o!==c&&!(v.isFunction(o)&&o instanceof o&&v.isFunction(c)&&c instanceof c)&&"constructor"in n&&"constructor"in r)return!1}e=e||[];for(var f=(t=t||[]).length;f--;)if(t[f]===n)return e[f]===r;if(t.push(n),e.push(r),i){if((f=n.length)!==r.length)return!1;for(;f--;)if(!N(n[f],r[f],t,e))return!1}else{var l,s=v.keys(n);if(f=s.length,v.keys(r).length!==f)return!1;for(;f--;)if(l=s[f],!v.has(r,l)||!N(n[l],r[l],t,e))return!1}return t.pop(),e.pop(),!0};v.isEqual=function(n,r){return N(n,r)},v.isEmpty=function(n){return null==n||(j(n)&&(v.isArray(n)||v.isString(n)||v.isArguments(n))?0===n.length:0===v.keys(n).length)},v.isElement=function(n){return!(!n||1!==n.nodeType)},v.isArray=f||function(n){return"[object Array]"===a.call(n)},v.isObject=function(n){var r=typeof n;return"function"===r||"object"===r&&!!n},v.each(["Arguments","Function","String","Number","Date","RegExp","Error"],function(n){v["is"+n]=function(r){return a.call(r)==="[object "+n+"]"}}),v.isArguments(arguments)||(v.isArguments=function(n){return v.has(n,"callee")}),"function"!=typeof/./&&"object"!=typeof Int8Array&&(v.isFunction=function(n){return"function"==typeof n||!1}),v.isFinite=function(n){return isFinite(n)&&!isNaN(parseFloat(n))},v.isNaN=function(n){return v.isNumber(n)&&n!==+n},v.isBoolean=function(n){return!0===n||!1===n||"[object Boolean]"===a.call(n)},v.isNull=function(n){return null===n},v.isUndefined=function(n){return void 0===n},v.has=function(n,r){return null!=n&&c.call(n,r)},v.noConflict=function(){return n._=r,this},v.identity=function(n){return n},v.constant=function(n){return function(){return n}},v.noop=function(){},v.property=b,v.propertyOf=function(n){return null==n?function(){}:function(r){return n[r]}},v.matcher=v.matches=function(n){return n=v.extendOwn({},n),function(r){return v.isMatch(r,n)}},v.times=function(n,r,t){var e=Array(Math.max(0,n));r=y(r,t,1);for(var u=0;u<n;u++)e[u]=r(u);return e},v.random=function(n,r){return null==r&&(r=n,n=0),n+Math.floor(Math.random()*(r-n+1))},v.now=Date.now||function(){return(new Date).getTime()};var B={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},T=v.invert(B),R=function(n){var r=function(r){return n[r]},t="(?:"+v.keys(n).join("|")+")",e=RegExp(t),u=RegExp(t,"g");return function(n){return n=null==n?"":""+n,e.test(n)?n.replace(u,r):n}};v.escape=R(B),v.unescape=R(T),v.result=function(n,r,t){var e=null==n?void 0:n[r];return void 0===e&&(e=t),v.isFunction(e)?e.call(n):e};var q=0;v.uniqueId=function(n){var r=++q+"";return n?n+r:r},v.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var K=/(.)^/,z={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},D=/\\|'|\r|\n|\u2028|\u2029/g,L=function(n){return"\\"+z[n]};v.template=function(n,r,t){!r&&t&&(r=t),r=v.defaults({},r,v.templateSettings);var e=RegExp([(r.escape||K).source,(r.interpolate||K).source,(r.evaluate||K).source].join("|")+"|$","g"),u=0,i="__p+='";n.replace(e,function(r,t,e,o,a){return i+=n.slice(u,a).replace(D,L),u=a+r.length,t?i+="'+\n((__t=("+t+"))==null?'':_.escape(__t))+\n'":e?i+="'+\n((__t=("+e+"))==null?'':__t)+\n'":o&&(i+="';\n"+o+"\n__p+='"),r}),i+="';\n",r.variable||(i="with(obj||{}){\n"+i+"}\n"),i="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+i+"return __p;\n";try{var o=new Function(r.variable||"obj","_",i)}catch(n){throw n.source=i,n}var a=function(n){return o.call(this,n,v)},c=r.variable||"obj";return a.source="function("+c+"){\n"+i+"}",a},v.chain=function(n){var r=v(n);return r._chain=!0,r};var P=function(n,r){return n._chain?v(r).chain():r};v.mixin=function(n){v.each(v.functions(n),function(r){var t=v[r]=n[r];v.prototype[r]=function(){var n=[this._wrapped];return i.apply(n,arguments),P(this,t.apply(v,n))}})},v.mixin(v),v.each(["pop","push","reverse","shift","sort","splice","unshift"],function(n){var r=t[n];v.prototype[n]=function(){var t=this._wrapped;return r.apply(t,arguments),"shift"!==n&&"splice"!==n||0!==t.length||delete t[0],P(this,t)}}),v.each(["concat","join","slice"],function(n){var r=t[n];v.prototype[n]=function(){return P(this,r.apply(this._wrapped,arguments))}}),v.prototype.value=function(){return this._wrapped},v.prototype.valueOf=v.prototype.toJSON=v.prototype.value,v.prototype.toString=function(){return""+this._wrapped},"function"==typeof define&&define.amd&&define("underscore",[],function(){return v})}).call(this);

},{}],"webfontloader":[function(require,module,exports){
!function(){function t(t,n,i){return t.call.apply(t.bind,arguments)}function n(t,n,i){if(!t)throw Error();if(2<arguments.length){var e=Array.prototype.slice.call(arguments,2);return function(){var i=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(i,e),t.apply(n,i)}}return function(){return t.apply(n,arguments)}}function i(e,o,a){return(i=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?t:n).apply(null,arguments)}var e=Date.now||function(){return+new Date};function o(t,n){this.a=t,this.o=n||t,this.c=this.o.document}var a=!!window.FontFace;function s(t,n,i,e){if(n=t.c.createElement(n),i)for(var o in i)i.hasOwnProperty(o)&&("style"==o?n.style.cssText=i[o]:n.setAttribute(o,i[o]));return e&&n.appendChild(t.c.createTextNode(e)),n}function r(t,n,i){(t=t.c.getElementsByTagName(n)[0])||(t=document.documentElement),t.insertBefore(i,t.lastChild)}function f(t){t.parentNode&&t.parentNode.removeChild(t)}function c(t,n,i){n=n||[],i=i||[];for(var e=t.className.split(/\s+/),o=0;o<n.length;o+=1){for(var a=!1,s=0;s<e.length;s+=1)if(n[o]===e[s]){a=!0;break}a||e.push(n[o])}for(n=[],o=0;o<e.length;o+=1){for(a=!1,s=0;s<i.length;s+=1)if(e[o]===i[s]){a=!0;break}a||n.push(e[o])}t.className=n.join(" ").replace(/\s+/g," ").replace(/^\s+|\s+$/,"")}function h(t,n){for(var i=t.className.split(/\s+/),e=0,o=i.length;e<o;e++)if(i[e]==n)return!0;return!1}function l(t,n,i){function e(){h&&o&&f&&(h(c),h=null)}n=s(t,"link",{rel:"stylesheet",href:n,media:"all"});var o=!1,f=!0,c=null,h=i||null;a?(n.onload=function(){o=!0,e()},n.onerror=function(){o=!0,c=Error("Stylesheet failed to load"),e()}):setTimeout(function(){o=!0,e()},0),r(t,"head",n)}function u(t,n,i,e){var o=t.c.getElementsByTagName("head")[0];if(o){var a=s(t,"script",{src:n}),r=!1;return a.onload=a.onreadystatechange=function(){r||this.readyState&&"loaded"!=this.readyState&&"complete"!=this.readyState||(r=!0,i&&i(null),a.onload=a.onreadystatechange=null,"HEAD"==a.parentNode.tagName&&o.removeChild(a))},o.appendChild(a),setTimeout(function(){r||(r=!0,i&&i(Error("Script load timeout")))},e||5e3),a}return null}function p(){this.a=0,this.c=null}function d(t){return t.a++,function(){t.a--,v(t)}}function g(t,n){t.c=n,v(t)}function v(t){0==t.a&&t.c&&(t.c(),t.c=null)}function w(t){this.a=t||"-"}function m(t,n){this.c=t,this.f=4,this.a="n";var i=(n||"n4").match(/^([nio])([1-9])$/i);i&&(this.a=i[1],this.f=parseInt(i[2],10))}function y(t){var n=[];t=t.split(/,\s*/);for(var i=0;i<t.length;i++){var e=t[i].replace(/['"]/g,"");-1!=e.indexOf(" ")||/^\d/.test(e)?n.push("'"+e+"'"):n.push(e)}return n.join(",")}function b(t){return t.a+t.f}function x(t){var n="normal";return"o"===t.a?n="oblique":"i"===t.a&&(n="italic"),n}function j(t){var n=4,i="n",e=null;return t&&((e=t.match(/(normal|oblique|italic)/i))&&e[1]&&(i=e[1].substr(0,1).toLowerCase()),(e=t.match(/([1-9]00|normal|bold)/i))&&e[1]&&(/bold/i.test(e[1])?n=7:/[1-9]00/.test(e[1])&&(n=parseInt(e[1].substr(0,1),10)))),i+n}function _(t,n){this.c=t,this.f=t.o.document.documentElement,this.h=n,this.a=new w("-"),this.j=!1!==n.events,this.g=!1!==n.classes}function k(t){if(t.g){var n=h(t.f,t.a.c("wf","active")),i=[],e=[t.a.c("wf","loading")];n||i.push(t.a.c("wf","inactive")),c(t.f,i,e)}T(t,"inactive")}function T(t,n,i){t.j&&t.h[n]&&(i?t.h[n](i.c,b(i)):t.h[n]())}function S(){this.c={}}function C(t,n){this.c=t,this.f=n,this.a=s(this.c,"span",{"aria-hidden":"true"},this.f)}function A(t){r(t.c,"body",t.a)}function N(t){return"display:block;position:absolute;top:-9999px;left:-9999px;font-size:300px;width:auto;height:auto;line-height:normal;margin:0;padding:0;font-variant:normal;white-space:nowrap;font-family:"+y(t.c)+";font-style:"+x(t)+";font-weight:"+t.f+"00;"}function E(t,n,i,e,o,a){this.g=t,this.j=n,this.a=e,this.c=i,this.f=o||3e3,this.h=a||void 0}function W(t,n,i,e,o,a,s){this.v=t,this.B=n,this.c=i,this.a=e,this.s=s||"BESbswy",this.f={},this.w=o||3e3,this.u=a||null,this.m=this.j=this.h=this.g=null,this.g=new C(this.c,this.s),this.h=new C(this.c,this.s),this.j=new C(this.c,this.s),this.m=new C(this.c,this.s),t=N(t=new m(this.a.c+",serif",b(this.a))),this.g.a.style.cssText=t,t=N(t=new m(this.a.c+",sans-serif",b(this.a))),this.h.a.style.cssText=t,t=N(t=new m("serif",b(this.a))),this.j.a.style.cssText=t,t=N(t=new m("sans-serif",b(this.a))),this.m.a.style.cssText=t,A(this.g),A(this.h),A(this.j),A(this.m)}w.prototype.c=function(t){for(var n=[],i=0;i<arguments.length;i++)n.push(arguments[i].replace(/[\W_]+/g,"").toLowerCase());return n.join(this.a)},E.prototype.start=function(){var t=this.c.o.document,n=this,i=e(),o=new Promise(function(o,a){!function s(){e()-i>=n.f?a():t.fonts.load(function(t){return x(t)+" "+t.f+"00 300px "+y(t.c)}(n.a),n.h).then(function(t){1<=t.length?o():setTimeout(s,25)},function(){a()})}()}),a=null,s=new Promise(function(t,i){a=setTimeout(i,n.f)});Promise.race([s,o]).then(function(){a&&(clearTimeout(a),a=null),n.g(n.a)},function(){n.j(n.a)})};var F={D:"serif",C:"sans-serif"},I=null;function O(){if(null===I){var t=/AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(window.navigator.userAgent);I=!!t&&(536>parseInt(t[1],10)||536===parseInt(t[1],10)&&11>=parseInt(t[2],10))}return I}function P(t,n,i){for(var e in F)if(F.hasOwnProperty(e)&&n===t.f[F[e]]&&i===t.f[F[e]])return!0;return!1}function B(t){var n,o=t.g.a.offsetWidth,a=t.h.a.offsetWidth;(n=o===t.f.serif&&a===t.f["sans-serif"])||(n=O()&&P(t,o,a)),n?e()-t.A>=t.w?O()&&P(t,o,a)&&(null===t.u||t.u.hasOwnProperty(t.a.c))?L(t,t.v):L(t,t.B):function(t){setTimeout(i(function(){B(this)},t),50)}(t):L(t,t.v)}function L(t,n){setTimeout(i(function(){f(this.g.a),f(this.h.a),f(this.j.a),f(this.m.a),n(this.a)},t),0)}function D(t,n,i){this.c=t,this.a=n,this.f=0,this.m=this.j=!1,this.s=i}W.prototype.start=function(){this.f.serif=this.j.a.offsetWidth,this.f["sans-serif"]=this.m.a.offsetWidth,this.A=e(),B(this)};var $=null;function q(t){0==--t.f&&t.j&&(t.m?((t=t.a).g&&c(t.f,[t.a.c("wf","active")],[t.a.c("wf","loading"),t.a.c("wf","inactive")]),T(t,"active")):k(t.a))}function H(t){this.j=t,this.a=new S,this.h=0,this.f=this.g=!0}function M(t,n,e,o,a){var s=0==--t.h;(t.f||t.g)&&setTimeout(function(){var t=a||null,r=o||{};if(0===e.length&&s)k(n.a);else{n.f+=e.length,s&&(n.j=s);var f,h=[];for(f=0;f<e.length;f++){var l=e[f],u=r[l.c],p=n.a,d=l;if(p.g&&c(p.f,[p.a.c("wf",d.c,b(d).toString(),"loading")]),T(p,"fontloading",d),p=null,null===$)if(window.FontFace){d=/Gecko.*Firefox\/(\d+)/.exec(window.navigator.userAgent);var g=/OS X.*Version\/10\..*Safari/.exec(window.navigator.userAgent)&&/Apple/.exec(window.navigator.vendor);$=d?42<parseInt(d[1],10):!g}else $=!1;p=$?new E(i(n.g,n),i(n.h,n),n.c,l,n.s,u):new W(i(n.g,n),i(n.h,n),n.c,l,n.s,t,u),h.push(p)}for(f=0;f<h.length;f++)h[f].start()}},0)}function z(t,n){this.c=t,this.a=n}function G(t,n){this.c=t,this.a=n}function K(t,n){this.c=t||R,this.a=[],this.f=[],this.g=n||""}D.prototype.g=function(t){var n=this.a;n.g&&c(n.f,[n.a.c("wf",t.c,b(t).toString(),"active")],[n.a.c("wf",t.c,b(t).toString(),"loading"),n.a.c("wf",t.c,b(t).toString(),"inactive")]),T(n,"fontactive",t),this.m=!0,q(this)},D.prototype.h=function(t){var n=this.a;if(n.g){var i=h(n.f,n.a.c("wf",t.c,b(t).toString(),"active")),e=[],o=[n.a.c("wf",t.c,b(t).toString(),"loading")];i||e.push(n.a.c("wf",t.c,b(t).toString(),"inactive")),c(n.f,e,o)}T(n,"fontinactive",t),q(this)},H.prototype.load=function(t){this.c=new o(this.j,t.context||this.j),this.g=!1!==t.events,this.f=!1!==t.classes,function(t,n,i){var e=[],o=i.timeout;!function(t){t.g&&c(t.f,[t.a.c("wf","loading")]),T(t,"loading")}(n);var e=function(t,n,i){var e,o=[];for(e in n)if(n.hasOwnProperty(e)){var a=t.c[e];a&&o.push(a(n[e],i))}return o}(t.a,i,t.c),a=new D(t.c,n,o);for(t.h=e.length,n=0,i=e.length;n<i;n++)e[n].load(function(n,i,e){M(t,a,n,i,e)})}(this,new _(this.c,t),t)},z.prototype.load=function(t){var n=this,i=n.a.projectId,e=n.a.version;if(i){var o=n.c.o;u(this.c,(n.a.api||"https://fast.fonts.net/jsapi")+"/"+i+".js"+(e?"?v="+e:""),function(e){e?t([]):(o["__MonotypeConfiguration__"+i]=function(){return n.a},function n(){if(o["__mti_fntLst"+i]){var e,a=o["__mti_fntLst"+i](),s=[];if(a)for(var r=0;r<a.length;r++){var f=a[r].fontfamily;null!=a[r].fontStyle&&null!=a[r].fontWeight?(e=a[r].fontStyle+a[r].fontWeight,s.push(new m(f,e))):s.push(new m(f))}t(s)}else setTimeout(function(){n()},50)}())}).id="__MonotypeAPIScript__"+i}else t([])},G.prototype.load=function(t){var n,i,e=this.a.urls||[],o=this.a.families||[],a=this.a.testStrings||{},s=new p;for(n=0,i=e.length;n<i;n++)l(this.c,e[n],d(s));var r=[];for(n=0,i=o.length;n<i;n++)if((e=o[n].split(":"))[1])for(var f=e[1].split(","),c=0;c<f.length;c+=1)r.push(new m(e[0],f[c]));else r.push(new m(e[0]));g(s,function(){t(r,a)})};var R="https://fonts.googleapis.com/css";function U(t){this.f=t,this.a=[],this.c={}}var V={latin:"BESbswy","latin-ext":"çöüğş",cyrillic:"йяЖ",greek:"αβΣ",khmer:"កខគ",Hanuman:"កខគ"},X={thin:"1",extralight:"2","extra-light":"2",ultralight:"2","ultra-light":"2",light:"3",regular:"4",book:"4",medium:"5","semi-bold":"6",semibold:"6","demi-bold":"6",demibold:"6",bold:"7","extra-bold":"8",extrabold:"8","ultra-bold":"8",ultrabold:"8",black:"9",heavy:"9",l:"3",r:"4",b:"7"},J={i:"i",italic:"i",n:"n",normal:"n"},Q=/^(thin|(?:(?:extra|ultra)-?)?light|regular|book|medium|(?:(?:semi|demi|extra|ultra)-?)?bold|black|heavy|l|r|b|[1-9]00)?(n|i|normal|italic)?$/;function Y(t,n){this.c=t,this.a=n}var Z={Arimo:!0,Cousine:!0,Tinos:!0};function tt(t,n){this.c=t,this.a=n}function nt(t,n){this.c=t,this.f=n,this.a=[]}Y.prototype.load=function(t){var n=new p,i=this.c,e=new K(this.a.api,this.a.text),o=this.a.families;!function(t,n){for(var i=n.length,e=0;e<i;e++){var o=n[e].split(":");3==o.length&&t.f.push(o.pop());var a="";2==o.length&&""!=o[1]&&(a=":"),t.a.push(o.join(a))}}(e,o);var a=new U(o);!function(t){for(var n=t.f.length,i=0;i<n;i++){var e=t.f[i].split(":"),o=e[0].replace(/\+/g," "),a=["n4"];if(2<=e.length){var s;if(s=[],r=e[1])for(var r,f=(r=r.split(",")).length,c=0;c<f;c++){var h;if((h=r[c]).match(/^[\w-]+$/))if(null==(u=Q.exec(h.toLowerCase())))h="";else{if(h=null==(h=u[2])||""==h?"n":J[h],null==(u=u[1])||""==u)u="4";else var l=X[u],u=l||(isNaN(u)?"4":u.substr(0,1));h=[h,u].join("")}else h="";h&&s.push(h)}0<s.length&&(a=s),3==e.length&&(s=[],0<(e=(e=e[2])?e.split(","):s).length&&(e=V[e[0]])&&(t.c[o]=e))}for(t.c[o]||(e=V[o])&&(t.c[o]=e),e=0;e<a.length;e+=1)t.a.push(new m(o,a[e]))}}(a),l(i,function(t){if(0==t.a.length)throw Error("No fonts to load!");if(-1!=t.c.indexOf("kit="))return t.c;for(var n=t.a.length,i=[],e=0;e<n;e++)i.push(t.a[e].replace(/ /g,"+"));return n=t.c+"?family="+i.join("%7C"),0<t.f.length&&(n+="&subset="+t.f.join(",")),0<t.g.length&&(n+="&text="+encodeURIComponent(t.g)),n}(e),d(n)),g(n,function(){t(a.a,a.c,Z)})},tt.prototype.load=function(t){var n=this.a.id,i=this.c.o;n?u(this.c,(this.a.api||"https://use.typekit.net")+"/"+n+".js",function(n){if(n)t([]);else if(i.Typekit&&i.Typekit.config&&i.Typekit.config.fn){n=i.Typekit.config.fn;for(var e=[],o=0;o<n.length;o+=2)for(var a=n[o],s=n[o+1],r=0;r<s.length;r++)e.push(new m(a,s[r]));try{i.Typekit.load({events:!1,classes:!1,async:!0})}catch(t){}t(e)}},2e3):t([])},nt.prototype.load=function(t){var n=this.f.id,i=this.c.o,e=this;n?(i.__webfontfontdeckmodule__||(i.__webfontfontdeckmodule__={}),i.__webfontfontdeckmodule__[n]=function(n,i){for(var o=0,a=i.fonts.length;o<a;++o){var s=i.fonts[o];e.a.push(new m(s.name,j("font-weight:"+s.weight+";font-style:"+s.style)))}t(e.a)},u(this.c,(this.f.api||"https://f.fontdeck.com/s/css/js/")+function(t){return t.o.location.hostname||t.a.location.hostname}(this.c)+"/"+n+".js",function(n){n&&t([])})):t([])};var it=new H(window);it.a.c.custom=function(t,n){return new G(n,t)},it.a.c.fontdeck=function(t,n){return new nt(n,t)},it.a.c.monotype=function(t,n){return new z(n,t)},it.a.c.typekit=function(t,n){return new tt(n,t)},it.a.c.google=function(t,n){return new Y(n,t)};var et={load:i(it.load,it)};"function"==typeof define&&define.amd?define(function(){return et}):"undefined"!=typeof module&&module.exports?module.exports=et:(window.WebFont=et,window.WebFontConfig&&it.load(window.WebFontConfig))}();

},{}]},{},["matches-polyfill","raf-polyfill","fullscreen-polyfill","math-sign-polyfill","/Users/pablo/Work/projects/folio/folio-workspace-assets/src/js/app/App.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
